Search.setIndex({"alltitles": {"A Simple Example": [[472, "a-simple-example"]], "Array": [[307, null]], "Attention layer": [[5, "attention-layer"]], "Automatic Differentiation": [[466, "automatic-differentiation"]], "Automatic Vectorization": [[466, "automatic-vectorization"]], "Basics": [[470, "basics"]], "Basics of Compile": [[464, "basics-of-compile"]], "Binary Size Minimization": [[8, "binary-size-minimization"]], "Binding to Python": [[2, "binding-to-python"]], "Build Options": [[8, "id3"]], "Build Requirements": [[8, "build-requirements"]], "Build and Install": [[8, null]], "Build from source": [[8, "build-from-source"]], "Building and Binding": [[2, "building-and-binding"]], "Building with CMake": [[2, "building-with-cmake"]], "Building with setuptools": [[2, "building-with-setuptools"]], "C++ API": [[8, "c-api"]], "C++ API Reference": [[7, null]], "Common Optimizers": [[458, null]], "Compilation": [[464, null]], "Compiling Training Graphs": [[464, "compiling-training-graphs"]], "Complex Example": [[1, "complex-example"]], "Conversion to NumPy and Other Frameworks": [[469, null]], "Converting the weights": [[5, "converting-the-weights"]], "Custom Extensions in MLX": [[2, null]], "Custom Metal Kernels": [[1, null]], "Data Types": [[308, null]], "Debugging": [[464, "debugging"]], "Devices and Streams": [[309, null]], "Differences from NumPy": [[467, "differences-from-numpy"]], "Distributed Communication": [[310, null], [465, null]], "Download the code": [[2, null], [5, null]], "Encoder layer": [[5, "encoder-layer"]], "Example Speedup": [[464, "example-speedup"]], "Examples": [[7, null]], "FFT": [[312, null]], "Fast": [[311, null]], "Full model": [[5, "full-model"]], "Function Transforms": [[466, null]], "Function and Graph Transformations": [[470, "function-and-graph-transformations"]], "Functions": [[433, null]], "Further Reading": [[7, null]], "Generation": [[5, "generation"]], "Getting Started": [[465, "getting-started"]], "Grid Sample VJP": [[1, "grid-sample-vjp"]], "Implementing the CPU Back-end": [[2, "implementing-the-cpu-back-end"]], "Implementing the GPU Back-end": [[2, "implementing-the-gpu-back-end"]], "Implementing the Primitive": [[2, "implementing-the-primitive"]], "Implementing the model": [[5, "implementing-the-model"]], "In Place Updates": [[467, "in-place-updates"]], "Indexing Arrays": [[467, null]], "Initializers": [[434, null]], "Inspecting Modules": [[315, "inspecting-modules"]], "Install": [[7, null]], "Installing MPI": [[465, "installing-mpi"]], "Introducing the Example": [[2, "introducing-the-example"]], "JAX": [[469, "jax"]], "LLM inference": [[5, null]], "Layers": [[435, null]], "Lazy Evaluation": [[468, null]], "Linear Algebra": [[313, null]], "Linear Regression": [[4, null]], "Loss Functions": [[436, null]], "MLX": [[7, null]], "Metal": [[314, null]], "Metal Debugger": [[3, null]], "Metal not found": [[8, "metal-not-found"]], "Module": [[437, null]], "Multi-Layer Perceptron": [[6, null]], "Neural Networks": [[315, null]], "Only Compute What You Use": [[468, "only-compute-what-you-use"]], "Operations": [[0, null], [2, "operations"], [438, null]], "Operations and Primitives": [[2, "operations-and-primitives"]], "Optimizer": [[459, null]], "Optimizers": [[439, null]], "Parameters": [[315, "parameters"]], "Primitive Transforms": [[2, "primitive-transforms"]], "Primitives": [[2, "primitives"]], "Pure Functions": [[464, "pure-functions"]], "Putting it all together": [[5, "putting-it-all-together"]], "PyTorch": [[469, "pytorch"]], "Python API": [[8, "python-api"]], "Python API Reference": [[7, null]], "Python Installation": [[8, "python-installation"]], "Quick Start Guide": [[470, null]], "Quick Start with Neural Networks": [[315, "quick-start-with-neural-networks"]], "Random": [[461, null]], "Results": [[2, "results"]], "Saving and Loading": [[439, "saving-and-loading"]], "Saving and Loading Arrays": [[471, null]], "Schedulers": [[460, null]], "Scripts": [[2, "scripts"], [5, "scripts"]], "Serialization Formats": [[471, "id1"]], "Setting up Remote Hosts": [[465, "setting-up-remote-hosts"]], "Simple Example": [[1, "simple-example"]], "Specifying the Stream": [[473, "specifying-the-stream"]], "Supported Data Types": [[308, "id2"]], "TensorFlow": [[469, "tensorflow"]], "The Module Class": [[315, "the-module-class"]], "Training Example": [[465, "training-example"]], "Transformations with Compile": [[464, "transformations-with-compile"]], "Transforming Compute Graphs": [[468, "transforming-compute-graphs"]], "Transforms": [[462, null]], "Tree Utils": [[463, null]], "Troubleshooting": [[8, "troubleshooting"], [8, "id2"]], "Tuning All Reduce": [[465, "tuning-all-reduce"]], "Unified Memory": [[472, null]], "Updating the Parameters": [[315, "updating-the-parameters"]], "Usage": [[2, "usage"], [7, null]], "Using Shape/Strides": [[1, "using-shape-strides"]], "Using Streams": [[473, null]], "Using the Primitive": [[2, "using-the-primitive"]], "Value and Grad": [[315, "value-and-grad"]], "Weight loading and benchmarking": [[5, "weight-loading-and-benchmarking"]], "When to Evaluate": [[468, "when-to-evaluate"]], "Why Lazy Evaluation": [[468, "why-lazy-evaluation"]], "Xcode Workflow": [[3, "xcode-workflow"]], "mlx.core.Device": [[9, null]], "mlx.core.Dtype": [[10, null]], "mlx.core.DtypeCategory": [[11, null]], "mlx.core.Stream": [[306, null]], "mlx.core.abs": [[12, null]], "mlx.core.add": [[13, null]], "mlx.core.addmm": [[14, null]], "mlx.core.all": [[15, null]], "mlx.core.allclose": [[16, null]], "mlx.core.any": [[17, null]], "mlx.core.arange": [[18, null]], "mlx.core.arccos": [[19, null]], "mlx.core.arccosh": [[20, null]], "mlx.core.arcsin": [[21, null]], "mlx.core.arcsinh": [[22, null]], "mlx.core.arctan": [[23, null]], "mlx.core.arctan2": [[24, null]], "mlx.core.arctanh": [[25, null]], "mlx.core.argmax": [[26, null]], "mlx.core.argmin": [[27, null]], "mlx.core.argpartition": [[28, null]], "mlx.core.argsort": [[29, null]], "mlx.core.array": [[30, null]], "mlx.core.array.T": [[31, null]], "mlx.core.array.abs": [[32, null]], "mlx.core.array.all": [[33, null]], "mlx.core.array.any": [[34, null]], "mlx.core.array.argmax": [[35, null]], "mlx.core.array.argmin": [[36, null]], "mlx.core.array.astype": [[37, null]], "mlx.core.array.at": [[38, null]], "mlx.core.array.conj": [[39, null]], "mlx.core.array.cos": [[40, null]], "mlx.core.array.cummax": [[41, null]], "mlx.core.array.cummin": [[42, null]], "mlx.core.array.cumprod": [[43, null]], "mlx.core.array.cumsum": [[44, null]], "mlx.core.array.diag": [[45, null]], "mlx.core.array.diagonal": [[46, null]], "mlx.core.array.dtype": [[47, null]], "mlx.core.array.exp": [[48, null]], "mlx.core.array.flatten": [[49, null]], "mlx.core.array.item": [[50, null]], "mlx.core.array.itemsize": [[51, null]], "mlx.core.array.log": [[52, null]], "mlx.core.array.log10": [[53, null]], "mlx.core.array.log1p": [[54, null]], "mlx.core.array.log2": [[55, null]], "mlx.core.array.logsumexp": [[56, null]], "mlx.core.array.max": [[57, null]], "mlx.core.array.mean": [[58, null]], "mlx.core.array.min": [[59, null]], "mlx.core.array.moveaxis": [[60, null]], "mlx.core.array.nbytes": [[61, null]], "mlx.core.array.ndim": [[62, null]], "mlx.core.array.prod": [[63, null]], "mlx.core.array.reciprocal": [[64, null]], "mlx.core.array.reshape": [[65, null]], "mlx.core.array.round": [[66, null]], "mlx.core.array.rsqrt": [[67, null]], "mlx.core.array.shape": [[68, null]], "mlx.core.array.sin": [[69, null]], "mlx.core.array.size": [[70, null]], "mlx.core.array.split": [[71, null]], "mlx.core.array.sqrt": [[72, null]], "mlx.core.array.square": [[73, null]], "mlx.core.array.squeeze": [[74, null]], "mlx.core.array.std": [[75, null]], "mlx.core.array.sum": [[76, null]], "mlx.core.array.swapaxes": [[77, null]], "mlx.core.array.tolist": [[78, null]], "mlx.core.array.transpose": [[79, null]], "mlx.core.array.var": [[80, null]], "mlx.core.array.view": [[81, null]], "mlx.core.array_equal": [[82, null]], "mlx.core.as_strided": [[83, null]], "mlx.core.atleast_1d": [[84, null]], "mlx.core.atleast_2d": [[85, null]], "mlx.core.atleast_3d": [[86, null]], "mlx.core.bitwise_and": [[87, null]], "mlx.core.bitwise_or": [[88, null]], "mlx.core.bitwise_xor": [[89, null]], "mlx.core.block_masked_mm": [[90, null]], "mlx.core.broadcast_to": [[91, null]], "mlx.core.ceil": [[92, null]], "mlx.core.clip": [[93, null]], "mlx.core.compile": [[94, null]], "mlx.core.concatenate": [[95, null]], "mlx.core.conj": [[96, null]], "mlx.core.conjugate": [[97, null]], "mlx.core.conv1d": [[98, null]], "mlx.core.conv2d": [[99, null]], "mlx.core.conv3d": [[100, null]], "mlx.core.conv_general": [[101, null]], "mlx.core.conv_transpose1d": [[102, null]], "mlx.core.conv_transpose2d": [[103, null]], "mlx.core.conv_transpose3d": [[104, null]], "mlx.core.convolve": [[105, null]], "mlx.core.cos": [[106, null]], "mlx.core.cosh": [[107, null]], "mlx.core.cummax": [[108, null]], "mlx.core.cummin": [[109, null]], "mlx.core.cumprod": [[110, null]], "mlx.core.cumsum": [[111, null]], "mlx.core.custom_function": [[112, null]], "mlx.core.default_device": [[113, null]], "mlx.core.default_stream": [[114, null]], "mlx.core.degrees": [[115, null]], "mlx.core.dequantize": [[116, null]], "mlx.core.diag": [[117, null]], "mlx.core.diagonal": [[118, null]], "mlx.core.disable_compile": [[119, null]], "mlx.core.distributed.Group": [[120, null]], "mlx.core.distributed.all_gather": [[121, null]], "mlx.core.distributed.all_sum": [[122, null]], "mlx.core.distributed.init": [[123, null]], "mlx.core.distributed.is_available": [[124, null]], "mlx.core.distributed.recv": [[125, null]], "mlx.core.distributed.recv_like": [[126, null]], "mlx.core.distributed.send": [[127, null]], "mlx.core.divide": [[128, null]], "mlx.core.divmod": [[129, null]], "mlx.core.einsum": [[130, null]], "mlx.core.einsum_path": [[131, null]], "mlx.core.enable_compile": [[132, null]], "mlx.core.equal": [[133, null]], "mlx.core.erf": [[134, null]], "mlx.core.erfinv": [[135, null]], "mlx.core.eval": [[136, null]], "mlx.core.exp": [[137, null]], "mlx.core.expand_dims": [[138, null]], "mlx.core.expm1": [[139, null]], "mlx.core.eye": [[140, null]], "mlx.core.fast.affine_quantize": [[141, null]], "mlx.core.fast.layer_norm": [[142, null]], "mlx.core.fast.metal_kernel": [[143, null]], "mlx.core.fast.rms_norm": [[144, null]], "mlx.core.fast.rope": [[145, null]], "mlx.core.fast.scaled_dot_product_attention": [[146, null]], "mlx.core.fft.fft": [[147, null]], "mlx.core.fft.fft2": [[148, null]], "mlx.core.fft.fftn": [[149, null]], "mlx.core.fft.ifft": [[150, null]], "mlx.core.fft.ifft2": [[151, null]], "mlx.core.fft.ifftn": [[152, null]], "mlx.core.fft.irfft": [[153, null]], "mlx.core.fft.irfft2": [[154, null]], "mlx.core.fft.irfftn": [[155, null]], "mlx.core.fft.rfft": [[156, null]], "mlx.core.fft.rfft2": [[157, null]], "mlx.core.fft.rfftn": [[158, null]], "mlx.core.flatten": [[159, null]], "mlx.core.floor": [[160, null]], "mlx.core.floor_divide": [[161, null]], "mlx.core.full": [[162, null]], "mlx.core.gather_mm": [[163, null]], "mlx.core.gather_qmm": [[164, null]], "mlx.core.grad": [[165, null]], "mlx.core.greater": [[166, null]], "mlx.core.greater_equal": [[167, null]], "mlx.core.hadamard_transform": [[168, null]], "mlx.core.identity": [[169, null]], "mlx.core.inner": [[170, null]], "mlx.core.isclose": [[171, null]], "mlx.core.isfinite": [[172, null]], "mlx.core.isinf": [[173, null]], "mlx.core.isnan": [[174, null]], "mlx.core.isneginf": [[175, null]], "mlx.core.isposinf": [[176, null]], "mlx.core.issubdtype": [[177, null]], "mlx.core.jvp": [[178, null]], "mlx.core.left_shift": [[179, null]], "mlx.core.less": [[180, null]], "mlx.core.less_equal": [[181, null]], "mlx.core.linalg.cholesky": [[182, null]], "mlx.core.linalg.cholesky_inv": [[183, null]], "mlx.core.linalg.inv": [[184, null]], "mlx.core.linalg.norm": [[185, null]], "mlx.core.linalg.qr": [[186, null]], "mlx.core.linalg.svd": [[187, null]], "mlx.core.linalg.tri_inv": [[188, null]], "mlx.core.linspace": [[189, null]], "mlx.core.load": [[190, null]], "mlx.core.log": [[191, null]], "mlx.core.log10": [[192, null]], "mlx.core.log1p": [[193, null]], "mlx.core.log2": [[194, null]], "mlx.core.logaddexp": [[195, null]], "mlx.core.logical_and": [[196, null]], "mlx.core.logical_not": [[197, null]], "mlx.core.logical_or": [[198, null]], "mlx.core.logsumexp": [[199, null]], "mlx.core.matmul": [[200, null]], "mlx.core.max": [[201, null]], "mlx.core.maximum": [[202, null]], "mlx.core.mean": [[203, null]], "mlx.core.meshgrid": [[204, null]], "mlx.core.metal.clear_cache": [[205, null]], "mlx.core.metal.device_info": [[206, null]], "mlx.core.metal.get_active_memory": [[207, null]], "mlx.core.metal.get_cache_memory": [[208, null]], "mlx.core.metal.get_peak_memory": [[209, null]], "mlx.core.metal.is_available": [[210, null]], "mlx.core.metal.reset_peak_memory": [[211, null]], "mlx.core.metal.set_cache_limit": [[212, null]], "mlx.core.metal.set_memory_limit": [[213, null]], "mlx.core.metal.start_capture": [[214, null]], "mlx.core.metal.stop_capture": [[215, null]], "mlx.core.min": [[216, null]], "mlx.core.minimum": [[217, null]], "mlx.core.moveaxis": [[218, null]], "mlx.core.multiply": [[219, null]], "mlx.core.nan_to_num": [[220, null]], "mlx.core.negative": [[221, null]], "mlx.core.new_stream": [[222, null]], "mlx.core.not_equal": [[223, null]], "mlx.core.ones": [[224, null]], "mlx.core.ones_like": [[225, null]], "mlx.core.outer": [[226, null]], "mlx.core.pad": [[227, null]], "mlx.core.partition": [[228, null]], "mlx.core.power": [[229, null]], "mlx.core.prod": [[230, null]], "mlx.core.quantize": [[231, null]], "mlx.core.quantized_matmul": [[232, null]], "mlx.core.radians": [[233, null]], "mlx.core.random.bernoulli": [[234, null]], "mlx.core.random.categorical": [[235, null]], "mlx.core.random.gumbel": [[236, null]], "mlx.core.random.key": [[237, null]], "mlx.core.random.laplace": [[238, null]], "mlx.core.random.multivariate_normal": [[239, null]], "mlx.core.random.normal": [[240, null]], "mlx.core.random.randint": [[241, null]], "mlx.core.random.seed": [[242, null]], "mlx.core.random.split": [[243, null]], "mlx.core.random.truncated_normal": [[244, null]], "mlx.core.random.uniform": [[245, null]], "mlx.core.reciprocal": [[246, null]], "mlx.core.remainder": [[247, null]], "mlx.core.repeat": [[248, null]], "mlx.core.reshape": [[249, null]], "mlx.core.right_shift": [[250, null]], "mlx.core.round": [[251, null]], "mlx.core.rsqrt": [[252, null]], "mlx.core.save": [[253, null]], "mlx.core.save_gguf": [[254, null]], "mlx.core.save_safetensors": [[255, null]], "mlx.core.savez": [[256, null]], "mlx.core.savez_compressed": [[257, null]], "mlx.core.set_default_device": [[258, null]], "mlx.core.set_default_stream": [[259, null]], "mlx.core.sigmoid": [[260, null]], "mlx.core.sign": [[261, null]], "mlx.core.sin": [[262, null]], "mlx.core.sinh": [[263, null]], "mlx.core.softmax": [[264, null]], "mlx.core.sort": [[265, null]], "mlx.core.split": [[266, null]], "mlx.core.sqrt": [[267, null]], "mlx.core.square": [[268, null]], "mlx.core.squeeze": [[269, null]], "mlx.core.stack": [[270, null]], "mlx.core.std": [[271, null]], "mlx.core.stop_gradient": [[272, null]], "mlx.core.stream": [[273, null]], "mlx.core.subtract": [[274, null]], "mlx.core.sum": [[275, null]], "mlx.core.swapaxes": [[276, null]], "mlx.core.synchronize": [[277, null]], "mlx.core.take": [[278, null]], "mlx.core.take_along_axis": [[279, null]], "mlx.core.tan": [[280, null]], "mlx.core.tanh": [[281, null]], "mlx.core.tensordot": [[282, null]], "mlx.core.tile": [[283, null]], "mlx.core.topk": [[284, null]], "mlx.core.trace": [[285, null]], "mlx.core.transpose": [[286, null]], "mlx.core.tri": [[287, null]], "mlx.core.tril": [[288, null]], "mlx.core.triu": [[289, null]], "mlx.core.value_and_grad": [[290, null]], "mlx.core.var": [[291, null]], "mlx.core.view": [[292, null]], "mlx.core.vjp": [[293, null]], "mlx.core.vmap": [[294, null]], "mlx.core.where": [[295, null]], "mlx.core.zeros": [[296, null]], "mlx.core.zeros_like": [[297, null]], "mlx.nn.ALiBi": [[316, null]], "mlx.nn.AvgPool1d": [[317, null]], "mlx.nn.AvgPool2d": [[318, null]], "mlx.nn.BatchNorm": [[319, null]], "mlx.nn.Conv1d": [[320, null]], "mlx.nn.Conv2d": [[321, null]], "mlx.nn.Conv3d": [[322, null]], "mlx.nn.ConvTranspose1d": [[323, null]], "mlx.nn.ConvTranspose2d": [[324, null]], "mlx.nn.ConvTranspose3d": [[325, null]], "mlx.nn.Dropout": [[326, null]], "mlx.nn.Dropout2d": [[327, null]], "mlx.nn.Dropout3d": [[328, null]], "mlx.nn.Embedding": [[329, null]], "mlx.nn.GELU": [[330, null]], "mlx.nn.GLU": [[331, null]], "mlx.nn.GRU": [[332, null]], "mlx.nn.GroupNorm": [[333, null]], "mlx.nn.HardShrink": [[334, null]], "mlx.nn.HardTanh": [[335, null]], "mlx.nn.Hardswish": [[336, null]], "mlx.nn.InstanceNorm": [[337, null]], "mlx.nn.LSTM": [[338, null]], "mlx.nn.LayerNorm": [[339, null]], "mlx.nn.LeakyReLU": [[340, null]], "mlx.nn.Linear": [[341, null]], "mlx.nn.MaxPool1d": [[342, null]], "mlx.nn.MaxPool2d": [[343, null]], "mlx.nn.Mish": [[344, null]], "mlx.nn.Module.apply": [[345, null]], "mlx.nn.Module.apply_to_modules": [[346, null]], "mlx.nn.Module.children": [[347, null]], "mlx.nn.Module.eval": [[348, null]], "mlx.nn.Module.filter_and_map": [[349, null]], "mlx.nn.Module.freeze": [[350, null]], "mlx.nn.Module.leaf_modules": [[351, null]], "mlx.nn.Module.load_weights": [[352, null]], "mlx.nn.Module.modules": [[353, null]], "mlx.nn.Module.named_modules": [[354, null]], "mlx.nn.Module.parameters": [[355, null]], "mlx.nn.Module.save_weights": [[356, null]], "mlx.nn.Module.set_dtype": [[357, null]], "mlx.nn.Module.state": [[358, null]], "mlx.nn.Module.train": [[359, null]], "mlx.nn.Module.trainable_parameters": [[360, null]], "mlx.nn.Module.training": [[361, null]], "mlx.nn.Module.unfreeze": [[362, null]], "mlx.nn.Module.update": [[363, null]], "mlx.nn.Module.update_modules": [[364, null]], "mlx.nn.MultiHeadAttention": [[365, null]], "mlx.nn.PReLU": [[366, null]], "mlx.nn.QuantizedEmbedding": [[367, null]], "mlx.nn.QuantizedLinear": [[368, null]], "mlx.nn.RMSNorm": [[369, null]], "mlx.nn.RNN": [[370, null]], "mlx.nn.ReLU": [[371, null]], "mlx.nn.ReLU6": [[372, null]], "mlx.nn.RoPE": [[373, null]], "mlx.nn.SELU": [[374, null]], "mlx.nn.Sequential": [[375, null]], "mlx.nn.SiLU": [[376, null]], "mlx.nn.SinusoidalPositionalEncoding": [[377, null]], "mlx.nn.Softmax": [[378, null]], "mlx.nn.Softmin": [[379, null]], "mlx.nn.Softplus": [[380, null]], "mlx.nn.Softshrink": [[381, null]], "mlx.nn.Softsign": [[382, null]], "mlx.nn.Step": [[383, null]], "mlx.nn.Tanh": [[384, null]], "mlx.nn.Transformer": [[385, null]], "mlx.nn.Upsample": [[386, null]], "mlx.nn.elu": [[395, null]], "mlx.nn.gelu": [[396, null]], "mlx.nn.gelu_approx": [[397, null]], "mlx.nn.gelu_fast_approx": [[398, null]], "mlx.nn.glu": [[399, null]], "mlx.nn.hard_shrink": [[400, null]], "mlx.nn.hard_tanh": [[401, null]], "mlx.nn.hardswish": [[402, null]], "mlx.nn.init.constant": [[387, null]], "mlx.nn.init.glorot_normal": [[388, null]], "mlx.nn.init.glorot_uniform": [[389, null]], "mlx.nn.init.he_normal": [[390, null]], "mlx.nn.init.he_uniform": [[391, null]], "mlx.nn.init.identity": [[392, null]], "mlx.nn.init.normal": [[393, null]], "mlx.nn.init.uniform": [[394, null]], "mlx.nn.leaky_relu": [[403, null]], "mlx.nn.log_sigmoid": [[404, null]], "mlx.nn.log_softmax": [[405, null]], "mlx.nn.losses.binary_cross_entropy": [[406, null]], "mlx.nn.losses.cosine_similarity_loss": [[407, null]], "mlx.nn.losses.cross_entropy": [[408, null]], "mlx.nn.losses.gaussian_nll_loss": [[409, null]], "mlx.nn.losses.hinge_loss": [[410, null]], "mlx.nn.losses.huber_loss": [[411, null]], "mlx.nn.losses.kl_div_loss": [[412, null]], "mlx.nn.losses.l1_loss": [[413, null]], "mlx.nn.losses.log_cosh_loss": [[414, null]], "mlx.nn.losses.margin_ranking_loss": [[415, null]], "mlx.nn.losses.mse_loss": [[416, null]], "mlx.nn.losses.nll_loss": [[417, null]], "mlx.nn.losses.smooth_l1_loss": [[418, null]], "mlx.nn.losses.triplet_loss": [[419, null]], "mlx.nn.mish": [[420, null]], "mlx.nn.prelu": [[421, null]], "mlx.nn.quantize": [[298, null]], "mlx.nn.relu": [[422, null]], "mlx.nn.relu6": [[423, null]], "mlx.nn.selu": [[424, null]], "mlx.nn.sigmoid": [[425, null]], "mlx.nn.silu": [[426, null]], "mlx.nn.softmax": [[427, null]], "mlx.nn.softmin": [[428, null]], "mlx.nn.softplus": [[429, null]], "mlx.nn.softshrink": [[430, null]], "mlx.nn.step": [[431, null]], "mlx.nn.tanh": [[432, null]], "mlx.nn.value_and_grad": [[299, null]], "mlx.optimizers.AdaDelta": [[440, null]], "mlx.optimizers.Adafactor": [[441, null]], "mlx.optimizers.Adagrad": [[442, null]], "mlx.optimizers.Adam": [[443, null]], "mlx.optimizers.AdamW": [[444, null]], "mlx.optimizers.Adamax": [[445, null]], "mlx.optimizers.Lion": [[446, null]], "mlx.optimizers.Optimizer.apply_gradients": [[447, null]], "mlx.optimizers.Optimizer.init": [[448, null]], "mlx.optimizers.Optimizer.state": [[449, null]], "mlx.optimizers.Optimizer.update": [[450, null]], "mlx.optimizers.RMSprop": [[451, null]], "mlx.optimizers.SGD": [[452, null]], "mlx.optimizers.clip_grad_norm": [[300, null]], "mlx.optimizers.cosine_decay": [[453, null]], "mlx.optimizers.exponential_decay": [[454, null]], "mlx.optimizers.join_schedules": [[455, null]], "mlx.optimizers.linear_schedule": [[456, null]], "mlx.optimizers.step_decay": [[457, null]], "mlx.utils.tree_flatten": [[301, null]], "mlx.utils.tree_map": [[302, null]], "mlx.utils.tree_map_with_path": [[303, null]], "mlx.utils.tree_reduce": [[304, null]], "mlx.utils.tree_unflatten": [[305, null]], "x86 Shell": [[8, "x86-shell"]]}, "docnames": ["cpp/ops", "dev/custom_metal_kernels", "dev/extensions", "dev/metal_debugger", "examples/linear_regression", "examples/llama-inference", "examples/mlp", "index", "install", "python/_autosummary/mlx.core.Device", "python/_autosummary/mlx.core.Dtype", "python/_autosummary/mlx.core.DtypeCategory", "python/_autosummary/mlx.core.abs", "python/_autosummary/mlx.core.add", "python/_autosummary/mlx.core.addmm", "python/_autosummary/mlx.core.all", "python/_autosummary/mlx.core.allclose", "python/_autosummary/mlx.core.any", "python/_autosummary/mlx.core.arange", "python/_autosummary/mlx.core.arccos", "python/_autosummary/mlx.core.arccosh", "python/_autosummary/mlx.core.arcsin", "python/_autosummary/mlx.core.arcsinh", "python/_autosummary/mlx.core.arctan", "python/_autosummary/mlx.core.arctan2", "python/_autosummary/mlx.core.arctanh", "python/_autosummary/mlx.core.argmax", "python/_autosummary/mlx.core.argmin", "python/_autosummary/mlx.core.argpartition", "python/_autosummary/mlx.core.argsort", "python/_autosummary/mlx.core.array", "python/_autosummary/mlx.core.array.T", "python/_autosummary/mlx.core.array.abs", "python/_autosummary/mlx.core.array.all", "python/_autosummary/mlx.core.array.any", "python/_autosummary/mlx.core.array.argmax", "python/_autosummary/mlx.core.array.argmin", "python/_autosummary/mlx.core.array.astype", "python/_autosummary/mlx.core.array.at", "python/_autosummary/mlx.core.array.conj", "python/_autosummary/mlx.core.array.cos", "python/_autosummary/mlx.core.array.cummax", "python/_autosummary/mlx.core.array.cummin", "python/_autosummary/mlx.core.array.cumprod", "python/_autosummary/mlx.core.array.cumsum", "python/_autosummary/mlx.core.array.diag", "python/_autosummary/mlx.core.array.diagonal", "python/_autosummary/mlx.core.array.dtype", "python/_autosummary/mlx.core.array.exp", "python/_autosummary/mlx.core.array.flatten", "python/_autosummary/mlx.core.array.item", "python/_autosummary/mlx.core.array.itemsize", "python/_autosummary/mlx.core.array.log", "python/_autosummary/mlx.core.array.log10", "python/_autosummary/mlx.core.array.log1p", "python/_autosummary/mlx.core.array.log2", "python/_autosummary/mlx.core.array.logsumexp", "python/_autosummary/mlx.core.array.max", "python/_autosummary/mlx.core.array.mean", "python/_autosummary/mlx.core.array.min", "python/_autosummary/mlx.core.array.moveaxis", "python/_autosummary/mlx.core.array.nbytes", "python/_autosummary/mlx.core.array.ndim", "python/_autosummary/mlx.core.array.prod", "python/_autosummary/mlx.core.array.reciprocal", "python/_autosummary/mlx.core.array.reshape", "python/_autosummary/mlx.core.array.round", "python/_autosummary/mlx.core.array.rsqrt", "python/_autosummary/mlx.core.array.shape", "python/_autosummary/mlx.core.array.sin", "python/_autosummary/mlx.core.array.size", "python/_autosummary/mlx.core.array.split", "python/_autosummary/mlx.core.array.sqrt", "python/_autosummary/mlx.core.array.square", "python/_autosummary/mlx.core.array.squeeze", "python/_autosummary/mlx.core.array.std", "python/_autosummary/mlx.core.array.sum", "python/_autosummary/mlx.core.array.swapaxes", "python/_autosummary/mlx.core.array.tolist", "python/_autosummary/mlx.core.array.transpose", "python/_autosummary/mlx.core.array.var", "python/_autosummary/mlx.core.array.view", "python/_autosummary/mlx.core.array_equal", "python/_autosummary/mlx.core.as_strided", "python/_autosummary/mlx.core.atleast_1d", "python/_autosummary/mlx.core.atleast_2d", "python/_autosummary/mlx.core.atleast_3d", "python/_autosummary/mlx.core.bitwise_and", "python/_autosummary/mlx.core.bitwise_or", "python/_autosummary/mlx.core.bitwise_xor", "python/_autosummary/mlx.core.block_masked_mm", "python/_autosummary/mlx.core.broadcast_to", "python/_autosummary/mlx.core.ceil", "python/_autosummary/mlx.core.clip", "python/_autosummary/mlx.core.compile", "python/_autosummary/mlx.core.concatenate", "python/_autosummary/mlx.core.conj", "python/_autosummary/mlx.core.conjugate", "python/_autosummary/mlx.core.conv1d", "python/_autosummary/mlx.core.conv2d", "python/_autosummary/mlx.core.conv3d", "python/_autosummary/mlx.core.conv_general", "python/_autosummary/mlx.core.conv_transpose1d", "python/_autosummary/mlx.core.conv_transpose2d", "python/_autosummary/mlx.core.conv_transpose3d", "python/_autosummary/mlx.core.convolve", "python/_autosummary/mlx.core.cos", "python/_autosummary/mlx.core.cosh", "python/_autosummary/mlx.core.cummax", "python/_autosummary/mlx.core.cummin", "python/_autosummary/mlx.core.cumprod", "python/_autosummary/mlx.core.cumsum", "python/_autosummary/mlx.core.custom_function", "python/_autosummary/mlx.core.default_device", "python/_autosummary/mlx.core.default_stream", "python/_autosummary/mlx.core.degrees", "python/_autosummary/mlx.core.dequantize", "python/_autosummary/mlx.core.diag", "python/_autosummary/mlx.core.diagonal", "python/_autosummary/mlx.core.disable_compile", "python/_autosummary/mlx.core.distributed.Group", "python/_autosummary/mlx.core.distributed.all_gather", "python/_autosummary/mlx.core.distributed.all_sum", "python/_autosummary/mlx.core.distributed.init", "python/_autosummary/mlx.core.distributed.is_available", "python/_autosummary/mlx.core.distributed.recv", "python/_autosummary/mlx.core.distributed.recv_like", "python/_autosummary/mlx.core.distributed.send", "python/_autosummary/mlx.core.divide", "python/_autosummary/mlx.core.divmod", "python/_autosummary/mlx.core.einsum", "python/_autosummary/mlx.core.einsum_path", "python/_autosummary/mlx.core.enable_compile", "python/_autosummary/mlx.core.equal", "python/_autosummary/mlx.core.erf", "python/_autosummary/mlx.core.erfinv", "python/_autosummary/mlx.core.eval", "python/_autosummary/mlx.core.exp", "python/_autosummary/mlx.core.expand_dims", "python/_autosummary/mlx.core.expm1", "python/_autosummary/mlx.core.eye", "python/_autosummary/mlx.core.fast.affine_quantize", "python/_autosummary/mlx.core.fast.layer_norm", "python/_autosummary/mlx.core.fast.metal_kernel", "python/_autosummary/mlx.core.fast.rms_norm", "python/_autosummary/mlx.core.fast.rope", "python/_autosummary/mlx.core.fast.scaled_dot_product_attention", "python/_autosummary/mlx.core.fft.fft", "python/_autosummary/mlx.core.fft.fft2", "python/_autosummary/mlx.core.fft.fftn", "python/_autosummary/mlx.core.fft.ifft", "python/_autosummary/mlx.core.fft.ifft2", "python/_autosummary/mlx.core.fft.ifftn", "python/_autosummary/mlx.core.fft.irfft", "python/_autosummary/mlx.core.fft.irfft2", "python/_autosummary/mlx.core.fft.irfftn", "python/_autosummary/mlx.core.fft.rfft", "python/_autosummary/mlx.core.fft.rfft2", "python/_autosummary/mlx.core.fft.rfftn", "python/_autosummary/mlx.core.flatten", "python/_autosummary/mlx.core.floor", "python/_autosummary/mlx.core.floor_divide", "python/_autosummary/mlx.core.full", "python/_autosummary/mlx.core.gather_mm", "python/_autosummary/mlx.core.gather_qmm", "python/_autosummary/mlx.core.grad", "python/_autosummary/mlx.core.greater", "python/_autosummary/mlx.core.greater_equal", "python/_autosummary/mlx.core.hadamard_transform", "python/_autosummary/mlx.core.identity", "python/_autosummary/mlx.core.inner", "python/_autosummary/mlx.core.isclose", "python/_autosummary/mlx.core.isfinite", "python/_autosummary/mlx.core.isinf", "python/_autosummary/mlx.core.isnan", "python/_autosummary/mlx.core.isneginf", "python/_autosummary/mlx.core.isposinf", "python/_autosummary/mlx.core.issubdtype", "python/_autosummary/mlx.core.jvp", "python/_autosummary/mlx.core.left_shift", "python/_autosummary/mlx.core.less", "python/_autosummary/mlx.core.less_equal", "python/_autosummary/mlx.core.linalg.cholesky", "python/_autosummary/mlx.core.linalg.cholesky_inv", "python/_autosummary/mlx.core.linalg.inv", "python/_autosummary/mlx.core.linalg.norm", "python/_autosummary/mlx.core.linalg.qr", "python/_autosummary/mlx.core.linalg.svd", "python/_autosummary/mlx.core.linalg.tri_inv", "python/_autosummary/mlx.core.linspace", "python/_autosummary/mlx.core.load", "python/_autosummary/mlx.core.log", "python/_autosummary/mlx.core.log10", "python/_autosummary/mlx.core.log1p", "python/_autosummary/mlx.core.log2", "python/_autosummary/mlx.core.logaddexp", "python/_autosummary/mlx.core.logical_and", "python/_autosummary/mlx.core.logical_not", "python/_autosummary/mlx.core.logical_or", "python/_autosummary/mlx.core.logsumexp", "python/_autosummary/mlx.core.matmul", "python/_autosummary/mlx.core.max", "python/_autosummary/mlx.core.maximum", "python/_autosummary/mlx.core.mean", "python/_autosummary/mlx.core.meshgrid", "python/_autosummary/mlx.core.metal.clear_cache", "python/_autosummary/mlx.core.metal.device_info", "python/_autosummary/mlx.core.metal.get_active_memory", "python/_autosummary/mlx.core.metal.get_cache_memory", "python/_autosummary/mlx.core.metal.get_peak_memory", "python/_autosummary/mlx.core.metal.is_available", "python/_autosummary/mlx.core.metal.reset_peak_memory", "python/_autosummary/mlx.core.metal.set_cache_limit", "python/_autosummary/mlx.core.metal.set_memory_limit", "python/_autosummary/mlx.core.metal.start_capture", "python/_autosummary/mlx.core.metal.stop_capture", "python/_autosummary/mlx.core.min", "python/_autosummary/mlx.core.minimum", "python/_autosummary/mlx.core.moveaxis", "python/_autosummary/mlx.core.multiply", "python/_autosummary/mlx.core.nan_to_num", "python/_autosummary/mlx.core.negative", "python/_autosummary/mlx.core.new_stream", "python/_autosummary/mlx.core.not_equal", "python/_autosummary/mlx.core.ones", "python/_autosummary/mlx.core.ones_like", "python/_autosummary/mlx.core.outer", "python/_autosummary/mlx.core.pad", "python/_autosummary/mlx.core.partition", "python/_autosummary/mlx.core.power", "python/_autosummary/mlx.core.prod", "python/_autosummary/mlx.core.quantize", "python/_autosummary/mlx.core.quantized_matmul", "python/_autosummary/mlx.core.radians", "python/_autosummary/mlx.core.random.bernoulli", "python/_autosummary/mlx.core.random.categorical", "python/_autosummary/mlx.core.random.gumbel", "python/_autosummary/mlx.core.random.key", "python/_autosummary/mlx.core.random.laplace", "python/_autosummary/mlx.core.random.multivariate_normal", "python/_autosummary/mlx.core.random.normal", "python/_autosummary/mlx.core.random.randint", "python/_autosummary/mlx.core.random.seed", "python/_autosummary/mlx.core.random.split", "python/_autosummary/mlx.core.random.truncated_normal", "python/_autosummary/mlx.core.random.uniform", "python/_autosummary/mlx.core.reciprocal", "python/_autosummary/mlx.core.remainder", "python/_autosummary/mlx.core.repeat", "python/_autosummary/mlx.core.reshape", "python/_autosummary/mlx.core.right_shift", "python/_autosummary/mlx.core.round", "python/_autosummary/mlx.core.rsqrt", "python/_autosummary/mlx.core.save", "python/_autosummary/mlx.core.save_gguf", "python/_autosummary/mlx.core.save_safetensors", "python/_autosummary/mlx.core.savez", "python/_autosummary/mlx.core.savez_compressed", "python/_autosummary/mlx.core.set_default_device", "python/_autosummary/mlx.core.set_default_stream", "python/_autosummary/mlx.core.sigmoid", "python/_autosummary/mlx.core.sign", "python/_autosummary/mlx.core.sin", "python/_autosummary/mlx.core.sinh", "python/_autosummary/mlx.core.softmax", "python/_autosummary/mlx.core.sort", "python/_autosummary/mlx.core.split", "python/_autosummary/mlx.core.sqrt", "python/_autosummary/mlx.core.square", "python/_autosummary/mlx.core.squeeze", "python/_autosummary/mlx.core.stack", "python/_autosummary/mlx.core.std", "python/_autosummary/mlx.core.stop_gradient", "python/_autosummary/mlx.core.stream", "python/_autosummary/mlx.core.subtract", "python/_autosummary/mlx.core.sum", "python/_autosummary/mlx.core.swapaxes", "python/_autosummary/mlx.core.synchronize", "python/_autosummary/mlx.core.take", "python/_autosummary/mlx.core.take_along_axis", "python/_autosummary/mlx.core.tan", "python/_autosummary/mlx.core.tanh", "python/_autosummary/mlx.core.tensordot", "python/_autosummary/mlx.core.tile", "python/_autosummary/mlx.core.topk", "python/_autosummary/mlx.core.trace", "python/_autosummary/mlx.core.transpose", "python/_autosummary/mlx.core.tri", "python/_autosummary/mlx.core.tril", "python/_autosummary/mlx.core.triu", "python/_autosummary/mlx.core.value_and_grad", "python/_autosummary/mlx.core.var", "python/_autosummary/mlx.core.view", "python/_autosummary/mlx.core.vjp", "python/_autosummary/mlx.core.vmap", "python/_autosummary/mlx.core.where", "python/_autosummary/mlx.core.zeros", "python/_autosummary/mlx.core.zeros_like", "python/_autosummary/mlx.nn.quantize", "python/_autosummary/mlx.nn.value_and_grad", "python/_autosummary/mlx.optimizers.clip_grad_norm", "python/_autosummary/mlx.utils.tree_flatten", "python/_autosummary/mlx.utils.tree_map", "python/_autosummary/mlx.utils.tree_map_with_path", "python/_autosummary/mlx.utils.tree_reduce", "python/_autosummary/mlx.utils.tree_unflatten", "python/_autosummary/stream_class", "python/array", "python/data_types", "python/devices_and_streams", "python/distributed", "python/fast", "python/fft", "python/linalg", "python/metal", "python/nn", "python/nn/_autosummary/mlx.nn.ALiBi", "python/nn/_autosummary/mlx.nn.AvgPool1d", "python/nn/_autosummary/mlx.nn.AvgPool2d", "python/nn/_autosummary/mlx.nn.BatchNorm", "python/nn/_autosummary/mlx.nn.Conv1d", "python/nn/_autosummary/mlx.nn.Conv2d", "python/nn/_autosummary/mlx.nn.Conv3d", "python/nn/_autosummary/mlx.nn.ConvTranspose1d", "python/nn/_autosummary/mlx.nn.ConvTranspose2d", "python/nn/_autosummary/mlx.nn.ConvTranspose3d", "python/nn/_autosummary/mlx.nn.Dropout", "python/nn/_autosummary/mlx.nn.Dropout2d", "python/nn/_autosummary/mlx.nn.Dropout3d", "python/nn/_autosummary/mlx.nn.Embedding", "python/nn/_autosummary/mlx.nn.GELU", "python/nn/_autosummary/mlx.nn.GLU", "python/nn/_autosummary/mlx.nn.GRU", "python/nn/_autosummary/mlx.nn.GroupNorm", "python/nn/_autosummary/mlx.nn.HardShrink", "python/nn/_autosummary/mlx.nn.HardTanh", "python/nn/_autosummary/mlx.nn.Hardswish", "python/nn/_autosummary/mlx.nn.InstanceNorm", "python/nn/_autosummary/mlx.nn.LSTM", "python/nn/_autosummary/mlx.nn.LayerNorm", "python/nn/_autosummary/mlx.nn.LeakyReLU", "python/nn/_autosummary/mlx.nn.Linear", "python/nn/_autosummary/mlx.nn.MaxPool1d", "python/nn/_autosummary/mlx.nn.MaxPool2d", "python/nn/_autosummary/mlx.nn.Mish", "python/nn/_autosummary/mlx.nn.Module.apply", "python/nn/_autosummary/mlx.nn.Module.apply_to_modules", "python/nn/_autosummary/mlx.nn.Module.children", "python/nn/_autosummary/mlx.nn.Module.eval", "python/nn/_autosummary/mlx.nn.Module.filter_and_map", "python/nn/_autosummary/mlx.nn.Module.freeze", "python/nn/_autosummary/mlx.nn.Module.leaf_modules", "python/nn/_autosummary/mlx.nn.Module.load_weights", "python/nn/_autosummary/mlx.nn.Module.modules", "python/nn/_autosummary/mlx.nn.Module.named_modules", "python/nn/_autosummary/mlx.nn.Module.parameters", "python/nn/_autosummary/mlx.nn.Module.save_weights", "python/nn/_autosummary/mlx.nn.Module.set_dtype", "python/nn/_autosummary/mlx.nn.Module.state", "python/nn/_autosummary/mlx.nn.Module.train", "python/nn/_autosummary/mlx.nn.Module.trainable_parameters", "python/nn/_autosummary/mlx.nn.Module.training", "python/nn/_autosummary/mlx.nn.Module.unfreeze", "python/nn/_autosummary/mlx.nn.Module.update", "python/nn/_autosummary/mlx.nn.Module.update_modules", "python/nn/_autosummary/mlx.nn.MultiHeadAttention", "python/nn/_autosummary/mlx.nn.PReLU", "python/nn/_autosummary/mlx.nn.QuantizedEmbedding", "python/nn/_autosummary/mlx.nn.QuantizedLinear", "python/nn/_autosummary/mlx.nn.RMSNorm", "python/nn/_autosummary/mlx.nn.RNN", "python/nn/_autosummary/mlx.nn.ReLU", "python/nn/_autosummary/mlx.nn.ReLU6", "python/nn/_autosummary/mlx.nn.RoPE", "python/nn/_autosummary/mlx.nn.SELU", "python/nn/_autosummary/mlx.nn.Sequential", "python/nn/_autosummary/mlx.nn.SiLU", "python/nn/_autosummary/mlx.nn.SinusoidalPositionalEncoding", "python/nn/_autosummary/mlx.nn.Softmax", "python/nn/_autosummary/mlx.nn.Softmin", "python/nn/_autosummary/mlx.nn.Softplus", "python/nn/_autosummary/mlx.nn.Softshrink", "python/nn/_autosummary/mlx.nn.Softsign", "python/nn/_autosummary/mlx.nn.Step", "python/nn/_autosummary/mlx.nn.Tanh", "python/nn/_autosummary/mlx.nn.Transformer", "python/nn/_autosummary/mlx.nn.Upsample", "python/nn/_autosummary/mlx.nn.init.constant", "python/nn/_autosummary/mlx.nn.init.glorot_normal", "python/nn/_autosummary/mlx.nn.init.glorot_uniform", "python/nn/_autosummary/mlx.nn.init.he_normal", "python/nn/_autosummary/mlx.nn.init.he_uniform", "python/nn/_autosummary/mlx.nn.init.identity", "python/nn/_autosummary/mlx.nn.init.normal", "python/nn/_autosummary/mlx.nn.init.uniform", "python/nn/_autosummary_functions/mlx.nn.elu", "python/nn/_autosummary_functions/mlx.nn.gelu", "python/nn/_autosummary_functions/mlx.nn.gelu_approx", "python/nn/_autosummary_functions/mlx.nn.gelu_fast_approx", "python/nn/_autosummary_functions/mlx.nn.glu", "python/nn/_autosummary_functions/mlx.nn.hard_shrink", "python/nn/_autosummary_functions/mlx.nn.hard_tanh", "python/nn/_autosummary_functions/mlx.nn.hardswish", "python/nn/_autosummary_functions/mlx.nn.leaky_relu", "python/nn/_autosummary_functions/mlx.nn.log_sigmoid", "python/nn/_autosummary_functions/mlx.nn.log_softmax", "python/nn/_autosummary_functions/mlx.nn.losses.binary_cross_entropy", "python/nn/_autosummary_functions/mlx.nn.losses.cosine_similarity_loss", "python/nn/_autosummary_functions/mlx.nn.losses.cross_entropy", "python/nn/_autosummary_functions/mlx.nn.losses.gaussian_nll_loss", "python/nn/_autosummary_functions/mlx.nn.losses.hinge_loss", "python/nn/_autosummary_functions/mlx.nn.losses.huber_loss", "python/nn/_autosummary_functions/mlx.nn.losses.kl_div_loss", "python/nn/_autosummary_functions/mlx.nn.losses.l1_loss", "python/nn/_autosummary_functions/mlx.nn.losses.log_cosh_loss", "python/nn/_autosummary_functions/mlx.nn.losses.margin_ranking_loss", "python/nn/_autosummary_functions/mlx.nn.losses.mse_loss", "python/nn/_autosummary_functions/mlx.nn.losses.nll_loss", "python/nn/_autosummary_functions/mlx.nn.losses.smooth_l1_loss", "python/nn/_autosummary_functions/mlx.nn.losses.triplet_loss", "python/nn/_autosummary_functions/mlx.nn.mish", "python/nn/_autosummary_functions/mlx.nn.prelu", "python/nn/_autosummary_functions/mlx.nn.relu", "python/nn/_autosummary_functions/mlx.nn.relu6", "python/nn/_autosummary_functions/mlx.nn.selu", "python/nn/_autosummary_functions/mlx.nn.sigmoid", "python/nn/_autosummary_functions/mlx.nn.silu", "python/nn/_autosummary_functions/mlx.nn.softmax", "python/nn/_autosummary_functions/mlx.nn.softmin", "python/nn/_autosummary_functions/mlx.nn.softplus", "python/nn/_autosummary_functions/mlx.nn.softshrink", "python/nn/_autosummary_functions/mlx.nn.step", "python/nn/_autosummary_functions/mlx.nn.tanh", "python/nn/functions", "python/nn/init", "python/nn/layers", "python/nn/losses", "python/nn/module", "python/ops", "python/optimizers", "python/optimizers/_autosummary/mlx.optimizers.AdaDelta", "python/optimizers/_autosummary/mlx.optimizers.Adafactor", "python/optimizers/_autosummary/mlx.optimizers.Adagrad", "python/optimizers/_autosummary/mlx.optimizers.Adam", "python/optimizers/_autosummary/mlx.optimizers.AdamW", "python/optimizers/_autosummary/mlx.optimizers.Adamax", "python/optimizers/_autosummary/mlx.optimizers.Lion", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.apply_gradients", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.init", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.state", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.update", "python/optimizers/_autosummary/mlx.optimizers.RMSprop", "python/optimizers/_autosummary/mlx.optimizers.SGD", "python/optimizers/_autosummary/mlx.optimizers.cosine_decay", "python/optimizers/_autosummary/mlx.optimizers.exponential_decay", "python/optimizers/_autosummary/mlx.optimizers.join_schedules", "python/optimizers/_autosummary/mlx.optimizers.linear_schedule", "python/optimizers/_autosummary/mlx.optimizers.step_decay", "python/optimizers/common_optimizers", "python/optimizers/optimizer", "python/optimizers/schedulers", "python/random", "python/transforms", "python/tree_utils", "usage/compile", "usage/distributed", "usage/function_transforms", "usage/indexing", "usage/lazy_evaluation", "usage/numpy", "usage/quick_start", "usage/saving_and_loading", "usage/unified_memory", "usage/using_streams"], "envversion": {"sphinx": 63, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["cpp/ops.rst", "dev/custom_metal_kernels.rst", "dev/extensions.rst", "dev/metal_debugger.rst", "examples/linear_regression.rst", "examples/llama-inference.rst", "examples/mlp.rst", "index.rst", "install.rst", "python/_autosummary/mlx.core.Device.rst", "python/_autosummary/mlx.core.Dtype.rst", "python/_autosummary/mlx.core.DtypeCategory.rst", "python/_autosummary/mlx.core.abs.rst", "python/_autosummary/mlx.core.add.rst", "python/_autosummary/mlx.core.addmm.rst", "python/_autosummary/mlx.core.all.rst", "python/_autosummary/mlx.core.allclose.rst", "python/_autosummary/mlx.core.any.rst", "python/_autosummary/mlx.core.arange.rst", "python/_autosummary/mlx.core.arccos.rst", "python/_autosummary/mlx.core.arccosh.rst", "python/_autosummary/mlx.core.arcsin.rst", "python/_autosummary/mlx.core.arcsinh.rst", "python/_autosummary/mlx.core.arctan.rst", "python/_autosummary/mlx.core.arctan2.rst", "python/_autosummary/mlx.core.arctanh.rst", "python/_autosummary/mlx.core.argmax.rst", "python/_autosummary/mlx.core.argmin.rst", "python/_autosummary/mlx.core.argpartition.rst", "python/_autosummary/mlx.core.argsort.rst", "python/_autosummary/mlx.core.array.rst", "python/_autosummary/mlx.core.array.T.rst", "python/_autosummary/mlx.core.array.abs.rst", "python/_autosummary/mlx.core.array.all.rst", "python/_autosummary/mlx.core.array.any.rst", "python/_autosummary/mlx.core.array.argmax.rst", "python/_autosummary/mlx.core.array.argmin.rst", "python/_autosummary/mlx.core.array.astype.rst", "python/_autosummary/mlx.core.array.at.rst", "python/_autosummary/mlx.core.array.conj.rst", "python/_autosummary/mlx.core.array.cos.rst", "python/_autosummary/mlx.core.array.cummax.rst", "python/_autosummary/mlx.core.array.cummin.rst", "python/_autosummary/mlx.core.array.cumprod.rst", "python/_autosummary/mlx.core.array.cumsum.rst", "python/_autosummary/mlx.core.array.diag.rst", "python/_autosummary/mlx.core.array.diagonal.rst", "python/_autosummary/mlx.core.array.dtype.rst", "python/_autosummary/mlx.core.array.exp.rst", "python/_autosummary/mlx.core.array.flatten.rst", "python/_autosummary/mlx.core.array.item.rst", "python/_autosummary/mlx.core.array.itemsize.rst", "python/_autosummary/mlx.core.array.log.rst", "python/_autosummary/mlx.core.array.log10.rst", "python/_autosummary/mlx.core.array.log1p.rst", "python/_autosummary/mlx.core.array.log2.rst", "python/_autosummary/mlx.core.array.logsumexp.rst", "python/_autosummary/mlx.core.array.max.rst", "python/_autosummary/mlx.core.array.mean.rst", "python/_autosummary/mlx.core.array.min.rst", "python/_autosummary/mlx.core.array.moveaxis.rst", "python/_autosummary/mlx.core.array.nbytes.rst", "python/_autosummary/mlx.core.array.ndim.rst", "python/_autosummary/mlx.core.array.prod.rst", "python/_autosummary/mlx.core.array.reciprocal.rst", "python/_autosummary/mlx.core.array.reshape.rst", "python/_autosummary/mlx.core.array.round.rst", "python/_autosummary/mlx.core.array.rsqrt.rst", "python/_autosummary/mlx.core.array.shape.rst", "python/_autosummary/mlx.core.array.sin.rst", "python/_autosummary/mlx.core.array.size.rst", "python/_autosummary/mlx.core.array.split.rst", "python/_autosummary/mlx.core.array.sqrt.rst", "python/_autosummary/mlx.core.array.square.rst", "python/_autosummary/mlx.core.array.squeeze.rst", "python/_autosummary/mlx.core.array.std.rst", "python/_autosummary/mlx.core.array.sum.rst", "python/_autosummary/mlx.core.array.swapaxes.rst", "python/_autosummary/mlx.core.array.tolist.rst", "python/_autosummary/mlx.core.array.transpose.rst", "python/_autosummary/mlx.core.array.var.rst", "python/_autosummary/mlx.core.array.view.rst", "python/_autosummary/mlx.core.array_equal.rst", "python/_autosummary/mlx.core.as_strided.rst", "python/_autosummary/mlx.core.atleast_1d.rst", "python/_autosummary/mlx.core.atleast_2d.rst", "python/_autosummary/mlx.core.atleast_3d.rst", "python/_autosummary/mlx.core.bitwise_and.rst", "python/_autosummary/mlx.core.bitwise_or.rst", "python/_autosummary/mlx.core.bitwise_xor.rst", "python/_autosummary/mlx.core.block_masked_mm.rst", "python/_autosummary/mlx.core.broadcast_to.rst", "python/_autosummary/mlx.core.ceil.rst", "python/_autosummary/mlx.core.clip.rst", "python/_autosummary/mlx.core.compile.rst", "python/_autosummary/mlx.core.concatenate.rst", "python/_autosummary/mlx.core.conj.rst", "python/_autosummary/mlx.core.conjugate.rst", "python/_autosummary/mlx.core.conv1d.rst", "python/_autosummary/mlx.core.conv2d.rst", "python/_autosummary/mlx.core.conv3d.rst", "python/_autosummary/mlx.core.conv_general.rst", "python/_autosummary/mlx.core.conv_transpose1d.rst", "python/_autosummary/mlx.core.conv_transpose2d.rst", "python/_autosummary/mlx.core.conv_transpose3d.rst", "python/_autosummary/mlx.core.convolve.rst", "python/_autosummary/mlx.core.cos.rst", "python/_autosummary/mlx.core.cosh.rst", "python/_autosummary/mlx.core.cummax.rst", "python/_autosummary/mlx.core.cummin.rst", "python/_autosummary/mlx.core.cumprod.rst", "python/_autosummary/mlx.core.cumsum.rst", "python/_autosummary/mlx.core.custom_function.rst", "python/_autosummary/mlx.core.default_device.rst", "python/_autosummary/mlx.core.default_stream.rst", "python/_autosummary/mlx.core.degrees.rst", "python/_autosummary/mlx.core.dequantize.rst", "python/_autosummary/mlx.core.diag.rst", "python/_autosummary/mlx.core.diagonal.rst", "python/_autosummary/mlx.core.disable_compile.rst", "python/_autosummary/mlx.core.distributed.Group.rst", "python/_autosummary/mlx.core.distributed.all_gather.rst", "python/_autosummary/mlx.core.distributed.all_sum.rst", "python/_autosummary/mlx.core.distributed.init.rst", "python/_autosummary/mlx.core.distributed.is_available.rst", "python/_autosummary/mlx.core.distributed.recv.rst", "python/_autosummary/mlx.core.distributed.recv_like.rst", "python/_autosummary/mlx.core.distributed.send.rst", "python/_autosummary/mlx.core.divide.rst", "python/_autosummary/mlx.core.divmod.rst", "python/_autosummary/mlx.core.einsum.rst", "python/_autosummary/mlx.core.einsum_path.rst", "python/_autosummary/mlx.core.enable_compile.rst", "python/_autosummary/mlx.core.equal.rst", "python/_autosummary/mlx.core.erf.rst", "python/_autosummary/mlx.core.erfinv.rst", "python/_autosummary/mlx.core.eval.rst", "python/_autosummary/mlx.core.exp.rst", "python/_autosummary/mlx.core.expand_dims.rst", "python/_autosummary/mlx.core.expm1.rst", "python/_autosummary/mlx.core.eye.rst", "python/_autosummary/mlx.core.fast.affine_quantize.rst", "python/_autosummary/mlx.core.fast.layer_norm.rst", "python/_autosummary/mlx.core.fast.metal_kernel.rst", "python/_autosummary/mlx.core.fast.rms_norm.rst", "python/_autosummary/mlx.core.fast.rope.rst", "python/_autosummary/mlx.core.fast.scaled_dot_product_attention.rst", "python/_autosummary/mlx.core.fft.fft.rst", "python/_autosummary/mlx.core.fft.fft2.rst", "python/_autosummary/mlx.core.fft.fftn.rst", "python/_autosummary/mlx.core.fft.ifft.rst", "python/_autosummary/mlx.core.fft.ifft2.rst", "python/_autosummary/mlx.core.fft.ifftn.rst", "python/_autosummary/mlx.core.fft.irfft.rst", "python/_autosummary/mlx.core.fft.irfft2.rst", "python/_autosummary/mlx.core.fft.irfftn.rst", "python/_autosummary/mlx.core.fft.rfft.rst", "python/_autosummary/mlx.core.fft.rfft2.rst", "python/_autosummary/mlx.core.fft.rfftn.rst", "python/_autosummary/mlx.core.flatten.rst", "python/_autosummary/mlx.core.floor.rst", "python/_autosummary/mlx.core.floor_divide.rst", "python/_autosummary/mlx.core.full.rst", "python/_autosummary/mlx.core.gather_mm.rst", "python/_autosummary/mlx.core.gather_qmm.rst", "python/_autosummary/mlx.core.grad.rst", "python/_autosummary/mlx.core.greater.rst", "python/_autosummary/mlx.core.greater_equal.rst", "python/_autosummary/mlx.core.hadamard_transform.rst", "python/_autosummary/mlx.core.identity.rst", "python/_autosummary/mlx.core.inner.rst", "python/_autosummary/mlx.core.isclose.rst", "python/_autosummary/mlx.core.isfinite.rst", "python/_autosummary/mlx.core.isinf.rst", "python/_autosummary/mlx.core.isnan.rst", "python/_autosummary/mlx.core.isneginf.rst", "python/_autosummary/mlx.core.isposinf.rst", "python/_autosummary/mlx.core.issubdtype.rst", "python/_autosummary/mlx.core.jvp.rst", "python/_autosummary/mlx.core.left_shift.rst", "python/_autosummary/mlx.core.less.rst", "python/_autosummary/mlx.core.less_equal.rst", "python/_autosummary/mlx.core.linalg.cholesky.rst", "python/_autosummary/mlx.core.linalg.cholesky_inv.rst", "python/_autosummary/mlx.core.linalg.inv.rst", "python/_autosummary/mlx.core.linalg.norm.rst", "python/_autosummary/mlx.core.linalg.qr.rst", "python/_autosummary/mlx.core.linalg.svd.rst", "python/_autosummary/mlx.core.linalg.tri_inv.rst", "python/_autosummary/mlx.core.linspace.rst", "python/_autosummary/mlx.core.load.rst", "python/_autosummary/mlx.core.log.rst", "python/_autosummary/mlx.core.log10.rst", "python/_autosummary/mlx.core.log1p.rst", "python/_autosummary/mlx.core.log2.rst", "python/_autosummary/mlx.core.logaddexp.rst", "python/_autosummary/mlx.core.logical_and.rst", "python/_autosummary/mlx.core.logical_not.rst", "python/_autosummary/mlx.core.logical_or.rst", "python/_autosummary/mlx.core.logsumexp.rst", "python/_autosummary/mlx.core.matmul.rst", "python/_autosummary/mlx.core.max.rst", "python/_autosummary/mlx.core.maximum.rst", "python/_autosummary/mlx.core.mean.rst", "python/_autosummary/mlx.core.meshgrid.rst", "python/_autosummary/mlx.core.metal.clear_cache.rst", "python/_autosummary/mlx.core.metal.device_info.rst", "python/_autosummary/mlx.core.metal.get_active_memory.rst", "python/_autosummary/mlx.core.metal.get_cache_memory.rst", "python/_autosummary/mlx.core.metal.get_peak_memory.rst", "python/_autosummary/mlx.core.metal.is_available.rst", "python/_autosummary/mlx.core.metal.reset_peak_memory.rst", "python/_autosummary/mlx.core.metal.set_cache_limit.rst", "python/_autosummary/mlx.core.metal.set_memory_limit.rst", "python/_autosummary/mlx.core.metal.start_capture.rst", "python/_autosummary/mlx.core.metal.stop_capture.rst", "python/_autosummary/mlx.core.min.rst", "python/_autosummary/mlx.core.minimum.rst", "python/_autosummary/mlx.core.moveaxis.rst", "python/_autosummary/mlx.core.multiply.rst", "python/_autosummary/mlx.core.nan_to_num.rst", "python/_autosummary/mlx.core.negative.rst", "python/_autosummary/mlx.core.new_stream.rst", "python/_autosummary/mlx.core.not_equal.rst", "python/_autosummary/mlx.core.ones.rst", "python/_autosummary/mlx.core.ones_like.rst", "python/_autosummary/mlx.core.outer.rst", "python/_autosummary/mlx.core.pad.rst", "python/_autosummary/mlx.core.partition.rst", "python/_autosummary/mlx.core.power.rst", "python/_autosummary/mlx.core.prod.rst", "python/_autosummary/mlx.core.quantize.rst", "python/_autosummary/mlx.core.quantized_matmul.rst", "python/_autosummary/mlx.core.radians.rst", "python/_autosummary/mlx.core.random.bernoulli.rst", "python/_autosummary/mlx.core.random.categorical.rst", "python/_autosummary/mlx.core.random.gumbel.rst", "python/_autosummary/mlx.core.random.key.rst", "python/_autosummary/mlx.core.random.laplace.rst", "python/_autosummary/mlx.core.random.multivariate_normal.rst", "python/_autosummary/mlx.core.random.normal.rst", "python/_autosummary/mlx.core.random.randint.rst", "python/_autosummary/mlx.core.random.seed.rst", "python/_autosummary/mlx.core.random.split.rst", "python/_autosummary/mlx.core.random.truncated_normal.rst", "python/_autosummary/mlx.core.random.uniform.rst", "python/_autosummary/mlx.core.reciprocal.rst", "python/_autosummary/mlx.core.remainder.rst", "python/_autosummary/mlx.core.repeat.rst", "python/_autosummary/mlx.core.reshape.rst", "python/_autosummary/mlx.core.right_shift.rst", "python/_autosummary/mlx.core.round.rst", "python/_autosummary/mlx.core.rsqrt.rst", "python/_autosummary/mlx.core.save.rst", "python/_autosummary/mlx.core.save_gguf.rst", "python/_autosummary/mlx.core.save_safetensors.rst", "python/_autosummary/mlx.core.savez.rst", "python/_autosummary/mlx.core.savez_compressed.rst", "python/_autosummary/mlx.core.set_default_device.rst", "python/_autosummary/mlx.core.set_default_stream.rst", "python/_autosummary/mlx.core.sigmoid.rst", "python/_autosummary/mlx.core.sign.rst", "python/_autosummary/mlx.core.sin.rst", "python/_autosummary/mlx.core.sinh.rst", "python/_autosummary/mlx.core.softmax.rst", "python/_autosummary/mlx.core.sort.rst", "python/_autosummary/mlx.core.split.rst", "python/_autosummary/mlx.core.sqrt.rst", "python/_autosummary/mlx.core.square.rst", "python/_autosummary/mlx.core.squeeze.rst", "python/_autosummary/mlx.core.stack.rst", "python/_autosummary/mlx.core.std.rst", "python/_autosummary/mlx.core.stop_gradient.rst", "python/_autosummary/mlx.core.stream.rst", "python/_autosummary/mlx.core.subtract.rst", "python/_autosummary/mlx.core.sum.rst", "python/_autosummary/mlx.core.swapaxes.rst", "python/_autosummary/mlx.core.synchronize.rst", "python/_autosummary/mlx.core.take.rst", "python/_autosummary/mlx.core.take_along_axis.rst", "python/_autosummary/mlx.core.tan.rst", "python/_autosummary/mlx.core.tanh.rst", "python/_autosummary/mlx.core.tensordot.rst", "python/_autosummary/mlx.core.tile.rst", "python/_autosummary/mlx.core.topk.rst", "python/_autosummary/mlx.core.trace.rst", "python/_autosummary/mlx.core.transpose.rst", "python/_autosummary/mlx.core.tri.rst", "python/_autosummary/mlx.core.tril.rst", "python/_autosummary/mlx.core.triu.rst", "python/_autosummary/mlx.core.value_and_grad.rst", "python/_autosummary/mlx.core.var.rst", "python/_autosummary/mlx.core.view.rst", "python/_autosummary/mlx.core.vjp.rst", "python/_autosummary/mlx.core.vmap.rst", "python/_autosummary/mlx.core.where.rst", "python/_autosummary/mlx.core.zeros.rst", "python/_autosummary/mlx.core.zeros_like.rst", "python/_autosummary/mlx.nn.quantize.rst", "python/_autosummary/mlx.nn.value_and_grad.rst", "python/_autosummary/mlx.optimizers.clip_grad_norm.rst", "python/_autosummary/mlx.utils.tree_flatten.rst", "python/_autosummary/mlx.utils.tree_map.rst", "python/_autosummary/mlx.utils.tree_map_with_path.rst", "python/_autosummary/mlx.utils.tree_reduce.rst", "python/_autosummary/mlx.utils.tree_unflatten.rst", "python/_autosummary/stream_class.rst", "python/array.rst", "python/data_types.rst", "python/devices_and_streams.rst", "python/distributed.rst", "python/fast.rst", "python/fft.rst", "python/linalg.rst", "python/metal.rst", "python/nn.rst", "python/nn/_autosummary/mlx.nn.ALiBi.rst", "python/nn/_autosummary/mlx.nn.AvgPool1d.rst", "python/nn/_autosummary/mlx.nn.AvgPool2d.rst", "python/nn/_autosummary/mlx.nn.BatchNorm.rst", "python/nn/_autosummary/mlx.nn.Conv1d.rst", "python/nn/_autosummary/mlx.nn.Conv2d.rst", "python/nn/_autosummary/mlx.nn.Conv3d.rst", "python/nn/_autosummary/mlx.nn.ConvTranspose1d.rst", "python/nn/_autosummary/mlx.nn.ConvTranspose2d.rst", "python/nn/_autosummary/mlx.nn.ConvTranspose3d.rst", "python/nn/_autosummary/mlx.nn.Dropout.rst", "python/nn/_autosummary/mlx.nn.Dropout2d.rst", "python/nn/_autosummary/mlx.nn.Dropout3d.rst", "python/nn/_autosummary/mlx.nn.Embedding.rst", "python/nn/_autosummary/mlx.nn.GELU.rst", "python/nn/_autosummary/mlx.nn.GLU.rst", "python/nn/_autosummary/mlx.nn.GRU.rst", "python/nn/_autosummary/mlx.nn.GroupNorm.rst", "python/nn/_autosummary/mlx.nn.HardShrink.rst", "python/nn/_autosummary/mlx.nn.HardTanh.rst", "python/nn/_autosummary/mlx.nn.Hardswish.rst", "python/nn/_autosummary/mlx.nn.InstanceNorm.rst", "python/nn/_autosummary/mlx.nn.LSTM.rst", "python/nn/_autosummary/mlx.nn.LayerNorm.rst", "python/nn/_autosummary/mlx.nn.LeakyReLU.rst", "python/nn/_autosummary/mlx.nn.Linear.rst", "python/nn/_autosummary/mlx.nn.MaxPool1d.rst", "python/nn/_autosummary/mlx.nn.MaxPool2d.rst", "python/nn/_autosummary/mlx.nn.Mish.rst", "python/nn/_autosummary/mlx.nn.Module.apply.rst", "python/nn/_autosummary/mlx.nn.Module.apply_to_modules.rst", "python/nn/_autosummary/mlx.nn.Module.children.rst", "python/nn/_autosummary/mlx.nn.Module.eval.rst", "python/nn/_autosummary/mlx.nn.Module.filter_and_map.rst", "python/nn/_autosummary/mlx.nn.Module.freeze.rst", "python/nn/_autosummary/mlx.nn.Module.leaf_modules.rst", "python/nn/_autosummary/mlx.nn.Module.load_weights.rst", "python/nn/_autosummary/mlx.nn.Module.modules.rst", "python/nn/_autosummary/mlx.nn.Module.named_modules.rst", "python/nn/_autosummary/mlx.nn.Module.parameters.rst", "python/nn/_autosummary/mlx.nn.Module.save_weights.rst", "python/nn/_autosummary/mlx.nn.Module.set_dtype.rst", "python/nn/_autosummary/mlx.nn.Module.state.rst", "python/nn/_autosummary/mlx.nn.Module.train.rst", "python/nn/_autosummary/mlx.nn.Module.trainable_parameters.rst", "python/nn/_autosummary/mlx.nn.Module.training.rst", "python/nn/_autosummary/mlx.nn.Module.unfreeze.rst", "python/nn/_autosummary/mlx.nn.Module.update.rst", "python/nn/_autosummary/mlx.nn.Module.update_modules.rst", "python/nn/_autosummary/mlx.nn.MultiHeadAttention.rst", "python/nn/_autosummary/mlx.nn.PReLU.rst", "python/nn/_autosummary/mlx.nn.QuantizedEmbedding.rst", "python/nn/_autosummary/mlx.nn.QuantizedLinear.rst", "python/nn/_autosummary/mlx.nn.RMSNorm.rst", "python/nn/_autosummary/mlx.nn.RNN.rst", "python/nn/_autosummary/mlx.nn.ReLU.rst", "python/nn/_autosummary/mlx.nn.ReLU6.rst", "python/nn/_autosummary/mlx.nn.RoPE.rst", "python/nn/_autosummary/mlx.nn.SELU.rst", "python/nn/_autosummary/mlx.nn.Sequential.rst", "python/nn/_autosummary/mlx.nn.SiLU.rst", "python/nn/_autosummary/mlx.nn.SinusoidalPositionalEncoding.rst", "python/nn/_autosummary/mlx.nn.Softmax.rst", "python/nn/_autosummary/mlx.nn.Softmin.rst", "python/nn/_autosummary/mlx.nn.Softplus.rst", "python/nn/_autosummary/mlx.nn.Softshrink.rst", "python/nn/_autosummary/mlx.nn.Softsign.rst", "python/nn/_autosummary/mlx.nn.Step.rst", "python/nn/_autosummary/mlx.nn.Tanh.rst", "python/nn/_autosummary/mlx.nn.Transformer.rst", "python/nn/_autosummary/mlx.nn.Upsample.rst", "python/nn/_autosummary/mlx.nn.init.constant.rst", "python/nn/_autosummary/mlx.nn.init.glorot_normal.rst", "python/nn/_autosummary/mlx.nn.init.glorot_uniform.rst", "python/nn/_autosummary/mlx.nn.init.he_normal.rst", "python/nn/_autosummary/mlx.nn.init.he_uniform.rst", "python/nn/_autosummary/mlx.nn.init.identity.rst", "python/nn/_autosummary/mlx.nn.init.normal.rst", "python/nn/_autosummary/mlx.nn.init.uniform.rst", "python/nn/_autosummary_functions/mlx.nn.elu.rst", "python/nn/_autosummary_functions/mlx.nn.gelu.rst", "python/nn/_autosummary_functions/mlx.nn.gelu_approx.rst", "python/nn/_autosummary_functions/mlx.nn.gelu_fast_approx.rst", "python/nn/_autosummary_functions/mlx.nn.glu.rst", "python/nn/_autosummary_functions/mlx.nn.hard_shrink.rst", "python/nn/_autosummary_functions/mlx.nn.hard_tanh.rst", "python/nn/_autosummary_functions/mlx.nn.hardswish.rst", "python/nn/_autosummary_functions/mlx.nn.leaky_relu.rst", "python/nn/_autosummary_functions/mlx.nn.log_sigmoid.rst", "python/nn/_autosummary_functions/mlx.nn.log_softmax.rst", "python/nn/_autosummary_functions/mlx.nn.losses.binary_cross_entropy.rst", "python/nn/_autosummary_functions/mlx.nn.losses.cosine_similarity_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.cross_entropy.rst", "python/nn/_autosummary_functions/mlx.nn.losses.gaussian_nll_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.hinge_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.huber_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.kl_div_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.l1_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.log_cosh_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.margin_ranking_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.mse_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.nll_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.smooth_l1_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.triplet_loss.rst", "python/nn/_autosummary_functions/mlx.nn.mish.rst", "python/nn/_autosummary_functions/mlx.nn.prelu.rst", "python/nn/_autosummary_functions/mlx.nn.relu.rst", "python/nn/_autosummary_functions/mlx.nn.relu6.rst", "python/nn/_autosummary_functions/mlx.nn.selu.rst", "python/nn/_autosummary_functions/mlx.nn.sigmoid.rst", "python/nn/_autosummary_functions/mlx.nn.silu.rst", "python/nn/_autosummary_functions/mlx.nn.softmax.rst", "python/nn/_autosummary_functions/mlx.nn.softmin.rst", "python/nn/_autosummary_functions/mlx.nn.softplus.rst", "python/nn/_autosummary_functions/mlx.nn.softshrink.rst", "python/nn/_autosummary_functions/mlx.nn.step.rst", "python/nn/_autosummary_functions/mlx.nn.tanh.rst", "python/nn/functions.rst", "python/nn/init.rst", "python/nn/layers.rst", "python/nn/losses.rst", "python/nn/module.rst", "python/ops.rst", "python/optimizers.rst", "python/optimizers/_autosummary/mlx.optimizers.AdaDelta.rst", "python/optimizers/_autosummary/mlx.optimizers.Adafactor.rst", "python/optimizers/_autosummary/mlx.optimizers.Adagrad.rst", "python/optimizers/_autosummary/mlx.optimizers.Adam.rst", "python/optimizers/_autosummary/mlx.optimizers.AdamW.rst", "python/optimizers/_autosummary/mlx.optimizers.Adamax.rst", "python/optimizers/_autosummary/mlx.optimizers.Lion.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.apply_gradients.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.init.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.state.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.update.rst", "python/optimizers/_autosummary/mlx.optimizers.RMSprop.rst", "python/optimizers/_autosummary/mlx.optimizers.SGD.rst", "python/optimizers/_autosummary/mlx.optimizers.cosine_decay.rst", "python/optimizers/_autosummary/mlx.optimizers.exponential_decay.rst", "python/optimizers/_autosummary/mlx.optimizers.join_schedules.rst", "python/optimizers/_autosummary/mlx.optimizers.linear_schedule.rst", "python/optimizers/_autosummary/mlx.optimizers.step_decay.rst", "python/optimizers/common_optimizers.rst", "python/optimizers/optimizer.rst", "python/optimizers/schedulers.rst", "python/random.rst", "python/transforms.rst", "python/tree_utils.rst", "usage/compile.rst", "usage/distributed.rst", "usage/function_transforms.rst", "usage/indexing.rst", "usage/lazy_evaluation.rst", "usage/numpy.rst", "usage/quick_start.rst", "usage/saving_and_loading.rst", "usage/unified_memory.rst", "usage/using_streams.rst"], "indexentries": {"abs (c++ function)": [[0, "_CPPv43absRK5array14StreamOrDevice", false]], "add (c++ function)": [[0, "_CPPv43addRK5arrayRK5array14StreamOrDevice", false]], "addmm (c++ function)": [[0, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", false]], "all (c++ function)": [[0, "_CPPv43allRK5array14StreamOrDevice", false], [0, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv43allRK5arrayb14StreamOrDevice", false], [0, "_CPPv43allRK5arrayib14StreamOrDevice", false]], "allclose (c++ function)": [[0, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", false]], "any (c++ function)": [[0, "_CPPv43anyRK5array14StreamOrDevice", false], [0, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv43anyRK5arrayb14StreamOrDevice", false], [0, "_CPPv43anyRK5arrayib14StreamOrDevice", false]], "arange (c++ function)": [[0, "_CPPv46aranged14StreamOrDevice", false], [0, "_CPPv46aranged5Dtype14StreamOrDevice", false], [0, "_CPPv46arangedd14StreamOrDevice", false], [0, "_CPPv46arangedd5Dtype14StreamOrDevice", false], [0, "_CPPv46arangeddd14StreamOrDevice", false], [0, "_CPPv46arangeddd5Dtype14StreamOrDevice", false], [0, "_CPPv46arangei14StreamOrDevice", false], [0, "_CPPv46arangeii14StreamOrDevice", false], [0, "_CPPv46arangeiii14StreamOrDevice", false]], "arccos (c++ function)": [[0, "_CPPv46arccosRK5array14StreamOrDevice", false]], "arccosh (c++ function)": [[0, "_CPPv47arccoshRK5array14StreamOrDevice", false]], "arcsin (c++ function)": [[0, "_CPPv46arcsinRK5array14StreamOrDevice", false]], "arcsinh (c++ function)": [[0, "_CPPv47arcsinhRK5array14StreamOrDevice", false]], "arctan (c++ function)": [[0, "_CPPv46arctanRK5array14StreamOrDevice", false]], "arctan2 (c++ function)": [[0, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", false]], "arctanh (c++ function)": [[0, "_CPPv47arctanhRK5array14StreamOrDevice", false]], "argmax (c++ function)": [[0, "_CPPv46argmaxRK5array14StreamOrDevice", false], [0, "_CPPv46argmaxRK5arrayb14StreamOrDevice", false], [0, "_CPPv46argmaxRK5arrayib14StreamOrDevice", false]], "argmin (c++ function)": [[0, "_CPPv46argminRK5array14StreamOrDevice", false], [0, "_CPPv46argminRK5arrayb14StreamOrDevice", false], [0, "_CPPv46argminRK5arrayib14StreamOrDevice", false]], "argpartition (c++ function)": [[0, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", false], [0, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", false]], "argsort (c++ function)": [[0, "_CPPv47argsortRK5array14StreamOrDevice", false], [0, "_CPPv47argsortRK5arrayi14StreamOrDevice", false]], "array_equal (c++ function)": [[0, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", false], [0, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", false]], "as_strided (c++ function)": [[0, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", false]], "astype (c++ function)": [[0, "_CPPv46astype5array5Dtype14StreamOrDevice", false]], "atleast_1d (c++ function)": [[0, "_CPPv410atleast_1dRK5array14StreamOrDevice", false], [0, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice", false]], "atleast_2d (c++ function)": [[0, "_CPPv410atleast_2dRK5array14StreamOrDevice", false], [0, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice", false]], "atleast_3d (c++ function)": [[0, "_CPPv410atleast_3dRK5array14StreamOrDevice", false], [0, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice", false]], "bitwise_and (c++ function)": [[0, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", false]], "bitwise_or (c++ function)": [[0, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", false]], "bitwise_xor (c++ function)": [[0, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", false]], "block_masked_mm (c++ function)": [[0, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", false]], "broadcast_arrays (c++ function)": [[0, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice", false]], "broadcast_to (c++ function)": [[0, "_CPPv412broadcast_toRK5arrayRKNSt6vectorIiEE14StreamOrDevice", false]], "ceil (c++ function)": [[0, "_CPPv44ceilRK5array14StreamOrDevice", false]], "clip (c++ function)": [[0, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", false]], "concatenate (c++ function)": [[0, "_CPPv411concatenateRKNSt6vectorI5arrayEE14StreamOrDevice", false], [0, "_CPPv411concatenateRKNSt6vectorI5arrayEEi14StreamOrDevice", false]], "conjugate (c++ function)": [[0, "_CPPv49conjugateRK5array14StreamOrDevice", false]], "conv1d (c++ function)": [[0, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", false]], "conv2d (c++ function)": [[0, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", false]], "conv3d (c++ function)": [[0, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", false]], "conv_general (c++ function)": [[0, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", false], [0, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", false]], "conv_transpose1d (c++ function)": [[0, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiii14StreamOrDevice", false]], "conv_transpose2d (c++ function)": [[0, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", false]], "conv_transpose3d (c++ function)": [[0, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", false]], "copy (c++ function)": [[0, "_CPPv44copy5array14StreamOrDevice", false]], "cos (c++ function)": [[0, "_CPPv43cosRK5array14StreamOrDevice", false]], "cosh (c++ function)": [[0, "_CPPv44coshRK5array14StreamOrDevice", false]], "cummax (c++ function)": [[0, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", false]], "cummin (c++ function)": [[0, "_CPPv46cumminRK5arrayibb14StreamOrDevice", false]], "cumprod (c++ function)": [[0, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", false]], "cumsum (c++ function)": [[0, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", false]], "degrees (c++ function)": [[0, "_CPPv47degreesRK5array14StreamOrDevice", false]], "depends (c++ function)": [[0, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE", false]], "dequantize (c++ function)": [[0, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", false]], "diag (c++ function)": [[0, "_CPPv44diagRK5arrayi14StreamOrDevice", false]], "diagonal (c++ function)": [[0, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", false]], "divide (c++ function)": [[0, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", false]], "divmod (c++ function)": [[0, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", false]], "equal (c++ function)": [[0, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", false]], "erf (c++ function)": [[0, "_CPPv43erfRK5array14StreamOrDevice", false]], "erfinv (c++ function)": [[0, "_CPPv46erfinvRK5array14StreamOrDevice", false]], "exp (c++ function)": [[0, "_CPPv43expRK5array14StreamOrDevice", false]], "expand_dims (c++ function)": [[0, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", false], [0, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", false]], "expm1 (c++ function)": [[0, "_CPPv45expm1RK5array14StreamOrDevice", false]], "eye (c++ function)": [[0, "_CPPv43eyei14StreamOrDevice", false], [0, "_CPPv43eyei5Dtype14StreamOrDevice", false], [0, "_CPPv43eyeii14StreamOrDevice", false], [0, "_CPPv43eyeiii14StreamOrDevice", false], [0, "_CPPv43eyeiii5Dtype14StreamOrDevice", false]], "flatten (c++ function)": [[0, "_CPPv47flattenRK5array14StreamOrDevice", false], [0, "_CPPv47flattenRK5arrayii14StreamOrDevice", false]], "floor (c++ function)": [[0, "_CPPv45floorRK5array14StreamOrDevice", false]], "floor_divide (c++ function)": [[0, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", false]], "full (c++ function)": [[0, "_CPPv44fullNSt6vectorIiEE5array14StreamOrDevice", false], [0, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice", false], [0, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice", false], [0, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", false]], "gather (c++ function)": [[0, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", false], [0, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", false]], "gather_mm (c++ function)": [[0, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", false]], "gather_qmm (c++ function)": [[0, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", false]], "greater (c++ function)": [[0, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", false]], "greater_equal (c++ function)": [[0, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", false]], "hadamard_transform (c++ function)": [[0, "_CPPv418hadamard_transformRK5arrayNSt8optionalIfEE14StreamOrDevice", false]], "identity (c++ function)": [[0, "_CPPv48identityi14StreamOrDevice", false], [0, "_CPPv48identityi5Dtype14StreamOrDevice", false]], "inner (c++ function)": [[0, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", false]], "isclose (c++ function)": [[0, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", false]], "isfinite (c++ function)": [[0, "_CPPv48isfiniteRK5array14StreamOrDevice", false]], "isinf (c++ function)": [[0, "_CPPv45isinfRK5array14StreamOrDevice", false]], "isnan (c++ function)": [[0, "_CPPv45isnanRK5array14StreamOrDevice", false]], "isneginf (c++ function)": [[0, "_CPPv48isneginfRK5array14StreamOrDevice", false]], "isposinf (c++ function)": [[0, "_CPPv48isposinfRK5array14StreamOrDevice", false]], "left_shift (c++ function)": [[0, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", false]], "less (c++ function)": [[0, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", false]], "less_equal (c++ function)": [[0, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", false]], "linspace (c++ function)": [[0, "_CPPv48linspaceddi5Dtype14StreamOrDevice", false]], "log (c++ function)": [[0, "_CPPv43logRK5array14StreamOrDevice", false]], "log10 (c++ function)": [[0, "_CPPv45log10RK5array14StreamOrDevice", false]], "log1p (c++ function)": [[0, "_CPPv45log1pRK5array14StreamOrDevice", false]], "log2 (c++ function)": [[0, "_CPPv44log2RK5array14StreamOrDevice", false]], "logaddexp (c++ function)": [[0, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", false]], "logical_and (c++ function)": [[0, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", false]], "logical_not (c++ function)": [[0, "_CPPv411logical_notRK5array14StreamOrDevice", false]], "logical_or (c++ function)": [[0, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", false]], "logsumexp (c++ function)": [[0, "_CPPv49logsumexpRK5array14StreamOrDevice", false], [0, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", false], [0, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", false]], "matmul (c++ function)": [[0, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", false]], "max (c++ function)": [[0, "_CPPv43maxRK5array14StreamOrDevice", false], [0, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv43maxRK5arrayb14StreamOrDevice", false], [0, "_CPPv43maxRK5arrayib14StreamOrDevice", false]], "maximum (c++ function)": [[0, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", false]], "mean (c++ function)": [[0, "_CPPv44meanRK5array14StreamOrDevice", false], [0, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv44meanRK5arrayb14StreamOrDevice", false], [0, "_CPPv44meanRK5arrayib14StreamOrDevice", false]], "meshgrid (c++ function)": [[0, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", false]], "min (c++ function)": [[0, "_CPPv43minRK5array14StreamOrDevice", false], [0, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv43minRK5arrayb14StreamOrDevice", false], [0, "_CPPv43minRK5arrayib14StreamOrDevice", false]], "minimum (c++ function)": [[0, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", false]], "moveaxis (c++ function)": [[0, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", false]], "multiply (c++ function)": [[0, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", false]], "nan_to_num (c++ function)": [[0, "_CPPv410nan_to_numRK5arrayfKNSt8optionalIfEEKNSt8optionalIfEE14StreamOrDevice", false]], "negative (c++ function)": [[0, "_CPPv48negativeRK5array14StreamOrDevice", false]], "not_equal (c++ function)": [[0, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", false]], "number_of_elements (c++ function)": [[0, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", false]], "ones (c++ function)": [[0, "_CPPv44onesRKNSt6vectorIiEE14StreamOrDevice", false], [0, "_CPPv44onesRKNSt6vectorIiEE5Dtype14StreamOrDevice", false]], "ones_like (c++ function)": [[0, "_CPPv49ones_likeRK5array14StreamOrDevice", false]], "operator!= (c++ function)": [[0, "_CPPv4I0Ene5array1TRK5array", false], [0, "_CPPv4I0Ene5arrayRK5array1T", false], [0, "_CPPv4neRK5arrayRK5array", false]], "operator% (c++ function)": [[0, "_CPPv4I0Erm5array1TRK5array", false], [0, "_CPPv4I0Erm5arrayRK5array1T", false], [0, "_CPPv4rmRK5arrayRK5array", false]], "operator& (c++ function)": [[0, "_CPPv4anRK5arrayRK5array", false]], "operator&& (c++ function)": [[0, "_CPPv4aaRK5arrayRK5array", false]], "operator* (c++ function)": [[0, "_CPPv4I0Eml5array1TRK5array", false], [0, "_CPPv4I0Eml5arrayRK5array1T", false], [0, "_CPPv4mlRK5arrayRK5array", false]], "operator+ (c++ function)": [[0, "_CPPv4I0Epl5array1TRK5array", false], [0, "_CPPv4I0Epl5arrayRK5array1T", false], [0, "_CPPv4plRK5arrayRK5array", false]], "operator- (c++ function)": [[0, "_CPPv4I0Emi5array1TRK5array", false], [0, "_CPPv4I0Emi5arrayRK5array1T", false], [0, "_CPPv4miRK5array", false], [0, "_CPPv4miRK5arrayRK5array", false]], "operator/ (c++ function)": [[0, "_CPPv4dvRK5arrayRK5array", false], [0, "_CPPv4dvRK5arrayd", false], [0, "_CPPv4dvdRK5array", false]], "operator< (c++ function)": [[0, "_CPPv4I0Elt5array1TRK5array", false], [0, "_CPPv4I0Elt5arrayRK5array1T", false], [0, "_CPPv4ltRK5arrayRK5array", false]], "operator<< (c++ function)": [[0, "_CPPv4lsRK5arrayRK5array", false]], "operator<= (c++ function)": [[0, "_CPPv4I0Ele5array1TRK5array", false], [0, "_CPPv4I0Ele5arrayRK5array1T", false], [0, "_CPPv4leRK5arrayRK5array", false]], "operator== (c++ function)": [[0, "_CPPv4I0Eeq5array1TRK5array", false], [0, "_CPPv4I0Eeq5arrayRK5array1T", false], [0, "_CPPv4eqRK5arrayRK5array", false]], "operator> (c++ function)": [[0, "_CPPv4I0Egt5array1TRK5array", false], [0, "_CPPv4I0Egt5arrayRK5array1T", false], [0, "_CPPv4gtRK5arrayRK5array", false]], "operator>= (c++ function)": [[0, "_CPPv4I0Ege5array1TRK5array", false], [0, "_CPPv4I0Ege5arrayRK5array1T", false], [0, "_CPPv4geRK5arrayRK5array", false]], "operator>> (c++ function)": [[0, "_CPPv4rsRK5arrayRK5array", false]], "operator^ (c++ function)": [[0, "_CPPv4eoRK5arrayRK5array", false]], "operator| (c++ function)": [[0, "_CPPv4orRK5arrayRK5array", false]], "operator|| (c++ function)": [[0, "_CPPv4ooRK5arrayRK5array", false]], "outer (c++ function)": [[0, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", false]], "pad (c++ function)": [[0, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayKNSt6stringE14StreamOrDevice", false], [0, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayKNSt6stringE14StreamOrDevice", false], [0, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5arrayKNSt6stringE14StreamOrDevice", false], [0, "_CPPv43padRK5arrayiRK5arrayKNSt6stringE14StreamOrDevice", false]], "partition (c++ function)": [[0, "_CPPv49partitionRK5arrayi14StreamOrDevice", false], [0, "_CPPv49partitionRK5arrayii14StreamOrDevice", false]], "power (c++ function)": [[0, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", false]], "prod (c++ function)": [[0, "_CPPv44prodRK5array14StreamOrDevice", false], [0, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv44prodRK5arrayb14StreamOrDevice", false], [0, "_CPPv44prodRK5arrayib14StreamOrDevice", false]], "quantize (c++ function)": [[0, "_CPPv48quantizeRK5arrayii14StreamOrDevice", false]], "quantized_matmul (c++ function)": [[0, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", false]], "radians (c++ function)": [[0, "_CPPv47radiansRK5array14StreamOrDevice", false]], "reciprocal (c++ function)": [[0, "_CPPv410reciprocalRK5array14StreamOrDevice", false]], "remainder (c++ function)": [[0, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", false]], "repeat (c++ function)": [[0, "_CPPv46repeatRK5arrayi14StreamOrDevice", false], [0, "_CPPv46repeatRK5arrayii14StreamOrDevice", false]], "reshape (c++ function)": [[0, "_CPPv47reshapeRK5arrayNSt6vectorIiEE14StreamOrDevice", false]], "right_shift (c++ function)": [[0, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", false]], "round (c++ function)": [[0, "_CPPv45roundRK5array14StreamOrDevice", false], [0, "_CPPv45roundRK5arrayi14StreamOrDevice", false]], "rsqrt (c++ function)": [[0, "_CPPv45rsqrtRK5array14StreamOrDevice", false]], "scatter (c++ function)": [[0, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", false], [0, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", false]], "scatter_add (c++ function)": [[0, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", false], [0, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", false]], "scatter_max (c++ function)": [[0, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", false], [0, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", false]], "scatter_min (c++ function)": [[0, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", false], [0, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", false]], "scatter_prod (c++ function)": [[0, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", false], [0, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", false]], "sigmoid (c++ function)": [[0, "_CPPv47sigmoidRK5array14StreamOrDevice", false]], "sign (c++ function)": [[0, "_CPPv44signRK5array14StreamOrDevice", false]], "sin (c++ function)": [[0, "_CPPv43sinRK5array14StreamOrDevice", false]], "sinh (c++ function)": [[0, "_CPPv44sinhRK5array14StreamOrDevice", false]], "slice (c++ function)": [[0, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", false], [0, "_CPPv45sliceRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", false]], "slice_update (c++ function)": [[0, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", false], [0, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", false]], "softmax (c++ function)": [[0, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv47softmaxRK5arrayb14StreamOrDevice", false], [0, "_CPPv47softmaxRK5arrayib14StreamOrDevice", false]], "sort (c++ function)": [[0, "_CPPv44sortRK5array14StreamOrDevice", false], [0, "_CPPv44sortRK5arrayi14StreamOrDevice", false]], "split (c++ function)": [[0, "_CPPv45splitRK5arrayRKNSt6vectorIiEE14StreamOrDevice", false], [0, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice", false], [0, "_CPPv45splitRK5arrayi14StreamOrDevice", false], [0, "_CPPv45splitRK5arrayii14StreamOrDevice", false]], "sqrt (c++ function)": [[0, "_CPPv44sqrtRK5array14StreamOrDevice", false]], "square (c++ function)": [[0, "_CPPv46squareRK5array14StreamOrDevice", false]], "squeeze (c++ function)": [[0, "_CPPv47squeezeRK5array14StreamOrDevice", false], [0, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", false], [0, "_CPPv47squeezeRK5arrayi14StreamOrDevice", false]], "stack (c++ function)": [[0, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice", false], [0, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", false]], "std (c++ function)": [[0, "_CPPv4StRK5array14StreamOrDevice", false], [0, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", false], [0, "_CPPv4StRK5arraybi14StreamOrDevice", false], [0, "_CPPv4StRK5arrayibi14StreamOrDevice", false]], "stop_gradient (c++ function)": [[0, "_CPPv413stop_gradientRK5array14StreamOrDevice", false]], "subtract (c++ function)": [[0, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", false]], "sum (c++ function)": [[0, "_CPPv43sumRK5array14StreamOrDevice", false], [0, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv43sumRK5arrayb14StreamOrDevice", false], [0, "_CPPv43sumRK5arrayib14StreamOrDevice", false]], "swapaxes (c++ function)": [[0, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", false]], "take (c++ function)": [[0, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", false], [0, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", false]], "take_along_axis (c++ function)": [[0, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", false]], "tan (c++ function)": [[0, "_CPPv43tanRK5array14StreamOrDevice", false]], "tanh (c++ function)": [[0, "_CPPv44tanhRK5array14StreamOrDevice", false]], "tensordot (c++ function)": [[0, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", false], [0, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", false]], "tile (c++ function)": [[0, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", false]], "topk (c++ function)": [[0, "_CPPv44topkRK5arrayi14StreamOrDevice", false], [0, "_CPPv44topkRK5arrayii14StreamOrDevice", false]], "trace (c++ function)": [[0, "_CPPv45traceRK5array14StreamOrDevice", false], [0, "_CPPv45traceRK5arrayiii14StreamOrDevice", false], [0, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", false]], "transpose (c++ function)": [[0, "_CPPv49transposeRK5array14StreamOrDevice", false], [0, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", false], [0, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", false]], "tri (c++ function)": [[0, "_CPPv43trii5Dtype14StreamOrDevice", false], [0, "_CPPv43triiii5Dtype14StreamOrDevice", false]], "tril (c++ function)": [[0, "_CPPv44tril5arrayi14StreamOrDevice", false]], "triu (c++ function)": [[0, "_CPPv44triu5arrayi14StreamOrDevice", false]], "var (c++ function)": [[0, "_CPPv43varRK5array14StreamOrDevice", false], [0, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", false], [0, "_CPPv43varRK5arraybi14StreamOrDevice", false], [0, "_CPPv43varRK5arrayibi14StreamOrDevice", false]], "view (c++ function)": [[0, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice", false]], "where (c++ function)": [[0, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", false]], "zeros (c++ function)": [[0, "_CPPv45zerosRKNSt6vectorIiEE14StreamOrDevice", false], [0, "_CPPv45zerosRKNSt6vectorIiEE5Dtype14StreamOrDevice", false]], "zeros_like (c++ function)": [[0, "_CPPv410zeros_likeRK5array14StreamOrDevice", false]]}, "objects": {"": [[0, 0, 1, "_CPPv43absRK5array14StreamOrDevice", "abs"], [0, 1, 1, "_CPPv43absRK5array14StreamOrDevice", "abs::a"], [0, 1, 1, "_CPPv43absRK5array14StreamOrDevice", "abs::s"], [0, 0, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add"], [0, 1, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add::a"], [0, 1, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add::b"], [0, 1, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add::s"], [0, 0, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::a"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::alpha"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::b"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::beta"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::c"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::s"], [0, 0, 1, "_CPPv43allRK5array14StreamOrDevice", "all"], [0, 0, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all"], [0, 0, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all"], [0, 0, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all"], [0, 1, 1, "_CPPv43allRK5array14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::axes"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::axis"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::keepdims"], [0, 1, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all::keepdims"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::keepdims"], [0, 1, 1, "_CPPv43allRK5array14StreamOrDevice", "all::s"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::s"], [0, 1, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all::s"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::s"], [0, 0, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::a"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::atol"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::b"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::equal_nan"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::rtol"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::s"], [0, 0, 1, "_CPPv43anyRK5array14StreamOrDevice", "any"], [0, 0, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any"], [0, 0, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any"], [0, 0, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any"], [0, 1, 1, "_CPPv43anyRK5array14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::axes"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::axis"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::keepdims"], [0, 1, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any::keepdims"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::keepdims"], [0, 1, 1, "_CPPv43anyRK5array14StreamOrDevice", "any::s"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::s"], [0, 1, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any::s"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::s"], [0, 0, 1, "_CPPv46aranged14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangedd14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeddd14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangei14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeii14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeiii14StreamOrDevice", "arange"], [0, 1, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange::dtype"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::dtype"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::dtype"], [0, 1, 1, "_CPPv46aranged14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangedd14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangei14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeii14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangedd14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeii14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::step"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::step"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::step"], [0, 1, 1, "_CPPv46aranged14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangedd14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangei14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeii14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::stop"], [0, 0, 1, "_CPPv46arccosRK5array14StreamOrDevice", "arccos"], [0, 1, 1, "_CPPv46arccosRK5array14StreamOrDevice", "arccos::a"], [0, 1, 1, "_CPPv46arccosRK5array14StreamOrDevice", "arccos::s"], [0, 0, 1, "_CPPv47arccoshRK5array14StreamOrDevice", "arccosh"], [0, 1, 1, "_CPPv47arccoshRK5array14StreamOrDevice", "arccosh::a"], [0, 1, 1, "_CPPv47arccoshRK5array14StreamOrDevice", "arccosh::s"], [0, 0, 1, "_CPPv46arcsinRK5array14StreamOrDevice", "arcsin"], [0, 1, 1, "_CPPv46arcsinRK5array14StreamOrDevice", "arcsin::a"], [0, 1, 1, "_CPPv46arcsinRK5array14StreamOrDevice", "arcsin::s"], [0, 0, 1, "_CPPv47arcsinhRK5array14StreamOrDevice", "arcsinh"], [0, 1, 1, "_CPPv47arcsinhRK5array14StreamOrDevice", "arcsinh::a"], [0, 1, 1, "_CPPv47arcsinhRK5array14StreamOrDevice", "arcsinh::s"], [0, 0, 1, "_CPPv46arctanRK5array14StreamOrDevice", "arctan"], [0, 0, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2"], [0, 1, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2::a"], [0, 1, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2::b"], [0, 1, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2::s"], [0, 1, 1, "_CPPv46arctanRK5array14StreamOrDevice", "arctan::a"], [0, 1, 1, "_CPPv46arctanRK5array14StreamOrDevice", "arctan::s"], [0, 0, 1, "_CPPv47arctanhRK5array14StreamOrDevice", "arctanh"], [0, 1, 1, "_CPPv47arctanhRK5array14StreamOrDevice", "arctanh::a"], [0, 1, 1, "_CPPv47arctanhRK5array14StreamOrDevice", "arctanh::s"], [0, 0, 1, "_CPPv46argmaxRK5array14StreamOrDevice", "argmax"], [0, 0, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax"], [0, 0, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax"], [0, 1, 1, "_CPPv46argmaxRK5array14StreamOrDevice", "argmax::a"], [0, 1, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax::a"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::a"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::axis"], [0, 1, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax::keepdims"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::keepdims"], [0, 1, 1, "_CPPv46argmaxRK5array14StreamOrDevice", "argmax::s"], [0, 1, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax::s"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::s"], [0, 0, 1, "_CPPv46argminRK5array14StreamOrDevice", "argmin"], [0, 0, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin"], [0, 0, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin"], [0, 1, 1, "_CPPv46argminRK5array14StreamOrDevice", "argmin::a"], [0, 1, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin::a"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::a"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::axis"], [0, 1, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin::keepdims"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::keepdims"], [0, 1, 1, "_CPPv46argminRK5array14StreamOrDevice", "argmin::s"], [0, 1, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin::s"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::s"], [0, 0, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition"], [0, 0, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition"], [0, 1, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition::a"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::a"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::axis"], [0, 1, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition::kth"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::kth"], [0, 1, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition::s"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::s"], [0, 0, 1, "_CPPv47argsortRK5array14StreamOrDevice", "argsort"], [0, 0, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort"], [0, 1, 1, "_CPPv47argsortRK5array14StreamOrDevice", "argsort::a"], [0, 1, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort::a"], [0, 1, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort::axis"], [0, 1, 1, "_CPPv47argsortRK5array14StreamOrDevice", "argsort::s"], [0, 1, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort::s"], [0, 0, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal"], [0, 0, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal::a"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::a"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal::b"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::b"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::equal_nan"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal::s"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::s"], [0, 0, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided"], [0, 1, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided::a"], [0, 1, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided::offset"], [0, 1, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided::s"], [0, 1, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided::shape"], [0, 1, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided::strides"], [0, 0, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype"], [0, 1, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype::a"], [0, 1, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype::dtype"], [0, 1, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype::s"], [0, 0, 1, "_CPPv410atleast_1dRK5array14StreamOrDevice", "atleast_1d"], [0, 0, 1, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_1d"], [0, 1, 1, "_CPPv410atleast_1dRK5array14StreamOrDevice", "atleast_1d::a"], [0, 1, 1, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_1d::a"], [0, 1, 1, "_CPPv410atleast_1dRK5array14StreamOrDevice", "atleast_1d::s"], [0, 1, 1, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_1d::s"], [0, 0, 1, "_CPPv410atleast_2dRK5array14StreamOrDevice", "atleast_2d"], [0, 0, 1, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_2d"], [0, 1, 1, "_CPPv410atleast_2dRK5array14StreamOrDevice", "atleast_2d::a"], [0, 1, 1, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_2d::a"], [0, 1, 1, "_CPPv410atleast_2dRK5array14StreamOrDevice", "atleast_2d::s"], [0, 1, 1, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_2d::s"], [0, 0, 1, "_CPPv410atleast_3dRK5array14StreamOrDevice", "atleast_3d"], [0, 0, 1, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_3d"], [0, 1, 1, "_CPPv410atleast_3dRK5array14StreamOrDevice", "atleast_3d::a"], [0, 1, 1, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_3d::a"], [0, 1, 1, "_CPPv410atleast_3dRK5array14StreamOrDevice", "atleast_3d::s"], [0, 1, 1, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_3d::s"], [0, 0, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and"], [0, 1, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and::a"], [0, 1, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and::b"], [0, 1, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and::s"], [0, 0, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or"], [0, 1, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or::a"], [0, 1, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or::b"], [0, 1, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or::s"], [0, 0, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor"], [0, 1, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor::a"], [0, 1, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor::b"], [0, 1, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor::s"], [0, 0, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::a"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::b"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::block_size"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::mask_lhs"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::mask_out"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::mask_rhs"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::s"], [0, 0, 1, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice", "broadcast_arrays"], [0, 1, 1, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice", "broadcast_arrays::inputs"], [0, 1, 1, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice", "broadcast_arrays::s"], [0, 0, 1, "_CPPv412broadcast_toRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "broadcast_to"], [0, 1, 1, "_CPPv412broadcast_toRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "broadcast_to::a"], [0, 1, 1, "_CPPv412broadcast_toRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "broadcast_to::s"], [0, 1, 1, "_CPPv412broadcast_toRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "broadcast_to::shape"], [0, 0, 1, "_CPPv44ceilRK5array14StreamOrDevice", "ceil"], [0, 1, 1, "_CPPv44ceilRK5array14StreamOrDevice", "ceil::a"], [0, 1, 1, "_CPPv44ceilRK5array14StreamOrDevice", "ceil::s"], [0, 0, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::a"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::a_max"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::a_min"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::s"], [0, 0, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEE14StreamOrDevice", "concatenate"], [0, 0, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate"], [0, 1, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEE14StreamOrDevice", "concatenate::arrays"], [0, 1, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate::arrays"], [0, 1, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate::axis"], [0, 1, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEE14StreamOrDevice", "concatenate::s"], [0, 1, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate::s"], [0, 0, 1, "_CPPv49conjugateRK5array14StreamOrDevice", "conjugate"], [0, 1, 1, "_CPPv49conjugateRK5array14StreamOrDevice", "conjugate::a"], [0, 1, 1, "_CPPv49conjugateRK5array14StreamOrDevice", "conjugate::s"], [0, 0, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::dilation"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::groups"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::input"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::padding"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::s"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::stride"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::weight"], [0, 0, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::dilation"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::groups"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::input"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::padding"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::s"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::stride"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::weight"], [0, 0, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::dilation"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::groups"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::input"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::padding"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::s"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::stride"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::weight"], [0, 0, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general"], [0, 0, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::flip"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::flip"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::groups"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::groups"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input_dilation"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input_dilation"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::kernel_dilation"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::kernel_dilation"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::padding"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::padding_hi"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::padding_lo"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::s"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::s"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::stride"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::stride"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::weight"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::weight"], [0, 0, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv_transpose1d"], [0, 1, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv_transpose1d::dilation"], [0, 1, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv_transpose1d::groups"], [0, 1, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv_transpose1d::input"], [0, 1, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv_transpose1d::padding"], [0, 1, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv_transpose1d::s"], [0, 1, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv_transpose1d::stride"], [0, 1, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv_transpose1d::weight"], [0, 0, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d"], [0, 1, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d::dilation"], [0, 1, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d::groups"], [0, 1, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d::input"], [0, 1, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d::padding"], [0, 1, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d::s"], [0, 1, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d::stride"], [0, 1, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d::weight"], [0, 0, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d"], [0, 1, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d::dilation"], [0, 1, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d::groups"], [0, 1, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d::input"], [0, 1, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d::padding"], [0, 1, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d::s"], [0, 1, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d::stride"], [0, 1, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d::weight"], [0, 0, 1, "_CPPv44copy5array14StreamOrDevice", "copy"], [0, 1, 1, "_CPPv44copy5array14StreamOrDevice", "copy::a"], [0, 1, 1, "_CPPv44copy5array14StreamOrDevice", "copy::s"], [0, 0, 1, "_CPPv43cosRK5array14StreamOrDevice", "cos"], [0, 1, 1, "_CPPv43cosRK5array14StreamOrDevice", "cos::a"], [0, 1, 1, "_CPPv43cosRK5array14StreamOrDevice", "cos::s"], [0, 0, 1, "_CPPv44coshRK5array14StreamOrDevice", "cosh"], [0, 1, 1, "_CPPv44coshRK5array14StreamOrDevice", "cosh::a"], [0, 1, 1, "_CPPv44coshRK5array14StreamOrDevice", "cosh::s"], [0, 0, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::a"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::axis"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::inclusive"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::reverse"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::s"], [0, 0, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::a"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::axis"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::inclusive"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::reverse"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::s"], [0, 0, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::a"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::axis"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::inclusive"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::reverse"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::s"], [0, 0, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::a"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::axis"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::inclusive"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::reverse"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::s"], [0, 0, 1, "_CPPv47degreesRK5array14StreamOrDevice", "degrees"], [0, 1, 1, "_CPPv47degreesRK5array14StreamOrDevice", "degrees::a"], [0, 1, 1, "_CPPv47degreesRK5array14StreamOrDevice", "degrees::s"], [0, 0, 1, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE", "depends"], [0, 1, 1, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE", "depends::dependencies"], [0, 1, 1, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE", "depends::inputs"], [0, 0, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::biases"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::bits"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::group_size"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::s"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::scales"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::w"], [0, 0, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag"], [0, 1, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag::a"], [0, 1, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag::k"], [0, 1, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag::s"], [0, 0, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::a"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::axis1"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::axis2"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::offset"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::s"], [0, 0, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide"], [0, 1, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide::a"], [0, 1, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide::b"], [0, 1, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide::s"], [0, 0, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod"], [0, 1, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod::a"], [0, 1, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod::b"], [0, 1, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod::s"], [0, 0, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal"], [0, 1, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal::a"], [0, 1, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal::b"], [0, 1, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal::s"], [0, 0, 1, "_CPPv43erfRK5array14StreamOrDevice", "erf"], [0, 1, 1, "_CPPv43erfRK5array14StreamOrDevice", "erf::a"], [0, 1, 1, "_CPPv43erfRK5array14StreamOrDevice", "erf::s"], [0, 0, 1, "_CPPv46erfinvRK5array14StreamOrDevice", "erfinv"], [0, 1, 1, "_CPPv46erfinvRK5array14StreamOrDevice", "erfinv::a"], [0, 1, 1, "_CPPv46erfinvRK5array14StreamOrDevice", "erfinv::s"], [0, 0, 1, "_CPPv43expRK5array14StreamOrDevice", "exp"], [0, 1, 1, "_CPPv43expRK5array14StreamOrDevice", "exp::a"], [0, 1, 1, "_CPPv43expRK5array14StreamOrDevice", "exp::s"], [0, 0, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims"], [0, 0, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims::a"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims::a"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims::axes"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims::axis"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims::s"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims::s"], [0, 0, 1, "_CPPv45expm1RK5array14StreamOrDevice", "expm1"], [0, 1, 1, "_CPPv45expm1RK5array14StreamOrDevice", "expm1::a"], [0, 1, 1, "_CPPv45expm1RK5array14StreamOrDevice", "expm1::s"], [0, 0, 1, "_CPPv43eyei14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyeii14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyeiii14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye"], [0, 1, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye::dtype"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::dtype"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::k"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::k"], [0, 1, 1, "_CPPv43eyeii14StreamOrDevice", "eye::m"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::m"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::m"], [0, 1, 1, "_CPPv43eyei14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyeii14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyei14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyeii14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::s"], [0, 0, 1, "_CPPv47flattenRK5array14StreamOrDevice", "flatten"], [0, 0, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten"], [0, 1, 1, "_CPPv47flattenRK5array14StreamOrDevice", "flatten::a"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::a"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::end_axis"], [0, 1, 1, "_CPPv47flattenRK5array14StreamOrDevice", "flatten::s"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::s"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::start_axis"], [0, 0, 1, "_CPPv45floorRK5array14StreamOrDevice", "floor"], [0, 1, 1, "_CPPv45floorRK5array14StreamOrDevice", "floor::a"], [0, 1, 1, "_CPPv45floorRK5array14StreamOrDevice", "floor::s"], [0, 0, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide"], [0, 1, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide::a"], [0, 1, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide::b"], [0, 1, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide::s"], [0, 0, 1, "_CPPv44fullNSt6vectorIiEE5array14StreamOrDevice", "full"], [0, 0, 1, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice", "full"], [0, 0, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice", "full"], [0, 0, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full"], [0, 2, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice", "full::T"], [0, 2, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full::T"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice", "full::dtype"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full::dtype"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice", "full::val"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full::val"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array14StreamOrDevice", "full::vals"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice", "full::vals"], [0, 0, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather"], [0, 0, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather::a"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather::a"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather::axes"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather::axis"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather::indices"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather::indices"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather::s"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather::s"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather::slice_sizes"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather::slice_sizes"], [0, 0, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm::a"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm::b"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm::lhs_indices"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm::rhs_indices"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm::s"], [0, 0, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::biases"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::bits"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::group_size"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::lhs_indices"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::rhs_indices"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::s"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::scales"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::transpose"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::w"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::x"], [0, 0, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater"], [0, 1, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater::a"], [0, 1, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater::b"], [0, 1, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater::s"], [0, 0, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal"], [0, 1, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal::a"], [0, 1, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal::b"], [0, 1, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal::s"], [0, 0, 1, "_CPPv418hadamard_transformRK5arrayNSt8optionalIfEE14StreamOrDevice", "hadamard_transform"], [0, 1, 1, "_CPPv418hadamard_transformRK5arrayNSt8optionalIfEE14StreamOrDevice", "hadamard_transform::a"], [0, 1, 1, "_CPPv418hadamard_transformRK5arrayNSt8optionalIfEE14StreamOrDevice", "hadamard_transform::s"], [0, 1, 1, "_CPPv418hadamard_transformRK5arrayNSt8optionalIfEE14StreamOrDevice", "hadamard_transform::scale"], [0, 0, 1, "_CPPv48identityi14StreamOrDevice", "identity"], [0, 0, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity"], [0, 1, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity::dtype"], [0, 1, 1, "_CPPv48identityi14StreamOrDevice", "identity::n"], [0, 1, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity::n"], [0, 1, 1, "_CPPv48identityi14StreamOrDevice", "identity::s"], [0, 1, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity::s"], [0, 0, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner"], [0, 1, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner::a"], [0, 1, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner::b"], [0, 1, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner::s"], [0, 0, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::a"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::atol"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::b"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::equal_nan"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::rtol"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::s"], [0, 0, 1, "_CPPv48isfiniteRK5array14StreamOrDevice", "isfinite"], [0, 1, 1, "_CPPv48isfiniteRK5array14StreamOrDevice", "isfinite::a"], [0, 1, 1, "_CPPv48isfiniteRK5array14StreamOrDevice", "isfinite::s"], [0, 0, 1, "_CPPv45isinfRK5array14StreamOrDevice", "isinf"], [0, 1, 1, "_CPPv45isinfRK5array14StreamOrDevice", "isinf::a"], [0, 1, 1, "_CPPv45isinfRK5array14StreamOrDevice", "isinf::s"], [0, 0, 1, "_CPPv45isnanRK5array14StreamOrDevice", "isnan"], [0, 1, 1, "_CPPv45isnanRK5array14StreamOrDevice", "isnan::a"], [0, 1, 1, "_CPPv45isnanRK5array14StreamOrDevice", "isnan::s"], [0, 0, 1, "_CPPv48isneginfRK5array14StreamOrDevice", "isneginf"], [0, 1, 1, "_CPPv48isneginfRK5array14StreamOrDevice", "isneginf::a"], [0, 1, 1, "_CPPv48isneginfRK5array14StreamOrDevice", "isneginf::s"], [0, 0, 1, "_CPPv48isposinfRK5array14StreamOrDevice", "isposinf"], [0, 1, 1, "_CPPv48isposinfRK5array14StreamOrDevice", "isposinf::a"], [0, 1, 1, "_CPPv48isposinfRK5array14StreamOrDevice", "isposinf::s"], [0, 0, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift"], [0, 1, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift::a"], [0, 1, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift::b"], [0, 1, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift::s"], [0, 0, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less"], [0, 1, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less::a"], [0, 1, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less::b"], [0, 1, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less::s"], [0, 0, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal"], [0, 1, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal::a"], [0, 1, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal::b"], [0, 1, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal::s"], [0, 0, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::dtype"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::num"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::s"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::start"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::stop"], [0, 0, 1, "_CPPv43logRK5array14StreamOrDevice", "log"], [0, 0, 1, "_CPPv45log10RK5array14StreamOrDevice", "log10"], [0, 1, 1, "_CPPv45log10RK5array14StreamOrDevice", "log10::a"], [0, 1, 1, "_CPPv45log10RK5array14StreamOrDevice", "log10::s"], [0, 0, 1, "_CPPv45log1pRK5array14StreamOrDevice", "log1p"], [0, 1, 1, "_CPPv45log1pRK5array14StreamOrDevice", "log1p::a"], [0, 1, 1, "_CPPv45log1pRK5array14StreamOrDevice", "log1p::s"], [0, 0, 1, "_CPPv44log2RK5array14StreamOrDevice", "log2"], [0, 1, 1, "_CPPv44log2RK5array14StreamOrDevice", "log2::a"], [0, 1, 1, "_CPPv44log2RK5array14StreamOrDevice", "log2::s"], [0, 1, 1, "_CPPv43logRK5array14StreamOrDevice", "log::a"], [0, 1, 1, "_CPPv43logRK5array14StreamOrDevice", "log::s"], [0, 0, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp"], [0, 1, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp::a"], [0, 1, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp::b"], [0, 1, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp::s"], [0, 0, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and"], [0, 1, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and::a"], [0, 1, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and::b"], [0, 1, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and::s"], [0, 0, 1, "_CPPv411logical_notRK5array14StreamOrDevice", "logical_not"], [0, 1, 1, "_CPPv411logical_notRK5array14StreamOrDevice", "logical_not::a"], [0, 1, 1, "_CPPv411logical_notRK5array14StreamOrDevice", "logical_not::s"], [0, 0, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or"], [0, 1, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or::a"], [0, 1, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or::b"], [0, 1, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or::s"], [0, 0, 1, "_CPPv49logsumexpRK5array14StreamOrDevice", "logsumexp"], [0, 0, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp"], [0, 0, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp"], [0, 0, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp"], [0, 1, 1, "_CPPv49logsumexpRK5array14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::axes"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::axis"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::keepdims"], [0, 1, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp::keepdims"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::keepdims"], [0, 1, 1, "_CPPv49logsumexpRK5array14StreamOrDevice", "logsumexp::s"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::s"], [0, 1, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp::s"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::s"], [0, 0, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul"], [0, 1, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul::a"], [0, 1, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul::b"], [0, 1, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul::s"], [0, 0, 1, "_CPPv43maxRK5array14StreamOrDevice", "max"], [0, 0, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max"], [0, 0, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max"], [0, 0, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max"], [0, 1, 1, "_CPPv43maxRK5array14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::axes"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::axis"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::keepdims"], [0, 1, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max::keepdims"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::keepdims"], [0, 1, 1, "_CPPv43maxRK5array14StreamOrDevice", "max::s"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::s"], [0, 1, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max::s"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::s"], [0, 0, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum"], [0, 1, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum::a"], [0, 1, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum::b"], [0, 1, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum::s"], [0, 0, 1, "_CPPv44meanRK5array14StreamOrDevice", "mean"], [0, 0, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean"], [0, 0, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean"], [0, 0, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean"], [0, 1, 1, "_CPPv44meanRK5array14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::axes"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::axis"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::keepdims"], [0, 1, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean::keepdims"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::keepdims"], [0, 1, 1, "_CPPv44meanRK5array14StreamOrDevice", "mean::s"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::s"], [0, 1, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean::s"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::s"], [0, 0, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", "meshgrid"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", "meshgrid::arrays"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", "meshgrid::indexing"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", "meshgrid::s"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", "meshgrid::sparse"], [0, 0, 1, "_CPPv43minRK5array14StreamOrDevice", "min"], [0, 0, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min"], [0, 0, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min"], [0, 0, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min"], [0, 1, 1, "_CPPv43minRK5array14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::axes"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::axis"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::keepdims"], [0, 1, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min::keepdims"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::keepdims"], [0, 1, 1, "_CPPv43minRK5array14StreamOrDevice", "min::s"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::s"], [0, 1, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min::s"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::s"], [0, 0, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum"], [0, 1, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum::a"], [0, 1, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum::b"], [0, 1, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum::s"], [0, 0, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::a"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::destination"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::s"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::source"], [0, 0, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply"], [0, 1, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply::a"], [0, 1, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply::b"], [0, 1, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply::s"], [0, 0, 1, "_CPPv410nan_to_numRK5arrayfKNSt8optionalIfEEKNSt8optionalIfEE14StreamOrDevice", "nan_to_num"], [0, 1, 1, "_CPPv410nan_to_numRK5arrayfKNSt8optionalIfEEKNSt8optionalIfEE14StreamOrDevice", "nan_to_num::a"], [0, 1, 1, "_CPPv410nan_to_numRK5arrayfKNSt8optionalIfEEKNSt8optionalIfEE14StreamOrDevice", "nan_to_num::nan"], [0, 1, 1, "_CPPv410nan_to_numRK5arrayfKNSt8optionalIfEEKNSt8optionalIfEE14StreamOrDevice", "nan_to_num::neginf"], [0, 1, 1, "_CPPv410nan_to_numRK5arrayfKNSt8optionalIfEEKNSt8optionalIfEE14StreamOrDevice", "nan_to_num::posinf"], [0, 1, 1, "_CPPv410nan_to_numRK5arrayfKNSt8optionalIfEEKNSt8optionalIfEE14StreamOrDevice", "nan_to_num::s"], [0, 0, 1, "_CPPv48negativeRK5array14StreamOrDevice", "negative"], [0, 1, 1, "_CPPv48negativeRK5array14StreamOrDevice", "negative::a"], [0, 1, 1, "_CPPv48negativeRK5array14StreamOrDevice", "negative::s"], [0, 0, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal"], [0, 1, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal::a"], [0, 1, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal::b"], [0, 1, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal::s"], [0, 0, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::a"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::axes"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::dtype"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::inverted"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::s"], [0, 0, 1, "_CPPv44onesRKNSt6vectorIiEE14StreamOrDevice", "ones"], [0, 0, 1, "_CPPv44onesRKNSt6vectorIiEE5Dtype14StreamOrDevice", "ones"], [0, 1, 1, "_CPPv44onesRKNSt6vectorIiEE5Dtype14StreamOrDevice", "ones::dtype"], [0, 1, 1, "_CPPv44onesRKNSt6vectorIiEE14StreamOrDevice", "ones::s"], [0, 1, 1, "_CPPv44onesRKNSt6vectorIiEE5Dtype14StreamOrDevice", "ones::s"], [0, 1, 1, "_CPPv44onesRKNSt6vectorIiEE14StreamOrDevice", "ones::shape"], [0, 1, 1, "_CPPv44onesRKNSt6vectorIiEE5Dtype14StreamOrDevice", "ones::shape"], [0, 0, 1, "_CPPv49ones_likeRK5array14StreamOrDevice", "ones_like"], [0, 1, 1, "_CPPv49ones_likeRK5array14StreamOrDevice", "ones_like::a"], [0, 1, 1, "_CPPv49ones_likeRK5array14StreamOrDevice", "ones_like::s"], [0, 0, 1, "_CPPv4I0Ene5array1TRK5array", "operator!="], [0, 0, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!="], [0, 0, 1, "_CPPv4neRK5arrayRK5array", "operator!="], [0, 2, 1, "_CPPv4I0Ene5array1TRK5array", "operator!=::T"], [0, 2, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!=::T"], [0, 1, 1, "_CPPv4I0Ene5array1TRK5array", "operator!=::a"], [0, 1, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!=::a"], [0, 1, 1, "_CPPv4neRK5arrayRK5array", "operator!=::a"], [0, 1, 1, "_CPPv4I0Ene5array1TRK5array", "operator!=::b"], [0, 1, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!=::b"], [0, 1, 1, "_CPPv4neRK5arrayRK5array", "operator!=::b"], [0, 0, 1, "_CPPv4I0Erm5array1TRK5array", "operator%"], [0, 0, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%"], [0, 0, 1, "_CPPv4rmRK5arrayRK5array", "operator%"], [0, 2, 1, "_CPPv4I0Erm5array1TRK5array", "operator%::T"], [0, 2, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%::T"], [0, 1, 1, "_CPPv4I0Erm5array1TRK5array", "operator%::a"], [0, 1, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%::a"], [0, 1, 1, "_CPPv4rmRK5arrayRK5array", "operator%::a"], [0, 1, 1, "_CPPv4I0Erm5array1TRK5array", "operator%::b"], [0, 1, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%::b"], [0, 1, 1, "_CPPv4rmRK5arrayRK5array", "operator%::b"], [0, 0, 1, "_CPPv4anRK5arrayRK5array", "operator&amp;"], [0, 0, 1, "_CPPv4aaRK5arrayRK5array", "operator&amp;&amp;"], [0, 1, 1, "_CPPv4aaRK5arrayRK5array", "operator&amp;&amp;::a"], [0, 1, 1, "_CPPv4aaRK5arrayRK5array", "operator&amp;&amp;::b"], [0, 1, 1, "_CPPv4anRK5arrayRK5array", "operator&amp;::a"], [0, 1, 1, "_CPPv4anRK5arrayRK5array", "operator&amp;::b"], [0, 0, 1, "_CPPv4I0Eml5array1TRK5array", "operator*"], [0, 0, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*"], [0, 0, 1, "_CPPv4mlRK5arrayRK5array", "operator*"], [0, 2, 1, "_CPPv4I0Eml5array1TRK5array", "operator*::T"], [0, 2, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*::T"], [0, 1, 1, "_CPPv4I0Eml5array1TRK5array", "operator*::a"], [0, 1, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*::a"], [0, 1, 1, "_CPPv4mlRK5arrayRK5array", "operator*::a"], [0, 1, 1, "_CPPv4I0Eml5array1TRK5array", "operator*::b"], [0, 1, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*::b"], [0, 1, 1, "_CPPv4mlRK5arrayRK5array", "operator*::b"], [0, 0, 1, "_CPPv4I0Epl5array1TRK5array", "operator+"], [0, 0, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+"], [0, 0, 1, "_CPPv4plRK5arrayRK5array", "operator+"], [0, 2, 1, "_CPPv4I0Epl5array1TRK5array", "operator+::T"], [0, 2, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+::T"], [0, 1, 1, "_CPPv4I0Epl5array1TRK5array", "operator+::a"], [0, 1, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+::a"], [0, 1, 1, "_CPPv4plRK5arrayRK5array", "operator+::a"], [0, 1, 1, "_CPPv4I0Epl5array1TRK5array", "operator+::b"], [0, 1, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+::b"], [0, 1, 1, "_CPPv4plRK5arrayRK5array", "operator+::b"], [0, 0, 1, "_CPPv4I0Emi5array1TRK5array", "operator-"], [0, 0, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-"], [0, 0, 1, "_CPPv4miRK5array", "operator-"], [0, 0, 1, "_CPPv4miRK5arrayRK5array", "operator-"], [0, 2, 1, "_CPPv4I0Emi5array1TRK5array", "operator-::T"], [0, 2, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-::T"], [0, 1, 1, "_CPPv4I0Emi5array1TRK5array", "operator-::a"], [0, 1, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-::a"], [0, 1, 1, "_CPPv4miRK5array", "operator-::a"], [0, 1, 1, "_CPPv4miRK5arrayRK5array", "operator-::a"], [0, 1, 1, "_CPPv4I0Emi5array1TRK5array", "operator-::b"], [0, 1, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-::b"], [0, 1, 1, "_CPPv4miRK5arrayRK5array", "operator-::b"], [0, 0, 1, "_CPPv4dvRK5arrayRK5array", "operator/"], [0, 0, 1, "_CPPv4dvRK5arrayd", "operator/"], [0, 0, 1, "_CPPv4dvdRK5array", "operator/"], [0, 1, 1, "_CPPv4dvRK5arrayRK5array", "operator/::a"], [0, 1, 1, "_CPPv4dvRK5arrayd", "operator/::a"], [0, 1, 1, "_CPPv4dvdRK5array", "operator/::a"], [0, 1, 1, "_CPPv4dvRK5arrayRK5array", "operator/::b"], [0, 1, 1, "_CPPv4dvRK5arrayd", "operator/::b"], [0, 1, 1, "_CPPv4dvdRK5array", "operator/::b"], [0, 0, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;"], [0, 0, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;"], [0, 0, 1, "_CPPv4ltRK5arrayRK5array", "operator&lt;"], [0, 2, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;::T"], [0, 2, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;::T"], [0, 1, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;::a"], [0, 1, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;::a"], [0, 1, 1, "_CPPv4ltRK5arrayRK5array", "operator&lt;::a"], [0, 1, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;::b"], [0, 1, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;::b"], [0, 1, 1, "_CPPv4ltRK5arrayRK5array", "operator&lt;::b"], [0, 0, 1, "_CPPv4lsRK5arrayRK5array", "operator&lt;&lt;"], [0, 1, 1, "_CPPv4lsRK5arrayRK5array", "operator&lt;&lt;::a"], [0, 1, 1, "_CPPv4lsRK5arrayRK5array", "operator&lt;&lt;::b"], [0, 0, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;="], [0, 0, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;="], [0, 0, 1, "_CPPv4leRK5arrayRK5array", "operator&lt;="], [0, 2, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;=::T"], [0, 2, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;=::T"], [0, 1, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;=::a"], [0, 1, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;=::a"], [0, 1, 1, "_CPPv4leRK5arrayRK5array", "operator&lt;=::a"], [0, 1, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;=::b"], [0, 1, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;=::b"], [0, 1, 1, "_CPPv4leRK5arrayRK5array", "operator&lt;=::b"], [0, 0, 1, "_CPPv4I0Eeq5array1TRK5array", "operator=="], [0, 0, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator=="], [0, 0, 1, "_CPPv4eqRK5arrayRK5array", "operator=="], [0, 2, 1, "_CPPv4I0Eeq5array1TRK5array", "operator==::T"], [0, 2, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator==::T"], [0, 1, 1, "_CPPv4I0Eeq5array1TRK5array", "operator==::a"], [0, 1, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator==::a"], [0, 1, 1, "_CPPv4eqRK5arrayRK5array", "operator==::a"], [0, 1, 1, "_CPPv4I0Eeq5array1TRK5array", "operator==::b"], [0, 1, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator==::b"], [0, 1, 1, "_CPPv4eqRK5arrayRK5array", "operator==::b"], [0, 0, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;"], [0, 0, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;"], [0, 0, 1, "_CPPv4gtRK5arrayRK5array", "operator&gt;"], [0, 2, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;::T"], [0, 2, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;::T"], [0, 1, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;::a"], [0, 1, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;::a"], [0, 1, 1, "_CPPv4gtRK5arrayRK5array", "operator&gt;::a"], [0, 1, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;::b"], [0, 1, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;::b"], [0, 1, 1, "_CPPv4gtRK5arrayRK5array", "operator&gt;::b"], [0, 0, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;="], [0, 0, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;="], [0, 0, 1, "_CPPv4geRK5arrayRK5array", "operator&gt;="], [0, 2, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;=::T"], [0, 2, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;=::T"], [0, 1, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;=::a"], [0, 1, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;=::a"], [0, 1, 1, "_CPPv4geRK5arrayRK5array", "operator&gt;=::a"], [0, 1, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;=::b"], [0, 1, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;=::b"], [0, 1, 1, "_CPPv4geRK5arrayRK5array", "operator&gt;=::b"], [0, 0, 1, "_CPPv4rsRK5arrayRK5array", "operator&gt;&gt;"], [0, 1, 1, "_CPPv4rsRK5arrayRK5array", "operator&gt;&gt;::a"], [0, 1, 1, "_CPPv4rsRK5arrayRK5array", "operator&gt;&gt;::b"], [0, 0, 1, "_CPPv4eoRK5arrayRK5array", "operator^"], [0, 1, 1, "_CPPv4eoRK5arrayRK5array", "operator^::a"], [0, 1, 1, "_CPPv4eoRK5arrayRK5array", "operator^::b"], [0, 0, 1, "_CPPv4orRK5arrayRK5array", "operator|"], [0, 1, 1, "_CPPv4orRK5arrayRK5array", "operator|::a"], [0, 1, 1, "_CPPv4orRK5arrayRK5array", "operator|::b"], [0, 0, 1, "_CPPv4ooRK5arrayRK5array", "operator||"], [0, 1, 1, "_CPPv4ooRK5arrayRK5array", "operator||::a"], [0, 1, 1, "_CPPv4ooRK5arrayRK5array", "operator||::b"], [0, 0, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer"], [0, 1, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer::a"], [0, 1, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer::b"], [0, 1, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer::s"], [0, 0, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayKNSt6stringE14StreamOrDevice", "pad"], [0, 0, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayKNSt6stringE14StreamOrDevice", "pad"], [0, 0, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5arrayKNSt6stringE14StreamOrDevice", "pad"], [0, 0, 1, "_CPPv43padRK5arrayiRK5arrayKNSt6stringE14StreamOrDevice", "pad"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayKNSt6stringE14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayiRK5arrayKNSt6stringE14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::axes"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::high_pad_size"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::low_pad_size"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::mode"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayKNSt6stringE14StreamOrDevice", "pad::mode"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::mode"], [0, 1, 1, "_CPPv43padRK5arrayiRK5arrayKNSt6stringE14StreamOrDevice", "pad::mode"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayKNSt6stringE14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayiRK5arrayKNSt6stringE14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::pad_width"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayKNSt6stringE14StreamOrDevice", "pad::pad_width"], [0, 1, 1, "_CPPv43padRK5arrayiRK5arrayKNSt6stringE14StreamOrDevice", "pad::pad_width"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::s"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayKNSt6stringE14StreamOrDevice", "pad::s"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::s"], [0, 1, 1, "_CPPv43padRK5arrayiRK5arrayKNSt6stringE14StreamOrDevice", "pad::s"], [0, 0, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition"], [0, 0, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition"], [0, 1, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition::a"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::a"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::axis"], [0, 1, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition::kth"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::kth"], [0, 1, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition::s"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::s"], [0, 0, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power"], [0, 1, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power::a"], [0, 1, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power::b"], [0, 1, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power::s"], [0, 0, 1, "_CPPv44prodRK5array14StreamOrDevice", "prod"], [0, 0, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod"], [0, 0, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod"], [0, 0, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod"], [0, 1, 1, "_CPPv44prodRK5array14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::axes"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::axis"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::keepdims"], [0, 1, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod::keepdims"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::keepdims"], [0, 1, 1, "_CPPv44prodRK5array14StreamOrDevice", "prod::s"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::s"], [0, 1, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod::s"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::s"], [0, 0, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::bits"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::group_size"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::s"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::w"], [0, 0, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::biases"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::bits"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::group_size"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::s"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::scales"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::transpose"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::w"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::x"], [0, 0, 1, "_CPPv47radiansRK5array14StreamOrDevice", "radians"], [0, 1, 1, "_CPPv47radiansRK5array14StreamOrDevice", "radians::a"], [0, 1, 1, "_CPPv47radiansRK5array14StreamOrDevice", "radians::s"], [0, 0, 1, "_CPPv410reciprocalRK5array14StreamOrDevice", "reciprocal"], [0, 1, 1, "_CPPv410reciprocalRK5array14StreamOrDevice", "reciprocal::a"], [0, 1, 1, "_CPPv410reciprocalRK5array14StreamOrDevice", "reciprocal::s"], [0, 0, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder"], [0, 1, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder::a"], [0, 1, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder::b"], [0, 1, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder::s"], [0, 0, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat"], [0, 0, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat"], [0, 1, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat::arr"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::arr"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::axis"], [0, 1, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat::repeats"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::repeats"], [0, 1, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat::s"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::s"], [0, 0, 1, "_CPPv47reshapeRK5arrayNSt6vectorIiEE14StreamOrDevice", "reshape"], [0, 1, 1, "_CPPv47reshapeRK5arrayNSt6vectorIiEE14StreamOrDevice", "reshape::a"], [0, 1, 1, "_CPPv47reshapeRK5arrayNSt6vectorIiEE14StreamOrDevice", "reshape::s"], [0, 1, 1, "_CPPv47reshapeRK5arrayNSt6vectorIiEE14StreamOrDevice", "reshape::shape"], [0, 0, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift"], [0, 1, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift::a"], [0, 1, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift::b"], [0, 1, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift::s"], [0, 0, 1, "_CPPv45roundRK5array14StreamOrDevice", "round"], [0, 0, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round"], [0, 1, 1, "_CPPv45roundRK5array14StreamOrDevice", "round::a"], [0, 1, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round::a"], [0, 1, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round::decimals"], [0, 1, 1, "_CPPv45roundRK5array14StreamOrDevice", "round::s"], [0, 1, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round::s"], [0, 0, 1, "_CPPv45rsqrtRK5array14StreamOrDevice", "rsqrt"], [0, 1, 1, "_CPPv45rsqrtRK5array14StreamOrDevice", "rsqrt::a"], [0, 1, 1, "_CPPv45rsqrtRK5array14StreamOrDevice", "rsqrt::s"], [0, 0, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter"], [0, 0, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::a"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::a"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::axes"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::axis"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::indices"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::indices"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::s"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::s"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::updates"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::updates"], [0, 0, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add"], [0, 0, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::a"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::a"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::axes"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::axis"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::indices"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::indices"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::s"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::s"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::updates"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::updates"], [0, 0, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max"], [0, 0, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::a"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::a"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::axes"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::axis"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::indices"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::indices"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::s"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::s"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::updates"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::updates"], [0, 0, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min"], [0, 0, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::a"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::a"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::axes"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::axis"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::indices"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::indices"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::s"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::s"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::updates"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::updates"], [0, 0, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod"], [0, 0, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::a"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::a"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::axes"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::axis"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::indices"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::indices"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::s"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::s"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::updates"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::updates"], [0, 0, 1, "_CPPv47sigmoidRK5array14StreamOrDevice", "sigmoid"], [0, 1, 1, "_CPPv47sigmoidRK5array14StreamOrDevice", "sigmoid::a"], [0, 1, 1, "_CPPv47sigmoidRK5array14StreamOrDevice", "sigmoid::s"], [0, 0, 1, "_CPPv44signRK5array14StreamOrDevice", "sign"], [0, 1, 1, "_CPPv44signRK5array14StreamOrDevice", "sign::a"], [0, 1, 1, "_CPPv44signRK5array14StreamOrDevice", "sign::s"], [0, 0, 1, "_CPPv43sinRK5array14StreamOrDevice", "sin"], [0, 1, 1, "_CPPv43sinRK5array14StreamOrDevice", "sin::a"], [0, 1, 1, "_CPPv43sinRK5array14StreamOrDevice", "sin::s"], [0, 0, 1, "_CPPv44sinhRK5array14StreamOrDevice", "sinh"], [0, 1, 1, "_CPPv44sinhRK5array14StreamOrDevice", "sinh::a"], [0, 1, 1, "_CPPv44sinhRK5array14StreamOrDevice", "sinh::s"], [0, 0, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice"], [0, 0, 1, "_CPPv45sliceRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "slice"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice::a"], [0, 1, 1, "_CPPv45sliceRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "slice::a"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice::s"], [0, 1, 1, "_CPPv45sliceRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "slice::s"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice::start"], [0, 1, 1, "_CPPv45sliceRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "slice::start"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice::stop"], [0, 1, 1, "_CPPv45sliceRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "slice::stop"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice::strides"], [0, 0, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update"], [0, 0, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::s"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::s"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::src"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::src"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::start"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::start"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::stop"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::stop"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::strides"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::update"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::update"], [0, 0, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax"], [0, 0, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax"], [0, 0, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::a"], [0, 1, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax::a"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::a"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::axes"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::axis"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::precise"], [0, 1, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax::precise"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::precise"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::s"], [0, 1, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax::s"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::s"], [0, 0, 1, "_CPPv44sortRK5array14StreamOrDevice", "sort"], [0, 0, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort"], [0, 1, 1, "_CPPv44sortRK5array14StreamOrDevice", "sort::a"], [0, 1, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort::a"], [0, 1, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort::axis"], [0, 1, 1, "_CPPv44sortRK5array14StreamOrDevice", "sort::s"], [0, 1, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort::s"], [0, 0, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "split"], [0, 0, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice", "split"], [0, 0, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split"], [0, 0, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice", "split::axis"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::axis"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "split::indices"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice", "split::indices"], [0, 1, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split::num_splits"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::num_splits"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "split::s"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice", "split::s"], [0, 1, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split::s"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::s"], [0, 0, 1, "_CPPv44sqrtRK5array14StreamOrDevice", "sqrt"], [0, 1, 1, "_CPPv44sqrtRK5array14StreamOrDevice", "sqrt::a"], [0, 1, 1, "_CPPv44sqrtRK5array14StreamOrDevice", "sqrt::s"], [0, 0, 1, "_CPPv46squareRK5array14StreamOrDevice", "square"], [0, 1, 1, "_CPPv46squareRK5array14StreamOrDevice", "square::a"], [0, 1, 1, "_CPPv46squareRK5array14StreamOrDevice", "square::s"], [0, 0, 1, "_CPPv47squeezeRK5array14StreamOrDevice", "squeeze"], [0, 0, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze"], [0, 0, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze"], [0, 1, 1, "_CPPv47squeezeRK5array14StreamOrDevice", "squeeze::a"], [0, 1, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze::a"], [0, 1, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze::a"], [0, 1, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze::axes"], [0, 1, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze::axis"], [0, 1, 1, "_CPPv47squeezeRK5array14StreamOrDevice", "squeeze::s"], [0, 1, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze::s"], [0, 1, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze::s"], [0, 0, 1, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice", "stack"], [0, 0, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice", "stack::arrays"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack::arrays"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack::axis"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice", "stack::s"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack::s"], [0, 0, 1, "_CPPv4StRK5array14StreamOrDevice", "std"], [0, 0, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std"], [0, 0, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std"], [0, 0, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std"], [0, 1, 1, "_CPPv4StRK5array14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::axes"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::axis"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::ddof"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::ddof"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::ddof"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::keepdims"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::keepdims"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::keepdims"], [0, 1, 1, "_CPPv4StRK5array14StreamOrDevice", "std::s"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::s"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::s"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::s"], [0, 0, 1, "_CPPv413stop_gradientRK5array14StreamOrDevice", "stop_gradient"], [0, 1, 1, "_CPPv413stop_gradientRK5array14StreamOrDevice", "stop_gradient::a"], [0, 1, 1, "_CPPv413stop_gradientRK5array14StreamOrDevice", "stop_gradient::s"], [0, 0, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract"], [0, 1, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract::a"], [0, 1, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract::b"], [0, 1, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract::s"], [0, 0, 1, "_CPPv43sumRK5array14StreamOrDevice", "sum"], [0, 0, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum"], [0, 0, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum"], [0, 0, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum"], [0, 1, 1, "_CPPv43sumRK5array14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::axes"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::axis"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::keepdims"], [0, 1, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum::keepdims"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::keepdims"], [0, 1, 1, "_CPPv43sumRK5array14StreamOrDevice", "sum::s"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::s"], [0, 1, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum::s"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::s"], [0, 0, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::a"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::axis1"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::axis2"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::s"], [0, 0, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take"], [0, 0, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take"], [0, 1, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take::a"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::a"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::axis"], [0, 1, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take::indices"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::indices"], [0, 1, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take::s"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::s"], [0, 0, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::a"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::axis"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::indices"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::s"], [0, 0, 1, "_CPPv43tanRK5array14StreamOrDevice", "tan"], [0, 1, 1, "_CPPv43tanRK5array14StreamOrDevice", "tan::a"], [0, 1, 1, "_CPPv43tanRK5array14StreamOrDevice", "tan::s"], [0, 0, 1, "_CPPv44tanhRK5array14StreamOrDevice", "tanh"], [0, 1, 1, "_CPPv44tanhRK5array14StreamOrDevice", "tanh::a"], [0, 1, 1, "_CPPv44tanhRK5array14StreamOrDevice", "tanh::s"], [0, 0, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot"], [0, 0, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::a"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::a"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::axes_a"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::axes_b"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::axis"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::b"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::b"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::s"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::s"], [0, 0, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile"], [0, 1, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile::arr"], [0, 1, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile::reps"], [0, 1, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile::s"], [0, 0, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk"], [0, 0, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk"], [0, 1, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk::a"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::a"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::axis"], [0, 1, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk::k"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::k"], [0, 1, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk::s"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::s"], [0, 0, 1, "_CPPv45traceRK5array14StreamOrDevice", "trace"], [0, 0, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace"], [0, 0, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace"], [0, 1, 1, "_CPPv45traceRK5array14StreamOrDevice", "trace::a"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::a"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::a"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::axis1"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::axis1"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::axis2"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::axis2"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::dtype"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::offset"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::offset"], [0, 1, 1, "_CPPv45traceRK5array14StreamOrDevice", "trace::s"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::s"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::s"], [0, 0, 1, "_CPPv49transposeRK5array14StreamOrDevice", "transpose"], [0, 0, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose"], [0, 0, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose"], [0, 1, 1, "_CPPv49transposeRK5array14StreamOrDevice", "transpose::a"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose::a"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose::a"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose::axes"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose::axes"], [0, 1, 1, "_CPPv49transposeRK5array14StreamOrDevice", "transpose::s"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose::s"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose::s"], [0, 0, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri"], [0, 0, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::k"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::m"], [0, 1, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri::n"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::n"], [0, 1, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri::s"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::s"], [0, 1, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri::type"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::type"], [0, 0, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril"], [0, 1, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril::k"], [0, 1, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril::s"], [0, 1, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril::x"], [0, 0, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu"], [0, 1, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu::k"], [0, 1, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu::s"], [0, 1, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu::x"], [0, 0, 1, "_CPPv43varRK5array14StreamOrDevice", "var"], [0, 0, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var"], [0, 0, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var"], [0, 0, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var"], [0, 1, 1, "_CPPv43varRK5array14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::axes"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::axis"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::ddof"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::ddof"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::ddof"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::keepdims"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::keepdims"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::keepdims"], [0, 1, 1, "_CPPv43varRK5array14StreamOrDevice", "var::s"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::s"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::s"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::s"], [0, 0, 1, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice", "view"], [0, 1, 1, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice", "view::a"], [0, 1, 1, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice", "view::dtype"], [0, 1, 1, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice", "view::s"], [0, 0, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::condition"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::s"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::x"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::y"], [0, 0, 1, "_CPPv45zerosRKNSt6vectorIiEE14StreamOrDevice", "zeros"], [0, 0, 1, "_CPPv45zerosRKNSt6vectorIiEE5Dtype14StreamOrDevice", "zeros"], [0, 1, 1, "_CPPv45zerosRKNSt6vectorIiEE5Dtype14StreamOrDevice", "zeros::dtype"], [0, 1, 1, "_CPPv45zerosRKNSt6vectorIiEE14StreamOrDevice", "zeros::s"], [0, 1, 1, "_CPPv45zerosRKNSt6vectorIiEE5Dtype14StreamOrDevice", "zeros::s"], [0, 1, 1, "_CPPv45zerosRKNSt6vectorIiEE14StreamOrDevice", "zeros::shape"], [0, 1, 1, "_CPPv45zerosRKNSt6vectorIiEE5Dtype14StreamOrDevice", "zeros::shape"], [0, 0, 1, "_CPPv410zeros_likeRK5array14StreamOrDevice", "zeros_like"], [0, 1, 1, "_CPPv410zeros_likeRK5array14StreamOrDevice", "zeros_like::a"], [0, 1, 1, "_CPPv410zeros_likeRK5array14StreamOrDevice", "zeros_like::s"]], "mlx.core": [[9, 3, 1, "", "Device"], [10, 3, 1, "", "Dtype"], [11, 3, 1, "", "DtypeCategory"], [306, 3, 1, "", "Stream"], [12, 5, 1, "", "abs"], [13, 5, 1, "", "add"], [14, 5, 1, "", "addmm"], [15, 5, 1, "", "all"], [16, 5, 1, "", "allclose"], [17, 5, 1, "", "any"], [18, 5, 1, "", "arange"], [19, 5, 1, "", "arccos"], [20, 5, 1, "", "arccosh"], [21, 5, 1, "", "arcsin"], [22, 5, 1, "", "arcsinh"], [23, 5, 1, "", "arctan"], [24, 5, 1, "", "arctan2"], [25, 5, 1, "", "arctanh"], [26, 5, 1, "", "argmax"], [27, 5, 1, "", "argmin"], [28, 5, 1, "", "argpartition"], [29, 5, 1, "", "argsort"], [30, 3, 1, "", "array"], [82, 5, 1, "", "array_equal"], [83, 5, 1, "", "as_strided"], [84, 5, 1, "", "atleast_1d"], [85, 5, 1, "", "atleast_2d"], [86, 5, 1, "", "atleast_3d"], [87, 5, 1, "", "bitwise_and"], [88, 5, 1, "", "bitwise_or"], [89, 5, 1, "", "bitwise_xor"], [90, 5, 1, "", "block_masked_mm"], [91, 5, 1, "", "broadcast_to"], [92, 5, 1, "", "ceil"], [93, 5, 1, "", "clip"], [94, 5, 1, "", "compile"], [95, 5, 1, "", "concatenate"], [96, 5, 1, "", "conj"], [97, 5, 1, "", "conjugate"], [98, 5, 1, "", "conv1d"], [99, 5, 1, "", "conv2d"], [100, 5, 1, "", "conv3d"], [101, 5, 1, "", "conv_general"], [102, 5, 1, "", "conv_transpose1d"], [103, 5, 1, "", "conv_transpose2d"], [104, 5, 1, "", "conv_transpose3d"], [105, 5, 1, "", "convolve"], [106, 5, 1, "", "cos"], [107, 5, 1, "", "cosh"], [108, 5, 1, "", "cummax"], [109, 5, 1, "", "cummin"], [110, 5, 1, "", "cumprod"], [111, 5, 1, "", "cumsum"], [112, 3, 1, "", "custom_function"], [113, 5, 1, "", "default_device"], [114, 5, 1, "", "default_stream"], [115, 5, 1, "", "degrees"], [116, 5, 1, "", "dequantize"], [117, 5, 1, "", "diag"], [118, 5, 1, "", "diagonal"], [119, 5, 1, "", "disable_compile"], [128, 5, 1, "", "divide"], [129, 5, 1, "", "divmod"], [130, 5, 1, "", "einsum"], [131, 5, 1, "", "einsum_path"], [132, 5, 1, "", "enable_compile"], [133, 5, 1, "", "equal"], [134, 5, 1, "", "erf"], [135, 5, 1, "", "erfinv"], [136, 5, 1, "", "eval"], [137, 5, 1, "", "exp"], [138, 5, 1, "", "expand_dims"], [139, 5, 1, "", "expm1"], [140, 5, 1, "", "eye"], [159, 5, 1, "", "flatten"], [160, 5, 1, "", "floor"], [161, 5, 1, "", "floor_divide"], [162, 5, 1, "", "full"], [163, 5, 1, "", "gather_mm"], [164, 5, 1, "", "gather_qmm"], [165, 5, 1, "", "grad"], [166, 5, 1, "", "greater"], [167, 5, 1, "", "greater_equal"], [168, 5, 1, "", "hadamard_transform"], [169, 5, 1, "", "identity"], [170, 5, 1, "", "inner"], [171, 5, 1, "", "isclose"], [172, 5, 1, "", "isfinite"], [173, 5, 1, "", "isinf"], [174, 5, 1, "", "isnan"], [175, 5, 1, "", "isneginf"], [176, 5, 1, "", "isposinf"], [177, 5, 1, "", "issubdtype"], [178, 5, 1, "", "jvp"], [179, 5, 1, "", "left_shift"], [180, 5, 1, "", "less"], [181, 5, 1, "", "less_equal"], [189, 5, 1, "", "linspace"], [190, 5, 1, "", "load"], [191, 5, 1, "", "log"], [192, 5, 1, "", "log10"], [193, 5, 1, "", "log1p"], [194, 5, 1, "", "log2"], [195, 5, 1, "", "logaddexp"], [196, 5, 1, "", "logical_and"], [197, 5, 1, "", "logical_not"], [198, 5, 1, "", "logical_or"], [199, 5, 1, "", "logsumexp"], [200, 5, 1, "", "matmul"], [201, 5, 1, "", "max"], [202, 5, 1, "", "maximum"], [203, 5, 1, "", "mean"], [204, 5, 1, "", "meshgrid"], [216, 5, 1, "", "min"], [217, 5, 1, "", "minimum"], [218, 5, 1, "", "moveaxis"], [219, 5, 1, "", "multiply"], [220, 5, 1, "", "nan_to_num"], [221, 5, 1, "", "negative"], [222, 5, 1, "", "new_stream"], [223, 5, 1, "", "not_equal"], [224, 5, 1, "", "ones"], [225, 5, 1, "", "ones_like"], [226, 5, 1, "", "outer"], [227, 5, 1, "", "pad"], [228, 5, 1, "", "partition"], [229, 5, 1, "", "power"], [230, 5, 1, "", "prod"], [231, 5, 1, "", "quantize"], [232, 5, 1, "", "quantized_matmul"], [233, 5, 1, "", "radians"], [246, 5, 1, "", "reciprocal"], [247, 5, 1, "", "remainder"], [248, 5, 1, "", "repeat"], [249, 5, 1, "", "reshape"], [250, 5, 1, "", "right_shift"], [251, 5, 1, "", "round"], [252, 5, 1, "", "rsqrt"], [253, 5, 1, "", "save"], [254, 5, 1, "", "save_gguf"], [255, 5, 1, "", "save_safetensors"], [256, 5, 1, "", "savez"], [257, 5, 1, "", "savez_compressed"], [258, 5, 1, "", "set_default_device"], [259, 5, 1, "", "set_default_stream"], [260, 5, 1, "", "sigmoid"], [261, 5, 1, "", "sign"], [262, 5, 1, "", "sin"], [263, 5, 1, "", "sinh"], [264, 5, 1, "", "softmax"], [265, 5, 1, "", "sort"], [266, 5, 1, "", "split"], [267, 5, 1, "", "sqrt"], [268, 5, 1, "", "square"], [269, 5, 1, "", "squeeze"], [270, 5, 1, "", "stack"], [271, 5, 1, "", "std"], [272, 5, 1, "", "stop_gradient"], [273, 5, 1, "", "stream"], [274, 5, 1, "", "subtract"], [275, 5, 1, "", "sum"], [276, 5, 1, "", "swapaxes"], [277, 5, 1, "", "synchronize"], [278, 5, 1, "", "take"], [279, 5, 1, "", "take_along_axis"], [280, 5, 1, "", "tan"], [281, 5, 1, "", "tanh"], [282, 5, 1, "", "tensordot"], [283, 5, 1, "", "tile"], [284, 5, 1, "", "topk"], [285, 5, 1, "", "trace"], [286, 5, 1, "", "transpose"], [287, 5, 1, "", "tri"], [288, 5, 1, "", "tril"], [289, 5, 1, "", "triu"], [290, 5, 1, "", "value_and_grad"], [291, 5, 1, "", "var"], [292, 5, 1, "", "view"], [293, 5, 1, "", "vjp"], [294, 5, 1, "", "vmap"], [295, 5, 1, "", "where"], [296, 5, 1, "", "zeros"], [297, 5, 1, "", "zeros_like"]], "mlx.core.Device": [[9, 4, 1, "", "__init__"]], "mlx.core.Dtype": [[10, 4, 1, "", "__init__"]], "mlx.core.DtypeCategory": [[11, 4, 1, "", "__init__"]], "mlx.core.Stream": [[306, 4, 1, "", "__init__"]], "mlx.core.array": [[31, 6, 1, "", "T"], [30, 4, 1, "", "__init__"], [32, 4, 1, "", "abs"], [33, 4, 1, "", "all"], [34, 4, 1, "", "any"], [35, 4, 1, "", "argmax"], [36, 4, 1, "", "argmin"], [37, 4, 1, "", "astype"], [38, 6, 1, "", "at"], [39, 4, 1, "", "conj"], [40, 4, 1, "", "cos"], [41, 4, 1, "", "cummax"], [42, 4, 1, "", "cummin"], [43, 4, 1, "", "cumprod"], [44, 4, 1, "", "cumsum"], [45, 4, 1, "", "diag"], [46, 4, 1, "", "diagonal"], [47, 6, 1, "", "dtype"], [48, 4, 1, "", "exp"], [49, 4, 1, "", "flatten"], [50, 4, 1, "", "item"], [51, 6, 1, "", "itemsize"], [52, 4, 1, "", "log"], [53, 4, 1, "", "log10"], [54, 4, 1, "", "log1p"], [55, 4, 1, "", "log2"], [56, 4, 1, "", "logsumexp"], [57, 4, 1, "", "max"], [58, 4, 1, "", "mean"], [59, 4, 1, "", "min"], [60, 4, 1, "", "moveaxis"], [61, 6, 1, "", "nbytes"], [62, 6, 1, "", "ndim"], [63, 4, 1, "", "prod"], [64, 4, 1, "", "reciprocal"], [65, 4, 1, "", "reshape"], [66, 4, 1, "", "round"], [67, 4, 1, "", "rsqrt"], [68, 6, 1, "", "shape"], [69, 4, 1, "", "sin"], [70, 6, 1, "", "size"], [71, 4, 1, "", "split"], [72, 4, 1, "", "sqrt"], [73, 4, 1, "", "square"], [74, 4, 1, "", "squeeze"], [75, 4, 1, "", "std"], [76, 4, 1, "", "sum"], [77, 4, 1, "", "swapaxes"], [78, 4, 1, "", "tolist"], [79, 4, 1, "", "transpose"], [80, 4, 1, "", "var"], [81, 4, 1, "", "view"]], "mlx.core.custom_function": [[112, 4, 1, "", "__init__"]], "mlx.core.distributed": [[120, 3, 1, "", "Group"], [121, 5, 1, "", "all_gather"], [122, 5, 1, "", "all_sum"], [123, 5, 1, "", "init"], [124, 5, 1, "", "is_available"], [125, 5, 1, "", "recv"], [126, 5, 1, "", "recv_like"], [127, 5, 1, "", "send"]], "mlx.core.distributed.Group": [[120, 4, 1, "", "__init__"]], "mlx.core.fast": [[141, 5, 1, "", "affine_quantize"], [142, 5, 1, "", "layer_norm"], [143, 5, 1, "", "metal_kernel"], [144, 5, 1, "", "rms_norm"], [145, 5, 1, "", "rope"], [146, 5, 1, "", "scaled_dot_product_attention"]], "mlx.core.fft": [[147, 5, 1, "", "fft"], [148, 5, 1, "", "fft2"], [149, 5, 1, "", "fftn"], [150, 5, 1, "", "ifft"], [151, 5, 1, "", "ifft2"], [152, 5, 1, "", "ifftn"], [153, 5, 1, "", "irfft"], [154, 5, 1, "", "irfft2"], [155, 5, 1, "", "irfftn"], [156, 5, 1, "", "rfft"], [157, 5, 1, "", "rfft2"], [158, 5, 1, "", "rfftn"]], "mlx.core.linalg": [[182, 5, 1, "", "cholesky"], [183, 5, 1, "", "cholesky_inv"], [184, 5, 1, "", "inv"], [185, 5, 1, "", "norm"], [186, 5, 1, "", "qr"], [187, 5, 1, "", "svd"], [188, 5, 1, "", "tri_inv"]], "mlx.core.metal": [[205, 5, 1, "", "clear_cache"], [206, 5, 1, "", "device_info"], [207, 5, 1, "", "get_active_memory"], [208, 5, 1, "", "get_cache_memory"], [209, 5, 1, "", "get_peak_memory"], [210, 5, 1, "", "is_available"], [211, 5, 1, "", "reset_peak_memory"], [212, 5, 1, "", "set_cache_limit"], [213, 5, 1, "", "set_memory_limit"], [214, 5, 1, "", "start_capture"], [215, 5, 1, "", "stop_capture"]], "mlx.core.random": [[234, 5, 1, "", "bernoulli"], [235, 5, 1, "", "categorical"], [236, 5, 1, "", "gumbel"], [237, 5, 1, "", "key"], [238, 5, 1, "", "laplace"], [239, 5, 1, "", "multivariate_normal"], [240, 5, 1, "", "normal"], [241, 5, 1, "", "randint"], [242, 5, 1, "", "seed"], [243, 5, 1, "", "split"], [244, 5, 1, "", "truncated_normal"], [245, 5, 1, "", "uniform"]], "mlx.nn": [[316, 3, 1, "", "ALiBi"], [317, 3, 1, "", "AvgPool1d"], [318, 3, 1, "", "AvgPool2d"], [319, 3, 1, "", "BatchNorm"], [320, 3, 1, "", "Conv1d"], [321, 3, 1, "", "Conv2d"], [322, 3, 1, "", "Conv3d"], [323, 3, 1, "", "ConvTranspose1d"], [324, 3, 1, "", "ConvTranspose2d"], [325, 3, 1, "", "ConvTranspose3d"], [326, 3, 1, "", "Dropout"], [327, 3, 1, "", "Dropout2d"], [328, 3, 1, "", "Dropout3d"], [329, 3, 1, "", "Embedding"], [330, 3, 1, "", "GELU"], [331, 3, 1, "", "GLU"], [332, 3, 1, "", "GRU"], [333, 3, 1, "", "GroupNorm"], [334, 3, 1, "", "HardShrink"], [335, 3, 1, "", "HardTanh"], [336, 3, 1, "", "Hardswish"], [337, 3, 1, "", "InstanceNorm"], [338, 3, 1, "", "LSTM"], [339, 3, 1, "", "LayerNorm"], [340, 3, 1, "", "LeakyReLU"], [341, 3, 1, "", "Linear"], [342, 3, 1, "", "MaxPool1d"], [343, 3, 1, "", "MaxPool2d"], [344, 3, 1, "", "Mish"], [437, 3, 1, "", "Module"], [365, 3, 1, "", "MultiHeadAttention"], [366, 3, 1, "", "PReLU"], [367, 3, 1, "", "QuantizedEmbedding"], [368, 3, 1, "", "QuantizedLinear"], [369, 3, 1, "", "RMSNorm"], [370, 3, 1, "", "RNN"], [371, 3, 1, "", "ReLU"], [372, 3, 1, "", "ReLU6"], [373, 3, 1, "", "RoPE"], [374, 3, 1, "", "SELU"], [375, 3, 1, "", "Sequential"], [376, 3, 1, "", "SiLU"], [377, 3, 1, "", "SinusoidalPositionalEncoding"], [378, 3, 1, "", "Softmax"], [379, 3, 1, "", "Softmin"], [380, 3, 1, "", "Softplus"], [381, 3, 1, "", "Softshrink"], [382, 3, 1, "", "Softsign"], [383, 3, 1, "", "Step"], [384, 3, 1, "", "Tanh"], [385, 3, 1, "", "Transformer"], [386, 3, 1, "", "Upsample"], [395, 3, 1, "", "elu"], [396, 3, 1, "", "gelu"], [397, 3, 1, "", "gelu_approx"], [398, 3, 1, "", "gelu_fast_approx"], [399, 3, 1, "", "glu"], [400, 3, 1, "", "hard_shrink"], [401, 3, 1, "", "hard_tanh"], [402, 3, 1, "", "hardswish"], [403, 3, 1, "", "leaky_relu"], [404, 3, 1, "", "log_sigmoid"], [405, 3, 1, "", "log_softmax"], [420, 3, 1, "", "mish"], [421, 3, 1, "", "prelu"], [298, 5, 1, "", "quantize"], [422, 3, 1, "", "relu"], [423, 3, 1, "", "relu6"], [424, 3, 1, "", "selu"], [425, 3, 1, "", "sigmoid"], [426, 3, 1, "", "silu"], [427, 3, 1, "", "softmax"], [428, 3, 1, "", "softmin"], [429, 3, 1, "", "softplus"], [430, 3, 1, "", "softshrink"], [431, 3, 1, "", "step"], [432, 3, 1, "", "tanh"], [299, 5, 1, "", "value_and_grad"]], "mlx.nn.Module": [[345, 4, 1, "", "apply"], [346, 4, 1, "", "apply_to_modules"], [347, 4, 1, "", "children"], [348, 4, 1, "", "eval"], [349, 4, 1, "", "filter_and_map"], [350, 4, 1, "", "freeze"], [351, 4, 1, "", "leaf_modules"], [352, 4, 1, "", "load_weights"], [353, 4, 1, "", "modules"], [354, 4, 1, "", "named_modules"], [355, 4, 1, "", "parameters"], [356, 4, 1, "", "save_weights"], [357, 4, 1, "", "set_dtype"], [358, 6, 1, "", "state"], [359, 4, 1, "", "train"], [360, 4, 1, "", "trainable_parameters"], [361, 6, 1, "", "training"], [362, 4, 1, "", "unfreeze"], [363, 4, 1, "", "update"], [364, 4, 1, "", "update_modules"]], "mlx.nn.init": [[387, 5, 1, "", "constant"], [388, 5, 1, "", "glorot_normal"], [389, 5, 1, "", "glorot_uniform"], [390, 5, 1, "", "he_normal"], [391, 5, 1, "", "he_uniform"], [392, 5, 1, "", "identity"], [393, 5, 1, "", "normal"], [394, 5, 1, "", "uniform"]], "mlx.nn.losses": [[406, 3, 1, "", "binary_cross_entropy"], [407, 3, 1, "", "cosine_similarity_loss"], [408, 3, 1, "", "cross_entropy"], [409, 3, 1, "", "gaussian_nll_loss"], [410, 3, 1, "", "hinge_loss"], [411, 3, 1, "", "huber_loss"], [412, 3, 1, "", "kl_div_loss"], [413, 3, 1, "", "l1_loss"], [414, 3, 1, "", "log_cosh_loss"], [415, 3, 1, "", "margin_ranking_loss"], [416, 3, 1, "", "mse_loss"], [417, 3, 1, "", "nll_loss"], [418, 3, 1, "", "smooth_l1_loss"], [419, 3, 1, "", "triplet_loss"]], "mlx.optimizers": [[440, 3, 1, "", "AdaDelta"], [441, 3, 1, "", "Adafactor"], [442, 3, 1, "", "Adagrad"], [443, 3, 1, "", "Adam"], [444, 3, 1, "", "AdamW"], [445, 3, 1, "", "Adamax"], [446, 3, 1, "", "Lion"], [459, 3, 1, "", "Optimizer"], [451, 3, 1, "", "RMSprop"], [452, 3, 1, "", "SGD"], [300, 5, 1, "", "clip_grad_norm"], [453, 5, 1, "", "cosine_decay"], [454, 5, 1, "", "exponential_decay"], [455, 5, 1, "", "join_schedules"], [456, 5, 1, "", "linear_schedule"], [457, 5, 1, "", "step_decay"]], "mlx.optimizers.Optimizer": [[447, 4, 1, "", "apply_gradients"], [448, 4, 1, "", "init"], [449, 6, 1, "", "state"], [450, 4, 1, "", "update"]], "mlx.utils": [[301, 5, 1, "", "tree_flatten"], [302, 5, 1, "", "tree_map"], [303, 5, 1, "", "tree_map_with_path"], [304, 5, 1, "", "tree_reduce"], [305, 5, 1, "", "tree_unflatten"]]}, "objnames": {"0": ["cpp", "function", "C++ function"], "1": ["cpp", "functionParam", "C++ function parameter"], "2": ["cpp", "templateParam", "C++ template parameter"], "3": ["py", "class", "Python class"], "4": ["py", "method", "Python method"], "5": ["py", "function", "Python function"], "6": ["py", "property", "Python property"]}, "objtypes": {"0": "cpp:function", "1": "cpp:functionParam", "2": "cpp:templateParam", "3": "py:class", "4": "py:method", "5": "py:function", "6": "py:property"}, "terms": {"": [0, 1, 2, 4, 5, 6, 47, 51, 62, 94, 114, 116, 141, 148, 149, 151, 152, 154, 155, 157, 158, 165, 183, 185, 187, 190, 203, 226, 231, 235, 251, 254, 255, 271, 273, 290, 291, 292, 294, 299, 315, 318, 332, 338, 343, 349, 350, 352, 356, 357, 358, 362, 370, 439, 448, 449, 461, 464, 466, 468, 469, 470, 471, 472], "0": [0, 1, 2, 4, 5, 6, 8, 9, 14, 18, 38, 45, 46, 49, 66, 71, 75, 80, 83, 95, 98, 99, 100, 101, 102, 103, 104, 117, 118, 140, 143, 146, 159, 163, 165, 184, 185, 186, 188, 205, 212, 220, 227, 234, 238, 240, 245, 248, 251, 266, 270, 271, 285, 287, 288, 289, 290, 291, 294, 300, 301, 303, 304, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 333, 334, 337, 339, 340, 342, 343, 366, 371, 373, 377, 381, 383, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 400, 401, 402, 403, 406, 408, 410, 411, 415, 418, 419, 421, 422, 423, 424, 430, 431, 434, 437, 440, 441, 443, 444, 445, 446, 448, 451, 452, 453, 454, 455, 456, 457, 461, 464, 465, 466, 467, 468, 469, 470, 471], "00005": 4, "0001": 377, "0005": 397, "001": 441, "00364": 4, "01": [4, 340, 403, 444], "0137595": 390, "015": 398, "0184009": 391, "02264": 389, "025": 466, "02765": 390, "0300242": 391, "044715": [330, 397], "0485873": 408, "05": [16, 171, 319, 333, 337, 339, 369], "0507": 424, "05202": 5, "06": [409, 419, 440], "0638": 415, "06450": 339, "0645099": 393, "06561": 454, "06675": 446, "07467": 369, "08": [16, 171, 407, 442, 443, 444, 445, 451], "08022": 337, "081": 457, "08415": 398, "08494": 333, "08619": 391, "08681": [344, 420], "09864": 5, "0999938": 455, "0999961": 453, "0f": 0, "1": [0, 1, 2, 3, 5, 6, 11, 14, 18, 28, 29, 38, 46, 49, 98, 99, 100, 101, 102, 103, 104, 117, 118, 139, 143, 146, 147, 148, 150, 151, 153, 154, 155, 156, 157, 158, 159, 168, 170, 177, 183, 185, 186, 200, 204, 213, 226, 228, 231, 235, 238, 239, 240, 245, 260, 265, 278, 284, 285, 290, 300, 303, 304, 308, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 337, 338, 339, 341, 342, 343, 366, 369, 370, 373, 377, 383, 386, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 417, 418, 419, 424, 425, 427, 428, 429, 431, 434, 437, 439, 440, 441, 442, 443, 444, 445, 446, 448, 451, 452, 453, 454, 455, 456, 457, 464, 465, 466, 467, 469, 470, 471, 472], "10": [0, 3, 5, 6, 192, 251, 256, 302, 315, 352, 434, 455, 457, 464, 465, 467], "100": [2, 4, 5, 406, 456, 464, 466, 468, 472], "1000": [453, 464], "10000": 373, "101": 456, "1024": [1, 5], "105361": 406, "109": 2, "10_000": 4, "10x": 446, "11": 185, "114": 2, "12": [5, 168, 455], "1212": 440, "12451": 389, "128": [256, 315], "13": 8, "14": 8, "15": [1, 8, 185, 304, 464], "150594": 388, "15268": 390, "16": [1, 143, 308, 317, 337, 342, 345, 437], "1606": 398, "1607": [337, 339], "16384": 168, "16506": 391, "17": 8, "177208": 390, "1803": 333, "1908": [344, 420], "1910": 369, "191107": 388, "1985": 185, "1_000": 4, "1d": [0, 98, 102, 105, 254, 279], "1e": [0, 4, 6, 16, 171, 319, 333, 337, 339, 340, 369, 407, 409, 419, 439, 440, 441, 442, 443, 444, 445, 448, 451, 453, 454, 455, 456, 457], "1e3": 464, "1st": 231, "2": [0, 1, 2, 4, 5, 6, 38, 99, 103, 117, 118, 134, 148, 151, 153, 154, 155, 156, 157, 158, 159, 168, 177, 182, 183, 184, 185, 186, 187, 188, 194, 200, 231, 239, 243, 282, 285, 287, 288, 289, 300, 304, 308, 315, 317, 318, 321, 324, 330, 340, 342, 343, 369, 377, 386, 387, 388, 389, 390, 391, 392, 393, 394, 397, 408, 409, 411, 418, 419, 434, 437, 439, 440, 442, 443, 444, 448, 451, 464, 465, 466, 467, 468, 469, 470, 471, 472], "20": [168, 185], "200": [5, 455], "2002": 5, "2011": 442, "2012": [440, 451], "2015": [327, 443, 445], "2019": [5, 444], "2020": 5, "2021": 5, "20397": 406, "20_000": 5, "21": [5, 457], "2104": 5, "223144": 406, "223404": 389, "225": 185, "225763": 415, "2302": 446, "23607": [185, 186], "24": 8, "24264": 185, "247": 5, "25": [366, 386], "25211": 390, "256": [1, 2, 6, 143], "256995": 415, "28": 168, "2d": [0, 99, 103, 118, 231, 319, 327], "2nd": 231, "2x": 469, "3": [0, 1, 2, 5, 8, 100, 104, 159, 177, 185, 186, 300, 304, 322, 325, 330, 386, 389, 391, 397, 402, 441, 446, 461, 464, 467, 469, 470], "30": 441, "3118": 469, "32": [1, 5, 6, 90, 231, 232, 308, 318, 343, 369, 464], "330": 5, "33333": 386, "348587": 408, "363207": 388, "36788": 464, "379159": 389, "380709": 393, "39": 5, "390": 466, "3d": [0, 2, 100, 104, 319, 328, 386], "3f": [2, 6, 464], "3x": 2, "4": [0, 1, 2, 5, 116, 141, 143, 159, 164, 185, 231, 232, 256, 298, 304, 308, 317, 318, 319, 337, 342, 343, 367, 368, 385, 386, 388, 389, 390, 406, 464, 465, 467, 470, 472], "4096": [464, 466, 472], "40x": 1, "41421": 185, "417497": 394, "42": 305, "437": 5, "44": 5, "447214": 186, "458835": 390, "475": 5, "48095": 388, "4d": [1, 386], "4m": 1, "5": [0, 1, 2, 4, 5, 8, 185, 213, 234, 304, 317, 319, 326, 327, 328, 330, 334, 337, 342, 381, 386, 387, 390, 391, 397, 400, 418, 430, 434, 439, 451, 453, 454, 464, 466, 467], "50": [0, 189], "500": [5, 472], "5000": 2, "510826": 406, "512": [2, 3, 5, 385, 472], "534422": 393, "539245": 406, "53947": 388, "55": 1, "5701": 440, "573409": 415, "57771": 186, "579": 5, "5f": 4, "6": [1, 2, 5, 185, 256, 372, 385, 389, 397, 398, 402, 409, 419, 423, 451, 464, 467, 470], "61278": 388, "617261": 394, "628": 5, "633": 5, "64": [0, 1, 90, 116, 141, 164, 231, 232, 298, 308, 367, 368], "64331": 391, "666329": 391, "66667": 386, "67326": 424, "676": 1, "690": 5, "6967": 390, "7": [2, 5, 185, 231, 467], "702": [330, 398], "71828": 464, "74166": 185, "74597": 185, "75": 386, "75596": 415, "75787": 390, "765166": 415, "773433": 415, "776856": 389, "793615": 391, "79854": 391, "7b": 5, "7m": 1, "8": [0, 1, 2, 5, 8, 185, 231, 308, 318, 337, 343, 385, 407, 440, 441, 442, 443, 444, 445, 451, 464, 467, 470, 472], "8192": [5, 168], "84804": 185, "863726": 394, "883935": 394, "890597": 389, "894427": 186, "89613": 388, "8gb": 5, "8x": 1, "9": [185, 408, 440, 443, 444, 445, 446, 448, 454, 457, 469], "90041": 389, "912766": 389, "916291": 406, "95": 6, "982273": 393, "99": [446, 451], "995016": 388, "999": [443, 444, 445], "A": [0, 2, 5, 7, 8, 9, 68, 82, 94, 142, 143, 144, 146, 165, 177, 178, 183, 185, 186, 187, 190, 199, 200, 201, 206, 216, 231, 234, 235, 236, 238, 239, 240, 241, 244, 245, 266, 270, 273, 290, 293, 294, 298, 299, 300, 301, 302, 303, 304, 305, 306, 315, 319, 327, 332, 333, 337, 339, 349, 353, 354, 357, 363, 364, 369, 375, 377, 385, 388, 389, 391, 398, 419, 420, 437, 439, 443, 445, 447, 448, 450, 455, 464, 465, 466, 468, 469], "AS": 163, "And": [5, 386], "As": [6, 38, 278, 315, 464], "At": 93, "But": 472, "By": [5, 298, 357, 406, 466, 469], "For": [0, 1, 2, 5, 8, 38, 146, 163, 177, 185, 231, 305, 315, 319, 327, 330, 345, 350, 359, 362, 368, 373, 377, 386, 388, 389, 390, 391, 406, 434, 439, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472], "If": [0, 1, 2, 5, 8, 15, 16, 17, 18, 26, 27, 28, 29, 78, 82, 83, 93, 95, 105, 108, 109, 110, 111, 117, 118, 121, 122, 123, 125, 126, 127, 136, 142, 145, 156, 157, 158, 161, 162, 165, 171, 182, 183, 185, 190, 199, 200, 201, 203, 204, 212, 213, 216, 220, 224, 227, 228, 230, 235, 239, 248, 264, 265, 266, 271, 275, 277, 278, 279, 282, 284, 285, 290, 291, 294, 296, 298, 302, 304, 319, 320, 321, 322, 323, 324, 325, 333, 339, 341, 350, 352, 362, 368, 370, 373, 375, 377, 386, 406, 408, 419, 441, 464, 465, 466, 468, 471, 472, 473], "In": [0, 1, 2, 5, 6, 38, 200, 231, 302, 315, 327, 333, 437, 440, 442, 443, 445, 446, 447, 463, 464, 465, 466, 468, 471, 472], "It": [2, 5, 8, 126, 165, 259, 290, 300, 304, 315, 364, 368, 447, 459, 469, 471], "Its": 315, "No": [2, 5], "Not": [94, 223, 464], "ON": [3, 8], "Of": 466, "On": [1, 464, 466, 468], "One": [147, 150, 156, 227, 252, 464, 466], "THE": 8, "That": 5, "The": [0, 1, 2, 3, 5, 6, 7, 8, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 37, 47, 51, 61, 62, 68, 78, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 115, 116, 117, 118, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 208, 209, 212, 213, 214, 216, 217, 218, 219, 221, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 254, 255, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 308, 310, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 337, 338, 339, 341, 342, 343, 345, 346, 350, 352, 356, 357, 358, 359, 362, 363, 364, 365, 367, 368, 369, 370, 373, 375, 377, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 399, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 431, 434, 437, 439, 440, 441, 442, 443, 444, 445, 446, 449, 451, 452, 453, 456, 459, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473], "Then": [4, 8], "There": [1, 2, 315, 386, 464], "These": [1, 2, 94, 279, 408, 472], "To": [0, 2, 3, 4, 5, 6, 8, 212, 315, 434, 439, 464, 465, 466, 470], "With": 2, "_": [1, 3, 4, 5, 303, 315, 453, 454, 455, 456, 457, 461, 464, 468, 472], "__call__": [1, 5, 6, 315, 437], "__init__": [2, 5, 6, 9, 10, 11, 30, 112, 120, 306, 315, 437], "__main__": [2, 5], "__name__": [2, 5], "_a": 2, "_ext": 2, "_f": 185, "_in": [388, 389], "_out": [388, 389], "_p": 419, "_size": [317, 318, 342, 343], "_val": 401, "a1": 163, "a2": 163, "a_": 185, "a_max": [0, 93], "a_min": [0, 93], "a_ndim": 1, "a_shap": 1, "a_strid": 1, "a_view": 469, "ab": [0, 16, 171, 185, 290, 333, 337, 339, 344, 369, 398, 420, 464], "abil": 465, "abl": [2, 231], "about": [1, 2, 5, 6, 131, 206, 468, 472], "abov": [1, 2, 5, 231, 288, 315, 386, 444, 465, 466, 467, 468, 472], "absolut": [0, 12, 16, 171, 397, 398, 418], "acc": 304, "acceler": [2, 319], "access": [0, 5, 50, 315, 437, 448, 465, 468, 472], "accord": [0, 236, 295, 298, 365, 388, 389, 390, 391], "accordingli": 2, "accross": 8, "accumul": [304, 369], "accuraci": 6, "accustom": 5, "achiev": [315, 465], "across": [1, 2, 333, 465], "act": [2, 414], "action": 315, "activ": [2, 8, 207, 327, 383, 385, 400, 420, 430, 431, 433, 464], "actual": [5, 18, 352, 437, 468], "ad": [0, 1, 2, 4, 8, 142, 337, 437, 440, 441, 442, 443, 444, 445, 451, 465, 468, 471], "adadelta": 439, "adafactor": 439, "adagrad": 439, "adam": [439, 445, 446, 455, 456], "adamax": 439, "adamw": [439, 446], "adapt": [440, 441, 442, 465], "add": [0, 1, 2, 3, 5, 14, 38, 138, 195, 227, 231, 320, 321, 322, 323, 324, 325, 466, 472], "add_argu": 5, "add_depend": 2, "add_librari": 2, "addit": [0, 2, 5, 8, 13, 14, 142, 144, 146, 190, 319, 333, 339, 365, 369, 437, 466], "addmm": 0, "address": 2, "adjac": 327, "advanc": [5, 464], "advantag": 472, "advis": 469, "affin": [319, 333, 337, 339, 341, 368], "after": [2, 5, 6, 28, 159, 161, 164, 205, 228, 231, 319, 333, 339, 345, 346, 350, 352, 359, 362, 363, 364, 365, 385, 418, 464, 472], "after_1": 227, "after_2": 227, "after_i": 227, "after_n": 227, "afternoon": 5, "again": [5, 8, 315, 464], "against": 0, "aggreg": 365, "ago": 5, "ai": 112, "ainv": [184, 188], "albeit": 472, "algebra": 7, "algorithm": [386, 446], "alia": [96, 97, 330], "alibi": 315, "align": [183, 231, 318, 332, 338, 343], "align_corn": 386, "all": [0, 1, 2, 3, 6, 8, 16, 28, 38, 84, 85, 86, 94, 99, 100, 101, 103, 104, 112, 121, 122, 123, 140, 149, 152, 155, 158, 163, 164, 187, 200, 227, 228, 269, 298, 315, 345, 346, 350, 353, 354, 355, 360, 362, 365, 377, 385, 386, 434, 437, 459, 461, 464, 467, 468, 470, 473], "all_avg": 465, "all_reduce_grad": 465, "all_sum": 465, "allclos": [0, 1, 143], "alloc": [2, 208, 212, 213, 437], "allow": [0, 1, 2, 177, 300, 315, 364, 437, 459, 465, 467, 470], "almost": 5, "alon": [2, 469], "along": [0, 2, 26, 27, 94, 95, 108, 109, 110, 111, 121, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 163, 164, 168, 185, 248, 264, 266, 270, 278, 279, 282, 283, 284, 285, 292, 315, 331, 370, 399], "alpha": [0, 2, 14, 231, 395, 419, 421, 424, 444, 451], "alpha_": 2, "alreadi": [2, 3, 5, 465], "also": [0, 1, 2, 5, 6, 7, 8, 11, 13, 87, 88, 89, 119, 128, 129, 133, 149, 152, 155, 158, 166, 167, 179, 180, 181, 195, 202, 217, 219, 223, 229, 231, 247, 250, 274, 298, 299, 310, 315, 349, 363, 365, 367, 368, 376, 396, 424, 426, 433, 439, 464, 465, 466, 467, 468, 469, 470, 473], "altern": 461, "alwai": [1, 83, 207, 301, 466], "am": 5, "among": 2, "amount": [5, 209, 317, 342], "amus": 5, "an": [0, 1, 2, 3, 5, 6, 8, 10, 15, 17, 30, 84, 85, 86, 91, 98, 99, 100, 101, 102, 103, 104, 120, 125, 126, 127, 136, 140, 142, 146, 159, 162, 169, 172, 182, 185, 190, 213, 218, 224, 225, 227, 230, 231, 232, 248, 249, 251, 266, 269, 276, 278, 279, 282, 283, 287, 294, 296, 297, 301, 302, 303, 304, 315, 317, 318, 326, 330, 333, 338, 339, 341, 342, 343, 345, 365, 366, 368, 370, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 397, 421, 434, 439, 440, 450, 454, 459, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473], "anaconda": 465, "anchor": 419, "angl": [115, 233, 340], "angular": [145, 373], "ani": [0, 1, 2, 5, 7, 18, 94, 301, 302, 303, 304, 305, 315, 330, 345, 346, 349, 358, 368, 385, 386, 434, 456, 463, 464, 466, 468, 470, 471, 472], "anonym": 464, "anoth": [0, 93, 177, 200, 274, 295, 308, 315, 345, 464, 466, 467, 472], "anwywher": 8, "anyhow": 5, "anymor": 5, "anyth": [5, 290, 468], "anytim": 468, "api": [1, 2, 330, 465, 466], "app": 8, "append": [5, 200, 464, 468], "appl": [2, 5, 7, 8, 472], "appli": [0, 38, 145, 146, 163, 187, 302, 303, 304, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 330, 331, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 346, 359, 366, 368, 369, 370, 371, 372, 374, 376, 378, 379, 380, 381, 382, 383, 384, 386, 395, 396, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 447, 450, 456, 459, 464, 465], "applic": [3, 8], "apply_fn": 346, "apply_gradi": 439, "apply_to_modul": [315, 350], "approach": [414, 466], "appropri": [2, 464], "approx": 330, "approxim": [16, 330, 396, 397, 398], "ar": [0, 1, 2, 4, 5, 6, 7, 8, 16, 18, 82, 90, 91, 93, 94, 101, 105, 112, 118, 125, 126, 136, 140, 143, 148, 149, 151, 152, 154, 155, 157, 158, 159, 164, 165, 171, 172, 173, 174, 175, 176, 177, 178, 185, 186, 190, 200, 213, 226, 227, 228, 231, 232, 234, 235, 236, 241, 244, 245, 256, 257, 269, 270, 278, 290, 293, 294, 298, 301, 302, 308, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 333, 337, 339, 341, 352, 365, 368, 386, 406, 408, 409, 433, 437, 439, 446, 448, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472], "arang": [0, 1, 185, 308, 386, 467, 469], "arbitrari": [301, 437], "arbitrarili": [1, 94, 315, 463, 466, 470], "arc": 0, "arcco": 0, "arccosh": 0, "architectur": [5, 8, 206, 315, 364, 472], "archiv": 471, "arcsin": 0, "arcsinh": 0, "arctan": 0, "arctan2": 0, "arctanh": 0, "arg": [2, 5, 9, 10, 11, 30, 112, 120, 136, 256, 257, 306], "arg1": 177, "arg2": 177, "argmax": [0, 6], "argmin": 0, "argnam": [165, 290], "argnum": [2, 165, 290, 466], "argpars": 5, "argpartit": 0, "argsort": 0, "argument": [1, 31, 65, 79, 94, 136, 165, 290, 302, 303, 304, 315, 386, 461, 465, 466, 471, 472, 473], "argumentpars": 5, "ari": [84, 85, 86], "aris": 469, "arm": 8, "arm64": 8, "around": 5, "arr": [0, 253, 467], "arr_0": 471, "arrai": [0, 1, 2, 5, 6, 7, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 115, 116, 117, 118, 121, 122, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 315, 319, 338, 345, 352, 355, 360, 366, 386, 387, 388, 389, 390, 391, 392, 393, 394, 399, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 431, 434, 437, 440, 441, 442, 443, 444, 445, 446, 451, 452, 453, 454, 455, 456, 457, 464, 465, 466, 468, 469, 470, 472], "array_equ": [0, 16, 171], "arrayfir": 7, "arxiv": [5, 333, 337, 339, 344, 369, 398, 420, 440, 446], "as_strid": 0, "ask": [5, 465], "assert": [1, 2, 143], "assign": [0, 2, 38, 437], "associ": [2, 256, 257, 468], "assum": [0, 2, 5, 90, 186, 302, 315, 317, 318, 333, 342, 343], "astyp": [0, 1, 2, 5, 143, 345, 469], "atleast": 0, "atleast_1d": 0, "atleast_2d": 0, "atleast_3d": 0, "atol": [0, 16, 171], "atom": [1, 143], "atomic_fetch_add_explicit": 1, "atomic_output": [1, 143], "attach": 2, "attempt": 94, "attend": 365, "attent": [146, 350, 365, 377, 385], "attention_norm": 5, "attribut": [1, 9, 10, 11, 30, 306, 358, 437, 459], "audio": 386, "auto": [0, 2, 8], "autom": 466, "automat": [1, 2, 7, 143, 190, 465, 470, 471, 472], "autoregress": 5, "avail": [2, 4, 5, 6, 8, 10, 124, 210, 310, 472], "averag": [317, 318, 440, 441, 443, 444, 445, 465], "avgpool1d": 315, "avgpool2d": 315, "avoid": [1, 2, 357, 464], "awai": [2, 5], "awar": [464, 468], "ax": [0, 2, 15, 17, 26, 27, 79, 112, 138, 148, 149, 151, 152, 154, 155, 157, 158, 159, 170, 185, 199, 201, 203, 216, 227, 230, 264, 269, 271, 275, 276, 282, 286, 291, 466], "axes_a": 0, "axes_b": 0, "axi": [0, 2, 5, 6, 15, 17, 26, 27, 28, 29, 33, 34, 35, 36, 41, 42, 43, 44, 56, 57, 58, 59, 63, 71, 74, 75, 76, 80, 95, 108, 109, 110, 111, 118, 121, 138, 142, 144, 147, 150, 153, 154, 155, 156, 157, 158, 159, 168, 185, 199, 201, 203, 216, 218, 227, 228, 230, 235, 248, 264, 265, 266, 269, 270, 271, 275, 276, 278, 279, 283, 284, 285, 286, 291, 292, 294, 317, 318, 331, 342, 343, 370, 399, 405, 407, 408, 412, 417, 419, 427, 428, 467], "axis1": [0, 46, 77, 118, 276, 285], "axis2": [0, 46, 77, 118, 276, 285], "axpbi": 2, "axpby_": 2, "axpby_gener": 2, "axpby_general_": 2, "axpby_impl": 2, "axpby_impl_acceler": 2, "b": [0, 1, 2, 3, 5, 13, 14, 16, 24, 82, 87, 88, 89, 90, 128, 129, 133, 143, 161, 163, 166, 167, 170, 171, 179, 180, 181, 185, 195, 196, 198, 200, 202, 217, 219, 223, 226, 229, 231, 238, 247, 250, 274, 282, 290, 303, 304, 331, 341, 370, 386, 399, 466, 467, 468, 469, 470, 471, 472], "b1": 163, "b2": 163, "b_": [332, 338], "b_stride": 1, "ba": [443, 445], "back": [5, 112, 210, 469], "backend": [1, 8, 123, 124], "backward": [1, 464, 466], "bad": 468, "balanc": 414, "baltimor": 185, "bandwidth": [464, 465], "bar": 465, "base": [0, 2, 145, 185, 192, 194, 229, 373, 385, 437, 439, 445, 459, 461, 464, 467], "base_idx": 1, "basi": 459, "basic": [4, 251, 466], "batch": [5, 14, 90, 163, 164, 200, 239, 319, 320, 321, 322, 323, 324, 325, 327, 328, 332, 338, 365, 370, 386, 468], "batch_idx": 1, "batch_iter": [6, 439], "batch_siz": [6, 439], "batchnorm": 315, "becaus": [5, 207, 315, 468], "been": [0, 2, 5, 208, 468], "befor": [1, 2, 5, 8, 28, 143, 228, 349, 385, 448, 465, 467, 468], "before_1": 227, "before_2": 227, "before_i": 227, "before_n": 227, "beforehand": 226, "begin": [83, 183, 209, 231, 318, 332, 338, 343, 383, 400, 411, 418, 424, 430, 431], "behav": 112, "behavior": [239, 414, 467, 468], "behaviour": [112, 182, 183], "behind": 466, "being": [272, 315], "bell": 2, "below": [2, 8, 185, 287, 289, 308, 386, 468], "bench": 2, "benchmark": [2, 464], "benefici": [327, 328, 468], "best": 465, "beta": [0, 2, 14, 116, 141, 231, 319, 333, 337, 339, 418, 439, 443, 444, 445, 446], "beta_": 2, "beta_1": [441, 443, 444, 445, 446], "beta_2": [443, 444, 445, 446], "better": [466, 472], "between": [0, 2, 7, 93, 159, 385, 407, 410, 411, 414, 455, 465, 468, 469, 472], "beyond": [453, 456], "bfloat16": [2, 11, 168, 308, 469], "bfloat16_t": 2, "bia": [5, 116, 141, 142, 164, 231, 232, 302, 315, 320, 321, 322, 323, 324, 325, 332, 338, 339, 341, 350, 352, 362, 365, 368, 370, 443, 444, 445, 448, 466], "bias": [0, 116, 141, 164, 231, 232, 332, 338, 350, 362, 365], "bicub": 386, "big": [1, 464], "bigger": [5, 441], "bilinear": [1, 386], "binari": [190, 253, 254, 255, 256, 257, 292, 383, 406, 431, 464], "binary_cross_entropi": [315, 464], "bit": [0, 116, 141, 164, 179, 231, 232, 250, 298, 308, 345, 367, 368, 369], "bitwis": [0, 87, 88, 89, 179, 250], "bitwise_and": 0, "bitwise_or": 0, "bitwise_xor": 0, "block": [0, 2, 5, 90, 385], "block_masked_mm": 0, "block_siz": [0, 90], "bn": 319, "bodi": [1, 143], "bool": [0, 1, 2, 15, 16, 17, 26, 27, 33, 34, 35, 36, 41, 42, 43, 44, 56, 57, 58, 59, 63, 75, 76, 78, 80, 82, 94, 101, 108, 109, 110, 111, 123, 124, 143, 145, 164, 171, 177, 182, 183, 185, 188, 190, 199, 201, 203, 204, 210, 213, 216, 230, 232, 271, 275, 291, 319, 320, 321, 322, 323, 324, 325, 332, 333, 337, 338, 339, 341, 345, 349, 350, 352, 357, 359, 362, 365, 368, 370, 373, 377, 385, 386, 406, 409, 441, 452], "bool_": [11, 308], "boolean": [0, 16, 82, 171, 172, 173, 174, 175, 176, 177, 196, 197, 198, 308, 361, 467], "both": [1, 2, 13, 87, 88, 89, 128, 129, 133, 166, 167, 177, 179, 180, 181, 185, 195, 202, 217, 219, 223, 229, 235, 247, 250, 274, 298, 317, 318, 337, 338, 342, 343, 439, 464, 465, 466, 470, 472], "bottom": 386, "bound": [0, 241, 244, 245, 330, 394, 464, 467, 472], "boundari": [11, 455], "bracket": 5, "brain": 308, "break": 469, "bregler": 327, "broadcast": [0, 2, 13, 16, 87, 88, 89, 91, 93, 128, 129, 133, 162, 166, 167, 171, 179, 180, 181, 195, 200, 202, 217, 219, 223, 229, 234, 235, 239, 244, 245, 247, 250, 274, 279, 295, 365], "broadcast_arrai": [0, 2], "broadcast_to": 0, "broadcasted_input": 2, "brought": 7, "btl_tcp_link": 465, "buffer": [1, 2, 207, 469], "bui": 5, "build": [3, 5, 7, 390, 437, 464], "build_ext": [2, 8], "build_shared_lib": [2, 8], "built": [1, 2, 8, 468], "bundl": 5, "byte": [51, 61, 207, 208, 209, 212, 213, 308], "c": [0, 1, 2, 5, 14, 185, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 337, 338, 342, 343, 469, 470, 472], "c_": [338, 446], "c_in": [98, 99, 100, 101, 102, 103, 104], "c_j": [317, 318, 342, 343], "c_out": [98, 99, 100, 101, 102, 103, 104], "c_pad": 1, "c_t": [338, 446], "cach": [5, 8, 205, 207, 208, 212, 464], "cahc": 8, "calcul": [185, 406, 409, 415, 441], "call": [2, 3, 5, 6, 31, 126, 161, 205, 209, 315, 329, 350, 362, 367, 375, 437, 439, 448, 464, 465, 466, 468], "callabl": [94, 112, 143, 165, 178, 290, 293, 294, 298, 299, 301, 302, 303, 304, 345, 346, 349, 357, 370, 375, 385, 387, 388, 389, 390, 391, 392, 393, 394, 440, 441, 442, 443, 444, 445, 446, 451, 452, 453, 454, 455, 456, 457], "can": [1, 2, 3, 5, 7, 8, 13, 18, 65, 79, 83, 87, 88, 89, 94, 118, 119, 120, 128, 129, 133, 136, 166, 167, 179, 180, 181, 185, 195, 202, 217, 219, 223, 229, 234, 235, 241, 244, 245, 247, 250, 254, 274, 285, 290, 304, 315, 318, 329, 330, 343, 349, 362, 367, 375, 386, 408, 434, 437, 439, 447, 448, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473], "cannot": [5, 93, 467, 469], "captur": [2, 3, 94, 214, 215, 315, 464], "care": [5, 468], "carri": 2, "cartesian": 204, "case": [2, 5, 121, 122, 123, 125, 126, 127, 149, 152, 153, 155, 156, 157, 158, 159, 182, 183, 184, 186, 187, 188, 200, 249, 269, 318, 327, 343, 383, 400, 418, 424, 430, 431, 447, 448, 464, 466, 470, 471, 472, 473], "cast": [2, 37, 156, 157, 158, 190, 345, 357, 469], "caster": 2, "categor": 5, "categori": [11, 177, 308], "catlas_saxpbi": 2, "caus": [315, 464, 468], "causal": 5, "caution": 83, "cd": [3, 8], "cdf": [236, 330, 396], "cdot": [398, 407, 410, 426], "ceil": 0, "ceildiv": 1, "cell": 338, "certain": [2, 359, 464], "chang": [83, 94, 259, 292, 363, 368, 386, 411, 418, 464, 469], "channel": [1, 98, 99, 100, 101, 102, 103, 104, 319, 320, 321, 322, 323, 324, 325, 327, 328], "channel_idx": 1, "charact": 301, "check": [0, 2, 8, 82, 124, 177, 210, 352, 466, 467], "checklist": 465, "checkout": [3, 464], "checkpoint": [385, 439], "chekpoint": 385, "chen": 446, "child": 364, "children": 315, "chip": 8, "choleski": 183, "choos": [5, 145, 373], "chosen": 131, "clamp": 159, "clang": 8, "clariti": 466, "class": [2, 5, 6, 9, 10, 11, 30, 112, 120, 306, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 437, 440, 441, 442, 443, 444, 445, 446, 451, 452, 459], "class_pred": 298, "classif": [390, 391], "classifi": 6, "classmethod": [367, 368], "clear": 205, "click": 8, "clip": [0, 300, 406, 441], "clip_threshold": 441, "clipped_grad": 300, "clone": 8, "close": [4, 7, 8, 16, 171], "closer": 302, "cmake": [3, 8], "cmake_arg": 3, "cmake_build_parallel_level": 8, "cmake_build_typ": 8, "cmake_current_list_dir": 2, "cmake_host_system_processor": 8, "cmake_library_output_directori": 2, "cmakebuild": 2, "cmakeextens": 2, "cmakelist": 2, "cmdclass": 2, "co": [0, 2, 112, 377, 466], "code": [1, 143, 464, 465, 468], "coeffici": [2, 440, 441, 443, 444, 445, 446], "col": 287, "col_contigu": 2, "cold": 8, "collect": [2, 302, 303, 463], "column": [2, 140, 169, 231], "com": [8, 465], "combin": [5, 187, 304], "come": [2, 5, 465, 466], "command": [2, 3, 8, 465], "command_buff": 2, "common": [2, 439, 464, 468], "commonli": [6, 363, 434, 464], "commun": [7, 120, 123, 124], "compar": [2, 82, 464], "comparison": [16, 133, 166, 167, 180, 181, 223], "compat": [5, 235, 239, 330, 471], "compil": [0, 3, 7, 8, 119, 132, 143, 465, 466, 468], "compiled_fun": 464, "compiled_grad_fn": 464, "complet": [4, 5, 8, 213, 363, 364, 466, 472], "complex": [2, 96, 97, 154, 155, 156, 157, 158, 301, 308, 315, 364, 464, 466], "complex64": [2, 11, 308], "complex64_t": 2, "complexflo": 11, "compon": [2, 5], "compos": [7, 315, 464, 466, 470], "composit": 470, "compress": 257, "compromis": 5, "comput": [0, 1, 2, 4, 5, 6, 7, 8, 108, 109, 110, 111, 112, 116, 131, 139, 141, 145, 165, 178, 182, 183, 184, 185, 188, 195, 203, 226, 231, 247, 264, 271, 272, 282, 290, 291, 293, 299, 315, 319, 332, 333, 337, 338, 339, 350, 363, 368, 369, 373, 385, 388, 389, 390, 391, 397, 398, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 439, 440, 441, 443, 444, 445, 446, 450, 464, 465, 466, 470, 472], "computation": 468, "compute_encod": 2, "concaten": [0, 5, 121], "concept": 437, "concis": 5, "concret": [2, 332, 338, 341, 370, 468, 472], "conda": [8, 465], "condit": [0, 2, 295, 472], "config": [2, 465], "configu": 439, "configur": [116, 141, 465], "confirm": 465, "confus": 6, "conj": 97, "conjug": [0, 96], "connect": 465, "consecut": [145, 231, 373], "consequ": 5, "consid": [5, 16, 82, 171, 301, 302, 303, 333, 463], "consider": 464, "const": [0, 1, 2, 409], "constant": [0, 2, 5, 8, 142, 144, 227, 315, 319, 333, 339, 369, 409, 419, 451, 453, 464, 469], "constant_valu": 227, "constitut": 302, "construct": [0, 2, 6, 45, 117, 162, 224, 283, 296], "consum": 468, "contain": [2, 5, 8, 28, 29, 68, 94, 118, 131, 153, 154, 155, 163, 164, 185, 196, 197, 198, 231, 266, 295, 300, 315, 349, 351, 352, 358, 385, 415, 434, 437, 464, 465, 466], "content": [8, 349, 464], "context": 273, "contigu": [1, 2, 83, 143], "continu": 466, "contract": [0, 131], "contrast": 444, "contribut": 2, "contriv": [466, 472], "control": [0, 340, 461, 468], "conv": 105, "conv1d": [0, 315], "conv2d": [0, 315], "conv3d": [0, 315], "conv_gener": 0, "conv_transpose1d": 0, "conv_transpose2d": 0, "conv_transpose3d": 0, "conveni": [1, 2, 6, 177], "convent": [18, 105, 130, 131, 386, 444], "convers": 7, "convert": [0, 1, 2, 78, 84, 85, 86, 115, 159, 233, 367, 368, 468, 469, 470], "convolut": [0, 98, 99, 100, 101, 102, 103, 104, 105, 320, 321, 322, 323, 324, 325, 327, 328], "convolv": [98, 99, 100, 101, 102, 103, 104], "convtranspose1d": 315, "convtranspose2d": 315, "convtranspose3d": 315, "coordin": [0, 204], "copi": [0, 1, 2, 5, 7, 228, 265, 469], "copy_inplac": 2, "copytyp": 2, "core": [1, 2, 3, 4, 5, 6, 298, 315, 317, 318, 319, 337, 342, 343, 352, 355, 357, 360, 386, 387, 388, 389, 390, 391, 392, 393, 394, 406, 408, 415, 434, 437, 439, 464, 465, 469, 470], "corner": 386, "correct": [2, 8, 443, 444, 445, 467, 468], "correctli": 38, "correl": [101, 327], "correspond": [0, 2, 15, 17, 78, 93, 116, 118, 141, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 199, 201, 216, 230, 275, 282, 294, 302, 466], "cos_first": 377, "cosh": [0, 414], "cosin": [0, 19, 20, 106, 107, 407, 453, 455, 466], "cosine_decai": [439, 455], "cosine_similarity_loss": 315, "cost": [8, 441, 465, 468], "costli": 468, "cot": 1, "cot_index": 1, "cotan": [2, 112], "cotang": [1, 2, 112, 293], "could": [5, 315], "count": [315, 455], "counter": 461, "cours": 466, "coursera": 451, "cov": 239, "covari": [239, 319], "cover": 2, "cpp": 2, "cpu": [7, 8, 186, 464, 472], "cpython": 2, "crash": [83, 464], "creat": [0, 2, 5, 8, 83, 123, 140, 169, 273, 315, 437, 439, 455, 464, 467, 469], "create_additive_causal_mask": 5, "criteria": 2, "cross": [6, 101, 406, 408], "cross_entropi": [6, 315], "crowd": 5, "cry": 5, "cubic": 386, "cummax": 0, "cummin": 0, "cumprod": 0, "cumsum": 0, "cumul": [0, 83, 108, 109, 110, 111], "current": [5, 7, 8, 83, 90, 100, 103, 104, 127, 206, 208, 231, 304, 315, 441, 465, 468], "custom": [7, 112, 143, 385], "custom_decod": 385, "custom_encod": 385, "custom_funct": 1, "custom_kernel_myexp_float": 1, "custom_tim": 2, "cvpr": 327, "cycl": 463, "d": [0, 1, 2, 5, 100, 104, 117, 118, 170, 185, 200, 204, 226, 278, 285, 287, 288, 289, 305, 322, 325, 328, 332, 338, 370, 440, 443, 445, 472], "d1": 472, "d2": 472, "d2fdx2": 466, "d_i": 341, "dampen": 452, "darwin": 2, "data": [0, 2, 6, 7, 10, 18, 125, 140, 156, 157, 162, 169, 189, 220, 224, 244, 285, 287, 292, 296, 328, 387, 388, 389, 390, 391, 392, 393, 394, 464, 465, 467, 469], "dataset": [4, 465, 468], "datatyp": 51, "dbuild_shared_lib": 8, "dcmake_build_typ": 8, "ddof": [0, 75, 80, 271, 291], "deal": 464, "debug": [1, 3, 465], "debugg": 7, "decai": [441, 444, 446, 452, 453, 454, 457], "decay_r": [441, 454, 457], "decay_step": 453, "decent": 6, "decid": [302, 349], "decim": [0, 66, 251], "declar": 2, "decltyp": 1, "decod": 385, "decomposit": [182, 183, 187], "decor": [1, 112], "decoupl": 444, "deep": [319, 388, 389, 390, 391], "def": [1, 2, 4, 5, 6, 112, 143, 290, 315, 437, 464, 465, 466, 467, 468, 469, 472], "default": [1, 2, 8, 14, 15, 16, 17, 18, 26, 27, 28, 29, 82, 83, 90, 94, 95, 98, 99, 100, 101, 102, 103, 104, 112, 113, 114, 116, 117, 118, 121, 122, 123, 125, 126, 127, 140, 141, 143, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 163, 164, 165, 168, 169, 171, 182, 183, 184, 185, 186, 187, 188, 189, 190, 199, 201, 203, 204, 212, 213, 216, 220, 224, 227, 228, 230, 231, 232, 234, 235, 236, 238, 239, 240, 241, 243, 244, 245, 248, 249, 251, 258, 259, 265, 266, 269, 270, 271, 273, 275, 277, 282, 284, 285, 286, 287, 288, 289, 290, 291, 294, 296, 298, 308, 317, 318, 319, 320, 321, 322, 323, 324, 325, 331, 332, 334, 337, 338, 340, 341, 342, 343, 345, 350, 352, 357, 359, 362, 365, 366, 367, 368, 370, 373, 377, 381, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 399, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 437, 440, 441, 442, 443, 444, 445, 446, 451, 452, 453, 461, 463, 464, 466, 469, 471, 473], "default_devic": 473, "default_stream": 473, "defin": [1, 2, 4, 5, 6, 8, 112, 126, 143, 164, 185, 232, 298, 301, 469], "definit": [112, 182, 183, 239], "degre": [0, 233, 419], "delta": [411, 440], "delv": [390, 391], "demonstr": 469, "denomin": [337, 407, 440, 442, 443, 444, 445, 451], "dens": [204, 472], "depend": [0, 2, 3, 4, 8, 78, 185, 332, 338, 370, 465, 467, 471, 472], "depth": [301, 322, 325, 328, 466], "dequant": [0, 231], "deriv": [2, 466, 468], "descend": 347, "descent": [452, 464, 468], "describ": [2, 468], "descript": [2, 5, 308], "design": [1, 4, 7, 461, 472], "destin": [0, 2, 60, 127, 218], "destroi": 464, "detach": 466, "detail": [1, 2, 10, 212, 315, 327, 373, 377, 386, 388, 389, 390, 391, 440, 442, 443, 445, 446, 467, 470], "determin": [0, 2, 118, 239, 304, 308, 356, 471], "dev": [2, 8], "develop": [2, 8], "developer_dir": 8, "deviat": [0, 240, 271, 388, 390, 393], "deviatoin": 0, "devic": [1, 2, 7, 8, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 121, 122, 125, 126, 127, 128, 129, 130, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 295, 296, 297, 306, 472, 473], "devicetyp": 9, "df": 469, "dfdx": [466, 467], "dft": [147, 148, 149, 150, 151, 152, 156, 157, 158], "dhwc": 328, "diag": [0, 187], "diagon": [0, 45, 117, 140, 285, 287, 288, 289], "dict": [94, 136, 190, 206, 254, 255, 256, 300, 355, 360, 363, 364, 437, 439, 447, 448, 450, 463, 466, 471], "dict_kei": [302, 448], "dictionari": [5, 94, 190, 206, 254, 255, 300, 301, 304, 315, 349, 358, 363, 364, 449, 463, 471], "did": 5, "diff": 2, "differ": [7, 177, 274, 292, 418, 466], "differenti": [1, 2, 7], "difficult": 466, "difficulti": [388, 389], "dilat": [0, 98, 99, 100, 101, 102, 103, 104, 320, 321, 323, 324], "dim": [1, 5, 145, 146, 329, 333, 337, 339, 365, 367, 369, 373, 377, 385], "dimens": [0, 2, 5, 15, 17, 26, 27, 62, 68, 78, 84, 85, 86, 94, 99, 100, 101, 103, 104, 118, 138, 145, 154, 155, 157, 158, 159, 163, 164, 170, 182, 183, 184, 185, 186, 187, 188, 199, 200, 201, 203, 216, 230, 231, 235, 243, 271, 275, 279, 282, 286, 291, 319, 320, 321, 322, 323, 324, 325, 327, 328, 331, 332, 333, 337, 338, 339, 365, 369, 370, 373, 385, 386, 399, 408, 464, 466], "dimension": [30, 142, 144, 147, 148, 149, 150, 151, 152, 156, 157, 158, 317, 318, 319, 320, 321, 322, 323, 324, 325, 329, 341, 342, 343, 367, 368, 377, 467, 469], "direct": [2, 5, 347, 446, 472], "directli": [2, 5, 83], "directori": [2, 5, 8], "disabl": [119, 212, 464], "disable_compil": 464, "disappoint": 5, "discard": [5, 301], "discov": 8, "discoveri": 446, "discret": [105, 147, 148, 149, 150, 151, 152, 156, 157, 158, 329, 367], "discuss": 2, "disk": 5, "dispatch": 2, "dispatchthread": 2, "displai": 315, "distanc": [5, 419], "distribut": [7, 8, 234, 235, 236, 238, 239, 240, 244, 245, 341, 388, 389, 390, 391, 393, 394, 409, 412, 417, 419, 434], "diverg": 412, "divid": [0, 2, 38, 161, 231, 247, 465], "divis": [0, 128, 161, 231, 247], "divisor": [271, 291], "divmod": 0, "dloss_dw": 466, "dloss_dx": 466, "dlpack": 469, "dlvalu": 290, "dmlx_build_cpu": 8, "dmlx_build_gguf": 8, "dmlx_build_safetensor": 8, "dmlx_metal_debug": 3, "dmlx_metal_jit": 8, "do": [0, 2, 5, 8, 292, 315, 351, 362, 434, 437, 444, 464, 465, 466, 468], "doc": [2, 6, 465], "document": [2, 3, 65, 79, 254, 255, 308, 464, 466, 467], "doe": [0, 2, 3, 5, 8, 207, 292, 300, 315, 464, 467, 468, 469], "doesn": [2, 315], "domain": [244, 465], "don": [1, 8, 464, 472], "done": [315, 326, 369, 464, 465, 468, 469], "dot": [182, 184, 188, 282, 301, 354, 365], "doubl": [0, 5], "doubt": 5, "down": [5, 300], "dparam": 290, "draw": 235, "drop": 349, "dropout": [315, 327, 328, 359, 385, 464], "dropout2d": 315, "dropout3d": 315, "dst": 127, "dt": 134, "dtype": [0, 1, 2, 5, 11, 18, 30, 37, 38, 78, 81, 125, 126, 140, 143, 159, 162, 169, 177, 185, 186, 189, 224, 236, 238, 239, 240, 241, 244, 245, 285, 287, 292, 296, 308, 357, 386, 387, 388, 389, 390, 391, 392, 393, 394, 406, 408, 415, 453, 454, 455, 456, 457, 464, 465, 466, 467, 469, 470, 471], "dtypecategori": [177, 308], "dual": 414, "duchi": 442, "dure": [3, 94, 326, 327, 328, 386, 469], "dx": 112, "dy": 112, "dyld": 465, "dyld_library_path": 465, "dylib": 2, "dynam": 468, "e": [2, 6, 8, 112, 134, 143, 163, 164, 178, 260, 319, 320, 321, 322, 323, 324, 325, 327, 328, 333, 337, 339, 350, 369, 404, 405, 427, 428, 433, 439, 442, 464, 468, 473], "e5": 308, "e8": 308, "each": [0, 1, 2, 68, 116, 136, 141, 145, 164, 177, 182, 183, 184, 187, 188, 200, 204, 227, 231, 232, 235, 248, 256, 257, 266, 283, 286, 292, 294, 295, 327, 328, 329, 332, 333, 338, 370, 373, 385, 406, 408, 461, 464, 465, 468], "eager": 468, "earli": 327, "earlier": 2, "eas": 5, "easi": [2, 315, 465], "easier": [1, 468], "edg": [93, 227, 386, 464], "edit": [8, 364], "effect": [327, 464, 468], "effici": [5, 7, 163, 327, 373, 468, 470], "einstein": [130, 131], "einsum": 131, "either": [8, 13, 65, 78, 79, 87, 88, 89, 93, 128, 129, 133, 161, 166, 167, 179, 180, 181, 185, 195, 200, 202, 217, 219, 223, 229, 247, 250, 274, 290, 318, 343, 375, 386, 390, 391, 469], "elem": [1, 143], "elem_to_loc": [1, 2], "element": [0, 1, 2, 12, 13, 19, 20, 21, 22, 23, 24, 25, 28, 70, 83, 87, 88, 89, 92, 106, 107, 108, 109, 110, 111, 116, 128, 129, 133, 134, 135, 137, 139, 140, 141, 160, 161, 164, 166, 167, 171, 172, 173, 174, 175, 176, 179, 180, 181, 191, 192, 193, 194, 195, 196, 197, 198, 202, 204, 217, 219, 221, 223, 228, 229, 231, 232, 246, 247, 248, 250, 252, 260, 261, 262, 263, 267, 268, 274, 278, 280, 281, 284, 290, 292, 295, 326, 327, 328, 332, 336, 338, 344, 366, 370, 373, 401, 402, 404, 405, 420, 421, 423, 426, 427, 428, 429, 464, 466], "elementwis": [1, 96, 97], "elif": 5, "ellipsi": 467, "elman": 370, "els": [0, 2, 5, 315, 350, 465, 468], "elsewher": [287, 467], "elu": [315, 424], "emb": [5, 329, 367, 377], "embed": [5, 298, 315, 367, 373, 377, 407], "empti": [127, 239], "enabl": [3, 5, 8, 94, 132, 452], "encod": [2, 145, 373, 377, 385, 408], "encount": [2, 466], "end": [118, 183, 210, 231, 318, 332, 338, 343, 383, 400, 411, 418, 424, 430, 431, 453, 456], "end_axi": [0, 49, 159], "end_encod": 2, "endif": 2, "endswith": 350, "enhanc": [5, 373, 468], "enjoi": 2, "enough": [2, 468], "ensur": [0, 1, 2, 8, 143, 300, 414, 465], "ensure_row_contigu": [1, 143], "enter": 5, "entir": [15, 17, 26, 27, 199, 201, 203, 216, 230, 271, 275, 291, 327, 328], "entri": [0, 327, 328], "entropi": [6, 406, 408], "enumer": 315, "environ": [8, 119, 132, 465], "ep": [4, 142, 144, 319, 333, 337, 339, 369, 407, 409, 419, 439, 440, 441, 442, 443, 444, 445, 451], "epoch": 6, "epsilon": [319, 333, 337, 339, 369, 407, 409, 440, 442, 443, 444, 445, 451], "epsilon_1": 441, "epsilon_2": 441, "equal": [0, 16, 28, 82, 140, 167, 171, 181, 223, 228, 241, 266, 337, 341], "equal_nan": [0, 16, 82, 171], "equat": [130, 131], "equival": [0, 2, 31, 65, 79, 126, 129, 161, 164, 168, 278, 330, 334, 335, 336, 364, 366, 368, 371, 372, 374, 376, 378, 379, 380, 381, 382, 384], "erf": [0, 135, 464], "erfinv": 0, "error": [0, 2, 8, 123, 134, 135, 213, 266, 330, 396, 397, 398, 414, 416, 466, 469], "error_norm": 4, "estim": [443, 445], "eta": 446, "etc": [2, 231, 315, 386, 465], "eval": [2, 3, 4, 5, 6, 315, 437, 439, 464, 465, 466, 468, 470], "eval_cpu": 2, "eval_fn": 6, "eval_gpu": 2, "evalu": [2, 5, 6, 7, 127, 136, 178, 293, 315, 348, 359, 437, 439, 464, 470], "even": [1, 2, 5, 94, 464, 468, 469], "evenli": [0, 189], "everi": [231, 302, 439, 457, 466], "everyth": [5, 465], "everywher": 0, "exact": [397, 398], "exactli": [2, 5, 145, 352, 466], "exampl": [0, 3, 4, 5, 6, 8, 18, 38, 112, 143, 159, 177, 185, 186, 273, 278, 300, 303, 304, 315, 317, 318, 319, 337, 342, 343, 350, 352, 359, 362, 386, 387, 388, 389, 390, 391, 392, 393, 394, 406, 408, 415, 434, 439, 448, 453, 454, 455, 456, 457, 461, 466, 467, 468, 469, 470, 471], "exce": 300, "exceed": 213, "except": [7, 140, 153, 154, 156, 157, 158, 333, 352, 467, 469], "exclud": 279, "exclus": [0, 83, 89], "execut": [2, 8, 84, 85, 86, 209, 469, 472], "exist": [2, 3, 5, 350, 362], "exp": [0, 1, 139, 143, 195, 199, 236, 264, 395, 412, 424, 425, 429, 464, 472], "exp_elementwis": [1, 143], "expand_dim": 0, "expect": [2, 5, 320, 321, 322, 323, 324, 325, 326, 327, 328, 377, 385, 409, 464, 467], "expens": 385, "expensive_fun": 468, "experiment": 469, "explain": 2, "explicit": [2, 448, 461, 469], "explicitli": [163, 315, 461], "explor": 8, "expm1": 0, "exponenti": [0, 137, 139, 374, 395, 424, 454], "exponential_decai": 439, "export": 8, "ext_modul": 2, "extend": [2, 227], "extens": [7, 190, 214, 356, 471], "extern": 469, "extra": [1, 302, 303], "extract": [0, 5, 45, 117, 118, 315, 349, 437, 465], "extras_requir": 2, "extrem": [467, 468], "ey": [0, 5, 184, 188], "f": [0, 2, 4, 6, 112, 185, 315, 338, 444, 464, 469], "f_jvp": 112, "f_t": 338, "f_vjp": 112, "f_vmap": 112, "face": 5, "factor": [2, 14, 168, 182, 183, 186, 386, 408, 454, 457], "fall": [2, 112], "fallback": 2, "fals": [0, 1, 2, 5, 15, 16, 17, 26, 27, 33, 34, 35, 36, 41, 42, 43, 44, 56, 57, 58, 59, 63, 75, 76, 80, 82, 94, 101, 108, 109, 110, 111, 123, 143, 171, 177, 182, 183, 185, 188, 190, 199, 201, 203, 204, 213, 216, 230, 271, 275, 291, 295, 298, 301, 302, 303, 304, 308, 333, 337, 339, 341, 350, 352, 362, 365, 368, 373, 377, 385, 386, 406, 409, 441, 452, 469], "famili": 5, "fan": [388, 389, 390, 391], "fan_in": [388, 389, 390, 391], "fan_out": [388, 389, 390, 391], "far": 439, "fast": [1, 7, 330, 398, 465, 472], "faster": [1, 2, 8, 129, 396, 406, 464, 466], "featur": [1, 7, 98, 99, 100, 101, 102, 103, 104, 145, 319, 332, 333, 337, 338, 339, 341, 368, 369, 370, 373, 385, 386, 464, 468], "feed": 5, "feed_forward": 5, "feedforward": [388, 389], "feel": 5, "fetch": 1, "few": [1, 2, 5, 6, 7, 8, 465, 468, 470], "ffn": 5, "ffn_norm": 5, "fft": 7, "figur": 465, "file": [5, 8, 190, 253, 254, 255, 256, 257, 352, 356, 465, 466, 471], "file_or_weight": 352, "fill": [0, 2, 162, 225, 287, 297, 387, 388, 389, 390, 391, 393, 394], "filter": [0, 105, 320, 321, 322, 323, 324, 325, 345, 349], "filter_and_map": 315, "filter_fn": [345, 349], "final": [2, 4, 5, 6, 168, 453, 456], "find": [2, 4, 8, 465], "find_packag": 2, "finder": 8, "fine": [461, 468], "finetun": 315, "finish": 2, "finit": [0, 172, 220], "first": [0, 1, 2, 3, 4, 5, 6, 8, 118, 121, 159, 165, 177, 179, 187, 196, 198, 200, 228, 243, 250, 276, 282, 285, 290, 301, 303, 304, 315, 318, 333, 343, 386, 407, 415, 441, 443, 444, 445, 448, 464, 466, 469, 472], "first_lay": 468, "fit": [2, 231, 472], "five": 464, "fix": [2, 5, 8, 468], "flag": [2, 8, 464, 469], "flat": [163, 164, 301, 305], "flat_param": 256, "flatten": [0, 28, 29, 108, 109, 110, 111, 185, 226, 228, 248, 265, 278, 279, 284, 301], "flexibl": 7, "flexibli": 364, "flip": [0, 101, 105], "float": [0, 1, 2, 11, 14, 16, 18, 78, 142, 143, 144, 145, 146, 161, 162, 168, 171, 177, 185, 220, 232, 234, 238, 240, 300, 308, 319, 326, 327, 328, 333, 337, 339, 345, 357, 369, 373, 377, 383, 385, 386, 387, 388, 389, 390, 391, 393, 394, 407, 408, 409, 411, 415, 418, 419, 430, 431, 440, 441, 442, 443, 444, 445, 446, 451, 452, 453, 454, 456, 457], "float16": [1, 2, 11, 143, 168, 190, 308, 345, 468, 469], "float16_t": [1, 2], "float32": [0, 1, 2, 11, 18, 140, 143, 146, 168, 169, 177, 185, 186, 189, 224, 236, 238, 239, 240, 244, 245, 287, 296, 308, 386, 387, 388, 389, 390, 391, 392, 393, 394, 406, 408, 415, 453, 454, 455, 456, 457, 464, 465, 466, 467, 468, 469, 470, 471], "float64": 177, "floor": [0, 1, 161], "floor_divid": 0, "flow": [0, 272, 468], "flush": 2, "fn": [299, 302, 303, 304, 470], "follow": [1, 2, 5, 6, 7, 8, 18, 105, 116, 141, 163, 185, 227, 231, 303, 315, 397, 398, 412, 440, 441, 442, 443, 444, 445, 446, 452, 461, 464, 465, 466, 472], "foo": 465, "food": 5, "forc": [5, 6, 315, 465, 470], "forg": 8, "formal": [116, 141, 231], "format": [5, 190, 253, 254, 255, 256, 257, 469], "formula": 418, "forth": 386, "forward": [1, 2, 290, 464, 468], "found": 349, "four": 319, "fourier": [147, 148, 149, 150, 151, 152, 156, 157, 158], "frac": [134, 231, 260, 317, 318, 319, 326, 327, 328, 333, 337, 339, 341, 342, 343, 369, 388, 389, 390, 391, 407, 409, 411, 414, 425, 427, 428, 440, 442, 443, 444, 445, 451], "fraction": 18, "framework": [2, 7], "free": 212, "freez": [315, 362, 437], "freq": 145, "frequenc": [145, 373, 377], "frequent": [464, 468], "friend": 5, "fro": 185, "frobeniu": 185, "from": [0, 1, 2, 5, 6, 7, 83, 115, 116, 118, 121, 122, 125, 126, 127, 141, 143, 154, 155, 157, 158, 162, 163, 168, 185, 190, 200, 204, 209, 212, 225, 231, 233, 234, 235, 236, 237, 238, 241, 244, 256, 269, 272, 274, 278, 279, 284, 285, 295, 297, 301, 302, 303, 304, 305, 315, 341, 350, 352, 365, 388, 389, 390, 391, 393, 394, 409, 418, 434, 439, 463, 464, 465, 466, 468, 469, 470, 471, 472], "from_embed": 367, "from_linear": 368, "front": 2, "frozen": [315, 350, 360, 362, 368, 437], "fuction": 129, "full": [0, 1, 2, 6, 65, 79, 105, 264, 363, 364, 409, 464, 465, 468], "full_turn": 377, "fulli": [2, 7, 464, 465, 469, 472], "fun": [94, 165, 178, 290, 293, 294, 464, 467, 468, 472], "fun1": 468, "func": 370, "function": [0, 1, 2, 3, 4, 5, 6, 7, 16, 83, 94, 112, 129, 134, 135, 143, 165, 171, 178, 182, 183, 184, 185, 186, 187, 188, 200, 260, 290, 293, 294, 299, 300, 302, 303, 304, 315, 330, 331, 334, 335, 336, 344, 346, 350, 357, 362, 366, 370, 371, 372, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 420, 425, 427, 428, 429, 430, 431, 432, 434, 439, 448, 461, 463, 465, 467, 468, 469, 471], "functool": 464, "further": [2, 8, 466], "fuse": [1, 464], "fusibl": 464, "futur": [5, 368, 467, 468], "g": [3, 8, 112, 143, 185, 231, 338, 433, 451, 452, 468, 473], "g_t": [338, 440, 442, 443, 444, 445, 446, 451, 452], "gain": [388, 389, 390, 391], "gamma": [319, 333, 337, 339, 369, 388, 389, 390, 391], "gap": 1, "gate": [331, 332, 399], "gather": [0, 121, 163, 164], "gather_mm": [0, 164], "gather_qmm": 0, "gaurante": 292, "gaussian": [4, 330, 396, 397, 398, 409], "gaussian_nll_loss": 315, "gelu": [315, 397, 398, 464], "gelu_approx": [315, 330, 396], "gelu_fast_approx": [315, 330, 396], "geluapprox": 330, "gelufast": 330, "gener": [0, 1, 2, 3, 4, 11, 18, 101, 140, 143, 154, 155, 189, 204, 234, 239, 240, 241, 244, 245, 385, 461, 464, 467, 468, 473], "general_": 2, "generate_stub": 8, "geq": [383, 431], "get": [2, 4, 6, 8, 99, 100, 101, 103, 104, 113, 114, 206, 207, 208, 209, 237, 315, 464, 466, 468, 472], "get_cache_memori": 205, "get_command_encod": 2, "get_kernel": 2, "gguf": [8, 190, 254, 471], "gh": 1, "gii": 1, "git": 8, "github": [4, 6, 8, 464], "give": [2, 5, 6, 28, 464], "given": [0, 2, 8, 11, 15, 17, 28, 38, 83, 91, 93, 95, 108, 109, 110, 111, 116, 118, 131, 136, 138, 141, 147, 148, 149, 150, 151, 152, 156, 157, 158, 162, 163, 185, 199, 201, 203, 212, 216, 220, 222, 230, 239, 241, 251, 259, 264, 266, 271, 275, 277, 283, 284, 285, 287, 288, 289, 291, 306, 317, 318, 326, 342, 343, 349, 365, 407, 409, 415], "gix": 1, "gix_mult": 1, "giy_mult": 1, "global": [119, 121, 122, 123, 125, 126, 127, 132, 242, 300, 461, 464], "glorot": [388, 389], "glorot_norm": 315, "glorot_uniform": 315, "glu": [5, 315], "gm": 1, "gn": 1, "go": [2, 5, 466], "golub": 185, "good": [2, 8, 439, 464, 465, 472], "goroshin": 327, "gower": 5, "gpu": [1, 3, 7, 8, 206, 464, 467, 472], "gputrac": [3, 214], "grad": [2, 4, 6, 290, 300, 439, 447, 464, 465, 466, 467, 468, 470], "grad_fn": [4, 464, 466], "gradient": [0, 4, 6, 112, 165, 272, 290, 299, 300, 315, 350, 363, 368, 385, 414, 437, 439, 440, 441, 443, 444, 445, 446, 447, 450, 452, 464, 465, 466, 467, 468, 469, 470], "grain": 461, "graph": [2, 5, 6, 7, 466], "great": 3, "greater": [0, 5, 28, 139, 167, 228, 300, 383, 431], "greater_equ": 0, "grep": 8, "grid": [2, 143, 204], "grid_dim": 2, "grid_grad": 1, "grid_idx": 1, "grid_sampl": 1, "grid_sample_grad": 1, "grid_sample_ref": 1, "grid_sample_vjp": 1, "grid_shap": 1, "grid_siz": 1, "ground": [4, 5, 408, 418], "group": [0, 1, 98, 99, 100, 101, 102, 103, 104, 116, 121, 122, 123, 125, 126, 127, 141, 146, 164, 231, 232, 292, 298, 333, 367, 368, 465], "group_dim": 2, "group_siz": [0, 116, 141, 164, 231, 232, 298, 367, 368], "groupnorm": 315, "grow": 468, "gru": 315, "guid": [2, 7], "gw": 1, "h": [1, 2, 98, 99, 100, 102, 103, 104, 185, 318, 319, 321, 322, 324, 325, 327, 328, 332, 338, 343, 370, 466, 468], "h_": [318, 332, 338, 343, 370], "h_in": 1, "h_stride": 1, "h_t": [332, 338, 370], "ha": [2, 3, 5, 6, 7, 8, 78, 94, 118, 127, 153, 154, 156, 157, 158, 165, 182, 183, 184, 187, 188, 204, 208, 235, 319, 332, 338, 341, 370, 437, 439, 464, 467, 468, 470, 472], "had": 5, "hadamard": [0, 168], "hadamard_transform": 0, "half": [2, 18, 241, 245, 373, 468], "halv": [331, 399], "hand": [5, 466, 468], "handi": 466, "handl": [2, 315, 464], "happen": [2, 5, 142, 385, 439, 464, 468], "happi": 5, "hard": 5, "hard_shrink": [315, 334], "hard_tanh": [315, 335], "hardshrink": [315, 400], "hardswish": 315, "hardtanh": [315, 401], "hat": [116, 141, 231], "have": [0, 1, 2, 5, 8, 16, 82, 84, 85, 86, 90, 121, 154, 155, 157, 158, 164, 171, 200, 214, 235, 292, 301, 338, 365, 375, 446, 448, 463, 464, 465, 467, 468, 472], "haven": 5, "hazan": 442, "he": [5, 390, 391], "he_norm": 315, "he_uniform": 315, "head": [146, 365, 385], "header": [2, 143], "heart": 5, "heavi": 5, "height": [318, 319, 321, 322, 324, 325, 327, 328, 343], "hello": [301, 305], "help": [2, 5, 464, 472], "helper": [5, 143, 464], "henc": [0, 2, 231, 464], "hendryck": 398, "here": [2, 5, 439, 464, 466, 468, 471, 472], "hf": 338, "hg": 338, "hh": 370, "hi": [5, 338], "hidden": [332, 338, 370, 385], "hidden_dim": [6, 437, 439], "hidden_s": [332, 338, 370], "hierarchi": 308, "high": [241, 245, 315, 329, 394, 434], "high_pad_s": 0, "higher": [2, 170, 415, 466], "highli": 8, "him": 5, "hing": 410, "hinge_loss": 315, "hinton": 451, "hit": 2, "hn": 332, "ho": 338, "hold": [2, 5, 10, 11, 185, 464], "homebrew": 465, "hopkin": 185, "host": 2, "host1": 465, "host2": 465, "host_nam": [1, 2], "hostfil": 465, "hostnam": 465, "hot": 408, "hour": 5, "how": [2, 5, 6, 315, 317, 318, 320, 321, 322, 323, 324, 325, 329, 342, 343, 367, 386, 447, 464, 467, 472], "howev": [2, 112, 315, 330, 333, 448, 461, 464, 465, 468, 469], "hr": 332, "http": [333, 337, 339, 344, 369, 398, 420], "huber": 411, "huber_loss": 315, "human": [390, 391], "hundr": 8, "hurri": 5, "hutter": 444, "hyperbol": [0, 20, 22, 25, 107, 263, 281, 384, 432], "hz": 332, "i": [0, 1, 2, 3, 5, 6, 7, 8, 16, 18, 28, 37, 78, 83, 93, 99, 100, 101, 103, 104, 105, 108, 109, 110, 111, 112, 117, 118, 121, 122, 124, 125, 126, 127, 129, 136, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 168, 171, 172, 177, 178, 182, 183, 184, 185, 186, 187, 188, 190, 195, 199, 200, 204, 210, 213, 227, 228, 231, 232, 239, 240, 249, 253, 254, 255, 260, 264, 266, 271, 272, 277, 278, 279, 282, 285, 286, 290, 291, 292, 293, 294, 295, 298, 300, 301, 302, 303, 304, 308, 310, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 333, 337, 338, 339, 341, 342, 343, 349, 350, 356, 358, 359, 361, 362, 364, 365, 366, 368, 369, 370, 373, 377, 383, 385, 386, 390, 391, 396, 398, 406, 407, 409, 414, 415, 418, 419, 421, 426, 431, 437, 439, 441, 444, 446, 447, 448, 453, 455, 456, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473], "i386": 8, "i_n": 1, "i_nw": 1, "i_s": 1, "i_sw": 1, "i_t": 338, "iclr": [443, 444, 445], "id": [6, 8], "idea": [466, 468], "idempot": [350, 362], "ident": [0, 112, 140, 272, 315, 359], "identifi": [2, 301, 463], "idim": 6, "idiom": [6, 464], "idx": [38, 467], "ie": [362, 465], "ieee": 308, "ignor": [5, 38, 93, 94, 136, 441], "ih": 370, "ii": 1, "ij": 204, "imag": [321, 322, 324, 325, 327, 328, 386], "imagenet": [390, 391], "immedi": [5, 345], "implement": [0, 1, 4, 6, 145, 146, 185, 329, 349, 365, 373, 375, 377, 383, 385, 386, 431, 440, 441, 442, 443, 445, 446, 447, 459, 464, 466], "impli": 292, "implicit": [461, 464, 466], "implicitli": 468, "import": [2, 3, 4, 5, 6, 8, 112, 168, 185, 256, 290, 301, 302, 303, 304, 305, 315, 317, 318, 319, 337, 342, 343, 352, 386, 406, 408, 415, 434, 437, 439, 464, 465, 466, 467, 468, 469, 470], "improv": [1, 2, 3, 5, 406, 440, 441, 442, 443, 444, 445, 451, 464, 465], "in_ax": [294, 466], "in_channel": [320, 321, 322, 323, 324, 325], "in_dim": [315, 437], "in_proj": 437, "inci": 2, "includ": [1, 2, 108, 109, 110, 111, 143, 207, 208, 213, 339, 346, 358, 368, 409, 439, 464, 466, 467, 470, 471, 473], "include_dir": 2, "inclus": [0, 41, 42, 43, 44, 108, 109, 110, 111, 159], "incom": 2, "inconveni": 464, "incorpor": 469, "incorrect": 469, "increment": 18, "incur": [5, 8], "incx": 2, "independ": [120, 327, 328], "index": [0, 1, 2, 7, 9, 28, 38, 138, 140, 165, 204, 228, 278, 279, 290, 306], "indic": [0, 2, 16, 26, 27, 28, 29, 38, 163, 164, 165, 171, 172, 173, 174, 175, 176, 177, 187, 266, 278, 279, 290, 359, 361, 408, 415, 455, 467], "indices_or_sect": [71, 266], "indirectli": 469, "individu": [315, 327, 328], "ineffici": [467, 468], "inexact": [11, 177], "inf": [185, 220, 365], "infer": [7, 162, 190, 285, 465], "infin": [0, 173, 175, 176, 220, 342, 343, 445], "infinit": [16, 171, 172], "info": [5, 8], "inform": [3, 5, 6, 8, 131, 206, 254, 255, 308, 315, 319, 330, 365, 466, 472], "inherit": [6, 463], "inifn": 173, "init": [315, 366, 434, 439, 453, 454, 456, 457, 465], "init_fn": [387, 388, 389, 390, 391, 392, 393, 394, 434], "init_valu": 1, "initi": [1, 3, 4, 5, 123, 304, 315, 319, 333, 337, 339, 341, 366, 369, 387, 388, 389, 390, 391, 392, 393, 394, 437, 448, 453, 454, 456, 457, 464, 465, 468], "initializer_list": 0, "inject": 0, "inlin": 0, "inner": [0, 464], "inorm": 337, "inp": [1, 143], "inp_ndim": 1, "inp_shap": 1, "inp_strid": 1, "inplac": [2, 8], "input": [0, 1, 2, 4, 5, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 115, 117, 118, 121, 122, 127, 128, 129, 130, 131, 133, 134, 135, 137, 138, 139, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 216, 217, 218, 219, 220, 221, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 243, 246, 247, 248, 249, 250, 251, 252, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 294, 295, 297, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 331, 332, 333, 337, 338, 339, 341, 342, 343, 365, 368, 369, 370, 373, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 399, 406, 407, 409, 410, 411, 412, 414, 415, 417, 419, 431, 434, 464, 466, 467, 470, 471], "input_dil": [0, 101], "input_dim": [6, 315, 341, 368], "input_nam": [1, 143], "input_s": [332, 338, 370], "inputs1": 415, "inputs2": 415, "insert": [118, 138, 472], "insid": 464, "inspect": [3, 464, 470], "inspir": 7, "instabl": 419, "instal": 2, "instanc": [5, 38, 112, 231, 305, 315, 337, 345, 346, 347, 350, 352, 353, 354, 359, 362, 363, 364, 375, 437, 469], "instancenorm": 315, "instanti": [1, 2, 6, 468], "instantiate_axpbi": 2, "instead": [2, 8, 112, 315, 364, 377, 465, 466, 468], "int": [0, 1, 2, 5, 6, 9, 15, 17, 18, 26, 27, 28, 29, 33, 34, 35, 36, 41, 42, 43, 44, 45, 46, 49, 56, 57, 58, 59, 60, 63, 66, 68, 71, 74, 75, 76, 77, 78, 80, 83, 90, 91, 95, 98, 99, 100, 101, 102, 103, 104, 108, 109, 110, 111, 116, 117, 118, 125, 126, 127, 131, 138, 140, 141, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 164, 165, 169, 177, 185, 189, 199, 201, 203, 206, 207, 208, 209, 212, 213, 216, 218, 224, 227, 228, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 248, 249, 251, 264, 265, 266, 269, 270, 271, 275, 276, 278, 279, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 294, 296, 298, 306, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 329, 331, 332, 333, 337, 338, 339, 341, 342, 343, 365, 367, 368, 369, 370, 373, 377, 385, 399, 407, 408, 412, 417, 419, 437, 453, 455, 456, 457], "int16": 308, "int32": [0, 1, 11, 18, 38, 159, 177, 185, 241, 308, 386, 467, 470], "int64": [11, 308], "int8": [11, 308], "int_0": 134, "integ": [0, 11, 161, 163, 164, 177, 185, 206, 227, 231, 232, 234, 241, 266, 282, 294, 308, 329, 357, 455, 467], "integr": [18, 278, 468], "intend": [0, 464], "interact": 385, "interest": 472, "interfac": 2, "intermedi": 469, "intern": 319, "interpol": 386, "interv": [18, 189, 241, 245], "intuit": 315, "invalid": [0, 83], "invers": [0, 19, 20, 21, 22, 23, 24, 25, 135, 150, 151, 152, 153, 154, 155, 183, 184, 188], "invert": 0, "involv": [439, 464], "ip": 465, "is_avail": 123, "is_equival": 2, "is_floating_point": 2, "is_leaf": [301, 302, 303, 304], "is_leaf_fn": 349, "isclos": 0, "isfinit": 0, "ish": 5, "ishmael": 5, "isinf": 0, "isnan": 0, "isneginf": 0, "isposinf": 0, "issu": [465, 466, 469], "issubdtyp": [11, 308], "item": [0, 2, 4, 5, 6, 302, 439, 468, 469, 470], "iter": [4, 6, 187, 302, 303, 461, 464, 468], "iterm": 8, "itertool": [5, 302], "its": [0, 1, 2, 8, 183, 200, 228, 243, 287, 299, 305, 315, 368, 439, 443, 444, 445, 465, 469, 472], "itself": [2, 298, 448], "ix": 1, "ix_n": 1, "ix_nw": 1, "ix_s": 1, "ix_sw": 1, "iy_n": 1, "iy_nw": 1, "iy_s": 1, "iy_sw": 1, "j": [5, 8, 185, 327, 442, 443, 445], "j8": 2, "jacobian": [2, 178, 293, 470], "jain": 327, "jax": [7, 461], "jit": 143, "jmlr": 442, "jnp": 469, "john": 185, "join": 455, "join_schedul": 439, "jointli": 239, "just": [2, 6, 339, 464, 467], "jvp": [2, 112, 470], "k": [0, 5, 45, 90, 117, 140, 146, 163, 168, 284, 287, 288, 289, 317, 341, 342, 350], "k_h": [318, 343], "k_w": [318, 343], "kaim": 391, "keep": [2, 15, 17, 26, 27, 199, 201, 203, 216, 230, 271, 275, 291, 315, 349, 466, 468], "keepdim": [0, 15, 17, 26, 27, 33, 34, 35, 36, 56, 57, 58, 59, 63, 75, 76, 80, 185, 199, 201, 203, 216, 230, 264, 271, 275, 291], "kei": [1, 3, 5, 146, 206, 234, 235, 236, 238, 239, 240, 241, 243, 244, 245, 301, 302, 349, 350, 362, 365, 448, 461, 463, 466], "kernel": [2, 7, 8, 98, 99, 100, 101, 102, 103, 104, 143, 317, 318, 342, 343, 464, 467], "kernel_dil": [0, 101], "kernel_s": [317, 318, 320, 321, 322, 323, 324, 325, 342, 343], "key_cach": 5, "key_input_dim": 365, "key_proj": 5, "keyword": [165, 256, 257, 290, 302, 315, 461, 471, 473], "kind": 5, "kingma": [443, 445], "kl_div_loss": 315, "kname": 2, "know": [2, 5], "known": [376, 426], "kth": [0, 28, 228], "kullback": 412, "kw_onli": 2, "kwarg": [9, 10, 30, 112, 120, 256, 257, 306, 473], "kwd": 11, "l": [5, 6, 182, 183, 315, 317, 319, 320, 323, 332, 338, 342, 370, 418], "l1": [290, 411, 413, 414, 418], "l1_loss": 315, "l2": [411, 414, 452], "l2_loss": 315, "l_": [317, 342, 411], "la": 185, "label": [3, 4, 408, 415], "label_smooth": 408, "lack": 467, "lambd": [334, 381, 400, 430], "lambda": [302, 303, 304, 315, 334, 345, 350, 357, 381, 400, 424, 430, 440, 441, 442, 443, 444, 445, 446, 451, 452, 464, 465, 466], "languag": [1, 2], "larg": [5, 315, 365, 414, 464, 465, 468], "larger": [1, 145, 373, 446], "largest": [185, 220, 284], "lasso": 290, "last": [0, 1, 5, 29, 78, 142, 144, 149, 152, 154, 155, 157, 158, 159, 163, 164, 170, 182, 183, 184, 186, 187, 188, 200, 209, 235, 265, 282, 292, 320, 321, 322, 323, 324, 325, 327, 328, 333, 386, 469], "latenc": 465, "later": [3, 8, 439], "latest": 464, "launch": [1, 2, 123, 465, 467], "layer": [7, 142, 298, 315, 317, 318, 327, 328, 332, 333, 338, 339, 341, 342, 343, 359, 364, 367, 368, 370, 375, 385, 433, 437], "layer_s": 6, "layernorm": 315, "layout": 1, "lazi": [7, 437, 470], "lazili": [5, 315], "lceil": 90, "ld": [332, 338, 370], "ldot": [317, 318, 342, 343], "lead": [0, 18, 83, 464], "leaf": [94, 298, 301, 302, 303, 304, 349], "leaf_modul": 315, "leaki": [340, 403], "leaky_relu": 315, "leakyrelu": 315, "learn": [4, 6, 7, 319, 333, 337, 339, 366, 369, 439, 440, 441, 442, 443, 444, 445, 446, 451, 452], "learnabl": [320, 321, 322, 323, 324, 325, 375], "learning_r": [6, 439, 440, 441, 442, 443, 444, 445, 446, 448, 451, 452, 453, 454, 455, 456, 457, 464], "least": [5, 84, 85, 86, 93, 182, 183, 184, 186, 187, 188, 231], "leav": [2, 136, 302, 303, 304], "lectur": 451, "lecun": 327, "left": [0, 5, 145, 179, 185, 231, 317, 318, 330, 342, 343, 373, 386, 397, 398, 409, 411, 419], "left_shift": 0, "leibler": 412, "len": [5, 149, 152, 155, 158, 168, 455], "length": [5, 269, 319, 320, 323, 332, 338, 370, 455], "leq": [411, 424], "less": [0, 5, 28, 181, 228, 373, 418], "less_equ": 0, "let": [1, 2, 4, 5, 183, 464, 466, 468, 469], "level": [0, 163, 164, 390, 391], "lfloor": [317, 318, 342, 343], "lh": [332, 338, 370], "lhs_indic": [0, 163, 164], "lhs_mask": 90, "lib": 465, "libmlx": 8, "libmlx_ext": 2, "libmpi": 465, "librari": [2, 8, 310, 315], "like": [2, 5, 7, 126, 177, 225, 297, 328, 414, 448, 450, 464, 465, 466, 468, 469, 470, 472], "likelihood": [409, 417], "limit": [0, 2, 93, 212, 213, 467], "linalg": 168, "line": [5, 465, 468, 469], "linear": [0, 2, 5, 6, 7, 298, 302, 315, 330, 331, 340, 352, 368, 370, 371, 372, 374, 376, 386, 395, 396, 397, 398, 399, 403, 422, 423, 424, 426, 434, 437, 448, 456, 464], "linear1": 5, "linear2": 5, "linear3": 5, "linear_schedul": [439, 455], "linearli": 365, "link": [2, 8], "linspac": 0, "lion": 439, "list": [1, 5, 10, 15, 17, 30, 71, 78, 83, 84, 85, 86, 91, 94, 95, 101, 131, 136, 143, 148, 149, 151, 152, 154, 155, 157, 158, 162, 165, 178, 185, 199, 201, 203, 204, 216, 224, 227, 230, 234, 235, 236, 238, 239, 240, 241, 244, 245, 254, 264, 266, 270, 271, 275, 282, 283, 286, 290, 291, 293, 296, 301, 304, 305, 315, 350, 352, 353, 354, 355, 360, 362, 363, 364, 437, 439, 443, 444, 445, 446, 455, 463, 464, 465, 466, 468], "liter": [2, 227, 386, 390, 391, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419], "littl": 5, "liu": 5, "live": [7, 143, 472], "ll": [1, 4, 6, 411, 464, 466], "llama": 5, "llamaattent": 5, "llamaencoderlay": 5, "llm": 7, "load": [6, 7, 310, 352, 465], "load_weight": [315, 468], "loader": 6, "loader_path": 2, "loan": 185, "loc": [1, 238, 240], "local": [315, 327, 465], "locat": [0, 2, 83, 363, 364, 465, 472], "log": [0, 193, 195, 199, 404, 405, 406, 409, 412, 414, 417, 429], "log10": 0, "log1p": 0, "log2": 0, "log_cosh_loss": 315, "log_sigmoid": 315, "log_softmax": 315, "logaddexp": 0, "logarithm": [0, 191, 192, 193, 194], "logcosh": 414, "logic": [0, 2, 196, 197, 198], "logical_and": 0, "logical_not": 0, "logical_or": 0, "logist": [0, 4, 260, 398, 426], "logit": [5, 235, 406, 408, 464], "logsumexp": 0, "long": 5, "longer": [5, 105, 466], "look": [2, 5, 465], "lookup": 329, "loop": [5, 6, 464, 465, 466, 468], "loshchilov": 444, "loss": [4, 6, 290, 315, 439, 464, 465, 466, 468], "loss_and_grad": 315, "loss_and_grad_fn": [6, 439, 464, 466], "loss_fn": [4, 6, 439, 464, 466], "loss_grad_fn": 465, "lot": [465, 466], "low": [241, 245, 394, 434], "low_pad_s": 0, "lower": [182, 183, 188, 231, 241, 244, 245, 287, 394], "lr": [4, 446], "lr_schedul": [453, 454, 455, 457], "lstm": 315, "lto": 2, "lu": 5, "luckili": 468, "lvalu": 290, "m": [0, 2, 5, 8, 90, 140, 163, 168, 185, 287, 317, 318, 342, 343, 440, 464], "m1": [1, 5, 464, 466, 472], "m10": 308, "m7": 308, "m_": [443, 444, 445, 446], "m_t": [443, 444, 445, 446], "mac": 465, "machin": [5, 7, 8, 451, 465], "maco": 8, "macosx": 8, "made": [5, 310], "mai": [2, 185, 298, 327, 465, 466, 467], "main": [7, 118, 140, 143, 285, 302, 303, 315, 465], "maintain": [327, 328, 446], "major": [0, 2], "make": [1, 2, 3, 5, 6, 8, 200, 222, 259, 315, 453, 454, 456, 457, 464, 468, 470, 472], "make_shar": 2, "malloc_or_wait": 2, "man": 5, "manag": [273, 461, 465, 472], "mani": [2, 83, 266, 320, 321, 322, 323, 324, 325, 329, 367, 464, 465, 468], "manual": 315, "map": [2, 6, 38, 190, 302, 329, 345], "map_fn": [345, 349], "map_torch_to_mlx": 5, "margin": [415, 419], "margin_ranking_loss": 315, "mask": [0, 5, 90, 146, 359, 365, 467], "mask_lh": [0, 90], "mask_n": 1, "mask_nw": 1, "mask_out": [0, 90], "mask_rh": [0, 90], "mask_s": 1, "mask_sw": 1, "matadata": 190, "match": [8, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 207, 352, 386, 408, 465, 467, 469], "materi": [5, 7], "math": [5, 419, 464], "mathbf": 183, "mathcal": 341, "mathemat": 185, "mathrm": [134, 260, 337], "matmul": [0, 163, 472], "matric": [185, 186, 187], "matrix": [0, 4, 14, 45, 90, 116, 117, 140, 141, 163, 164, 168, 169, 182, 183, 184, 185, 186, 187, 188, 200, 204, 231, 232, 239, 367, 368, 392, 434], "matter": [5, 315], "max": [0, 1, 2, 185, 202, 342, 343, 366, 401, 402, 407, 409, 410, 415, 419, 421, 423, 441, 445, 464, 466, 472], "max_": [342, 343], "max_buffer_s": 206, "max_freq": 377, "max_i": 231, "max_norm": 300, "max_recommended_working_set_s": 206, "max_val": 401, "maximum": [0, 6, 26, 38, 93, 108, 209, 213, 300, 315, 340, 371, 377, 397, 398, 403, 422, 437, 468], "maxpool1d": 315, "maxpool2d": 315, "maxtotalthreadsperthreadgroup": 2, "mca": 465, "md": 185, "me": 5, "mean": [0, 1, 4, 5, 6, 144, 238, 239, 240, 290, 315, 319, 333, 350, 369, 393, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 464, 466, 469], "meant": 112, "measur": 472, "mechan": 385, "medic": 328, "meet": 8, "member": [2, 315, 355, 360], "memori": [0, 1, 2, 7, 83, 205, 207, 208, 209, 211, 212, 213, 385, 437, 441, 464, 468, 469], "memory_order_relax": 1, "memory_s": 206, "memoryview": [468, 469], "merg": 464, "meshgrid": 0, "metadata": [4, 190, 254, 255], "metal": [2, 7, 143], "metal_captur": 3, "metal_kernel": 1, "metal_path": 8, "metallib": [2, 8], "method": [2, 5, 9, 10, 30, 112, 120, 298, 306, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 356, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 437, 440, 441, 442, 443, 444, 445, 446, 448, 451, 452, 459], "millisecond": [8, 464, 472], "min": [0, 2, 185, 217, 366, 401, 402, 421, 423], "min_freq": 377, "min_i": 231, "min_val": 401, "mind": [2, 5], "mine": 5, "minibatch": 6, "minim": 465, "minimum": [0, 27, 38, 93, 109, 377, 406, 407], "minsizerel": 8, "minu": 139, "minut": 5, "mish": 315, "miss": [352, 471], "mix": 467, "mkdir": [3, 8], "ml": 8, "mlp": [6, 315, 385, 439], "mlp_dim": [5, 385], "mlx": [1, 3, 4, 5, 6, 8, 310, 315, 434, 437, 439, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472], "mlx_build_benchmark": 8, "mlx_build_cpu": 8, "mlx_build_exampl": 8, "mlx_build_gguf": 8, "mlx_build_met": [2, 8], "mlx_build_metallib": 2, "mlx_build_python_bind": 8, "mlx_build_safetensor": 8, "mlx_build_test": 8, "mlx_disable_compil": [119, 132, 464], "mlx_ext": 2, "mlx_ext_metallib": 2, "mlx_include_dir": 2, "mlx_metal_debug": [3, 8], "mlx_metal_jit": 8, "mlx_sample_extens": 2, "mlx_trace": 3, "mnist": 6, "mode": [0, 1, 2, 105, 227, 348, 359, 361, 386, 390, 391, 465], "model": [4, 6, 7, 256, 298, 299, 302, 303, 315, 345, 348, 350, 352, 356, 359, 361, 362, 363, 365, 385, 434, 437, 439, 447, 448, 450, 464, 465, 468], "modest": 2, "modif": 469, "modifi": 469, "modul": [2, 5, 6, 11, 298, 299, 375, 385, 434, 450, 463, 464, 468], "moment": [5, 441, 443, 444, 445], "momentum": [319, 446, 448, 452, 464], "monei": 5, "monoton": 420, "more": [1, 2, 3, 6, 10, 78, 118, 163, 182, 183, 184, 187, 188, 200, 212, 213, 254, 255, 308, 315, 319, 327, 373, 377, 385, 386, 388, 389, 390, 391, 406, 461, 464, 465, 466, 467, 470, 472], "most": [2, 235, 315, 450, 464, 465, 466, 467, 468], "move": [0, 2, 218, 472], "moveaxi": 0, "mpi": 310, "mpiexec": 465, "mpirun": 465, "mse": 290, "mse_loss": 315, "mtl": 2, "mtl_capture_en": 3, "mtlcommandbuff": 2, "mu": 452, "much": [1, 2, 5, 317, 318, 342, 343, 464, 468], "multi": [7, 146, 320, 321, 322, 323, 324, 325, 467, 469], "multidimension": 204, "multiheadattent": [5, 315], "multipl": [0, 1, 8, 14, 90, 142, 144, 163, 164, 200, 219, 231, 232, 365, 377, 454, 455, 457, 464, 468, 471], "multipli": [0, 2, 38, 164, 231, 232, 326, 377, 386], "murtadha": 5, "must": [0, 1, 2, 3, 8, 90, 93, 145, 162, 164, 185, 234, 235, 239, 241, 244, 245, 295, 386, 469], "mx": [1, 2, 3, 4, 5, 6, 38, 96, 97, 112, 123, 126, 143, 159, 177, 185, 186, 190, 256, 290, 300, 315, 317, 318, 319, 337, 340, 342, 343, 345, 352, 356, 371, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 403, 406, 407, 408, 412, 415, 422, 432, 434, 437, 439, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473], "my": [5, 8], "my_devic": 473, "my_path": 256, "myexp": [1, 143], "myexp_strid": 1, "mymlp": 437, "n": [0, 1, 2, 5, 30, 90, 98, 99, 100, 101, 102, 103, 104, 140, 147, 149, 150, 152, 153, 156, 158, 168, 169, 239, 271, 287, 291, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 332, 338, 342, 343, 370, 386, 414, 419, 465], "n_i": [317, 318, 342, 343], "n_t": 332, "naiv": [2, 466], "naive_add": 466, "name": [1, 2, 11, 143, 164, 190, 231, 232, 254, 255, 256, 257, 315, 333, 349, 352, 354, 465, 467, 471], "named_modul": 315, "nan": [0, 16, 82, 171, 172, 174, 220], "nan_to_num": 0, "nanobind": [2, 385], "nanobind_add_modul": 2, "nativ": 8, "natur": [0, 191, 193, 468], "nb": 2, "nb_domain": 2, "nb_func": 385, "nb_modul": 2, "nb_static": 2, "nbyte": 2, "nc": 319, "ndarrai": [30, 467, 468, 470], "ndhwc": [322, 325, 328], "ndim": [0, 1, 2, 159, 185, 187, 386], "ne": 1, "nearest": [1, 386], "necessari": 315, "necessarili": 284, "need": [1, 2, 5, 6, 7, 8, 82, 231, 315, 363, 364, 377, 385, 461, 465, 466, 468, 469, 470, 472], "neg": [0, 118, 159, 175, 220, 285, 340, 342, 343, 365, 409, 417, 419, 467], "negat": [0, 221], "negative_slop": [340, 403], "neginf": [0, 220], "neighbor": 386, "neither": [165, 290], "nelem": 2, "nervou": 5, "nest": [78, 94, 304, 315, 437, 463, 466], "nesterov": 452, "network": [5, 7, 319, 327, 329, 388, 389, 434, 437, 451, 465], "neural": [5, 7, 329, 388, 389, 420, 434, 437, 451], "never": [5, 468], "new": [0, 2, 6, 91, 118, 218, 222, 249, 270, 286, 292, 302, 303, 357, 365, 437, 439, 450, 455, 464, 467, 468, 469], "new_tre": 303, "next": [2, 5, 6, 212], "nh": [332, 338, 370], "nhwc": [319, 321, 324], "nice": [466, 468], "nlc": [319, 320, 323], "nld": [332, 338, 370], "nlh": [332, 338, 370], "nll": [409, 417], "nll_loss": 315, "nn": [2, 5, 6, 256, 302, 315, 434, 437, 439, 448, 450, 464, 468], "nobodi": 5, "node": [94, 136, 294, 303, 304], "nois": 4, "noisi": 4, "nomins": 2, "non": [0, 1, 2, 8, 204, 360, 370, 420, 437], "none": [1, 2, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 115, 116, 117, 118, 119, 121, 122, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 211, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 301, 302, 303, 304, 306, 317, 318, 330, 342, 343, 345, 349, 350, 357, 362, 365, 370, 377, 385, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 441, 459, 467], "nonlinear": [370, 464], "nonzero": 467, "noop": 362, "nor": [2, 165, 290], "norm": [5, 144, 300, 333, 419, 445, 446], "norm1": 5, "norm2": 5, "norm_first": 385, "normal": [1, 2, 4, 5, 142, 143, 144, 239, 244, 315, 317, 318, 319, 333, 337, 339, 342, 343, 369, 385, 388, 390, 469, 472], "not_equ": 0, "notabl": [5, 7], "notat": [116, 141, 301, 354], "note": [0, 2, 5, 8, 16, 83, 90, 94, 100, 103, 104, 112, 146, 154, 155, 164, 171, 185, 207, 231, 235, 292, 298, 315, 369, 386, 439, 469, 471], "noth": [5, 315, 468], "notic": [5, 466, 471], "now": [1, 2, 5, 8, 368, 464, 465, 469], "np": [1, 5, 6, 465, 469, 470], "npy": [190, 253, 471], "npz": [5, 190, 256, 257, 352, 356, 471], "nuclear": 185, "nullopt": 0, "num": [0, 5, 189, 243], "num_class": [6, 439], "num_decoder_lay": 385, "num_embed": [329, 367], "num_encoder_lay": 385, "num_epoch": [6, 439], "num_exampl": 4, "num_featur": [4, 319], "num_group": 333, "num_head": [5, 365, 385], "num_it": 4, "num_lay": [5, 6, 439], "num_param": 315, "num_paramet": 366, "num_sampl": 235, "num_split": 0, "number": [0, 2, 11, 18, 61, 70, 94, 99, 100, 101, 103, 104, 116, 140, 141, 164, 165, 169, 178, 189, 220, 227, 231, 232, 235, 238, 240, 243, 245, 248, 251, 282, 283, 287, 290, 293, 294, 298, 315, 319, 320, 321, 322, 323, 324, 325, 327, 328, 333, 337, 365, 366, 385, 386, 388, 389, 390, 391, 453, 455, 456, 461, 464, 466, 473], "number_of_el": 0, "numer": [5, 142, 144, 185, 195, 199, 264, 319, 333, 337, 339, 369, 406, 407, 409, 419, 440, 441, 442, 443, 444, 445, 451, 464, 468], "numpi": [2, 5, 6, 7, 13, 16, 18, 87, 88, 89, 91, 128, 129, 133, 166, 167, 171, 179, 180, 181, 195, 200, 202, 217, 219, 223, 229, 247, 250, 274, 468, 470, 471], "nw": 1, "nwhc": 327, "o": [2, 8, 146, 338], "o_t": 338, "obj": 254, "object": [3, 10, 30, 50, 78, 94, 143, 177, 256, 294, 301, 302, 303, 304, 308, 327, 385, 463], "observ": 5, "occupi": [116, 141, 164, 231, 232], "occur": 469, "odim": 6, "odot": [332, 338], "off": [5, 8, 468], "offer": 414, "offset": [0, 1, 2, 5, 46, 83, 118, 142, 145, 285], "often": 328, "ok": [352, 466], "okai": [464, 468], "old": 5, "omit": [443, 445, 465], "onc": [2, 8, 464], "one": [0, 2, 5, 8, 38, 78, 84, 93, 99, 100, 101, 103, 104, 138, 140, 142, 144, 145, 185, 193, 200, 232, 235, 269, 274, 308, 362, 386, 408, 465, 472], "ones": [0, 2, 5, 225, 256, 287, 363, 364, 439, 465, 467], "ones_lik": 0, "onli": [1, 2, 5, 7, 8, 82, 90, 99, 100, 101, 103, 104, 185, 231, 239, 292, 315, 349, 350, 352, 357, 359, 362, 363, 364, 437, 464, 465, 466, 471, 472], "onlin": 442, "op": [1, 2, 226, 292, 350, 468], "open": [3, 8, 18, 241, 245], "openmpi": 465, "oper": [3, 5, 7, 9, 37, 84, 85, 86, 101, 146, 163, 164, 229, 264, 272, 279, 306, 315, 385, 446, 464, 465, 466, 467, 468, 469, 470, 472, 473], "operand": [130, 131, 163], "opportun": 464, "opt": [447, 465], "optim": [3, 4, 6, 7, 363, 464, 465, 466, 468], "option": [0, 3, 5, 14, 15, 17, 18, 26, 27, 28, 29, 83, 84, 85, 86, 90, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 116, 117, 118, 121, 122, 123, 125, 126, 127, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 169, 175, 176, 182, 183, 184, 185, 186, 187, 188, 189, 190, 199, 201, 203, 204, 213, 216, 220, 224, 227, 228, 230, 231, 232, 234, 235, 236, 238, 239, 240, 241, 243, 244, 245, 248, 249, 264, 265, 266, 269, 270, 271, 275, 277, 278, 282, 284, 285, 286, 287, 288, 289, 290, 291, 294, 296, 298, 301, 302, 303, 304, 317, 318, 319, 320, 321, 322, 323, 324, 325, 332, 338, 341, 342, 343, 345, 349, 350, 352, 357, 362, 365, 367, 368, 370, 373, 377, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 440, 441, 442, 443, 444, 445, 446, 448, 451, 452, 453, 461, 464, 471, 473], "ord": 185, "order": [0, 1, 28, 83, 101, 131, 185, 228, 231, 284, 315, 333, 363, 375, 448, 464, 466], "ordinari": 170, "org": [333, 337, 339, 344, 369, 398, 420], "origin": [5, 118, 300, 319, 358, 388, 389, 390, 391, 440, 441, 442, 443, 445, 446, 469], "orthonorm": 168, "ostream": 2, "ostringstream": 2, "other": [0, 2, 5, 7, 177, 185, 315, 351, 437, 446, 464, 465, 467, 468, 470], "other_input": 315, "otherwis": [18, 101, 123, 213, 298, 301, 302, 303, 304, 350, 352, 362, 383, 385, 386, 400, 406, 411, 418, 430, 431, 468, 469], "ouptut": 8, "our": [1, 2, 5, 6, 375, 440, 441, 442, 443, 445, 446, 465], "out": [0, 1, 2, 8, 90, 143, 317, 318, 327, 328, 342, 343, 359, 464, 465, 466, 467], "out_ax": [294, 466], "out_channel": [320, 321, 322, 323, 324, 325], "out_dim": [315, 437], "out_dtyp": 2, "out_idx": 2, "out_mask": 90, "out_proj": [5, 437], "out_ptr": 2, "out_shap": [1, 2], "outer": [0, 464, 468], "outlier": 414, "output": [0, 1, 2, 5, 8, 15, 16, 17, 18, 28, 83, 90, 91, 94, 96, 97, 108, 109, 110, 111, 112, 130, 140, 142, 143, 144, 145, 146, 153, 156, 157, 158, 162, 163, 165, 168, 169, 171, 185, 189, 199, 201, 203, 204, 216, 220, 224, 225, 228, 230, 234, 235, 236, 238, 239, 240, 241, 244, 245, 256, 257, 264, 269, 271, 275, 279, 285, 287, 290, 291, 292, 293, 294, 295, 296, 297, 317, 318, 319, 320, 321, 322, 323, 324, 325, 337, 341, 342, 343, 365, 368, 383, 385, 386, 388, 389, 390, 391, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 431, 434, 464, 465, 466, 467, 468, 469, 470, 471, 472], "output_dim": [6, 315, 341, 368], "output_directori": 2, "output_dtyp": [1, 143], "output_fil": 5, "output_nam": [1, 143], "output_shap": [1, 143], "outsid": [143, 159], "over": [0, 2, 5, 6, 15, 17, 26, 27, 28, 29, 98, 99, 100, 101, 102, 103, 104, 108, 109, 110, 111, 149, 152, 155, 158, 170, 185, 187, 189, 199, 201, 203, 216, 228, 230, 252, 264, 265, 271, 275, 282, 284, 291, 319, 320, 321, 322, 323, 324, 325, 333, 339, 369, 408, 453, 456, 465, 466], "overal": 2, "overhead": [464, 468, 472], "overlap": 1, "overrid": [2, 132], "overview": 3, "overwrit": 5, "own": [8, 469], "owndata": 469, "p": [8, 234, 315, 326, 327, 328, 419, 443, 445], "pack": [164, 231, 232], "packag": [2, 4, 6, 8, 310, 434, 465], "package_data": 2, "pad": [0, 1, 98, 99, 100, 101, 102, 103, 104, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 317, 318, 320, 321, 322, 323, 324, 325, 342, 343], "pad_valu": 0, "pad_width": [0, 227], "padding_hi": 0, "padding_lo": 0, "page": 470, "pain": 5, "pair": [0, 2, 227, 352, 373], "pairwis": 419, "pan": 5, "paper": [319, 377, 440, 441, 442, 443, 445, 446], "parallel": [465, 472], "param": [290, 315, 434, 466], "paramet": [0, 1, 2, 4, 5, 6, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 37, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 115, 116, 117, 118, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 212, 213, 214, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 340, 341, 342, 343, 345, 346, 349, 350, 352, 357, 358, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 375, 377, 381, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 399, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 431, 433, 434, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 459, 464, 465, 466, 468], "parameter_scal": 441, "parametr": [366, 421], "pars": 5, "parse_arg": 5, "parser": 5, "part": [1, 2, 466, 467], "partial": [363, 364, 464, 468], "particip": [121, 122, 125, 126, 127], "particular": [231, 333], "particularli": 464, "partit": [0, 28], "pass": [1, 2, 5, 6, 65, 79, 226, 227, 290, 299, 301, 302, 303, 315, 350, 362, 363, 364, 375, 464, 465, 468], "password": 465, "path": [3, 8, 131, 214, 256, 257, 298, 303, 352, 465], "pattern": [315, 468], "peak": [209, 211], "penalti": 452, "pep": 469, "per": [5, 6, 116, 141, 164, 231, 232, 298, 319, 333, 337, 339, 369, 459, 464, 465, 468], "perceptron": 7, "perf_count": 464, "perfectli": 468, "perform": [0, 1, 2, 3, 5, 7, 14, 90, 101, 108, 109, 110, 111, 127, 130, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 163, 164, 168, 200, 232, 251, 264, 278, 315, 333, 385, 390, 391, 439, 464, 465, 467, 468, 472], "perhap": [2, 5], "perm": 6, "permut": [0, 6], "persist": 8, "pg": 185, "phi": [330, 396], "physic": 465, "pi": [134, 330, 377, 397, 466], "pick": 2, "pip": [2, 8], "pipelin": 2, "pixel": 327, "place": [2, 5, 38, 251, 298, 465, 468, 469], "placehold": 464, "plai": [2, 5], "plain": 375, "plan": [2, 464], "platform": 8, "plu": [0, 193], "point": [0, 2, 4, 5, 8, 83, 161, 232, 308], "pointer": 2, "pool": [317, 318, 342, 343, 472], "popul": 2, "portion": 326, "posinf": [0, 220], "posit": [0, 5, 28, 118, 145, 159, 165, 176, 182, 183, 218, 220, 228, 239, 285, 290, 302, 315, 320, 321, 322, 323, 324, 325, 365, 373, 377, 409, 419], "possibl": [266, 329, 367, 464, 465, 467, 472], "possibli": [5, 14, 90, 163, 200, 300], "postur": 5, "potenti": 213, "power": [0, 466, 469], "practic": [2, 464], "pre": [8, 146, 406], "preced": 333, "precis": [0, 2, 5, 139, 146, 315, 330, 369, 406, 447, 464], "preclud": 315, "pred": [410, 414], "predic": [298, 357], "predict": [406, 409, 410, 411, 412, 413, 414, 416, 417, 418], "prefix": [294, 301], "prelu": 315, "prepar": [2, 5], "prepend": [3, 200], "preprint": [5, 440, 446], "preprocessor": 8, "present": 1, "preserv": [249, 466], "press": [5, 185], "pressur": 2, "pretti": [464, 468], "prevent": [272, 419, 469], "previou": [212, 213], "primal": [1, 2, 112, 178, 293], "primit": 466, "print": [1, 2, 4, 5, 6, 8, 300, 301, 302, 303, 305, 315, 461, 464, 465, 466, 467, 468, 469, 470], "prior": [278, 279], "priorit": 466, "privat": 2, "prng": [234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 461], "prob": 406, "probabl": [8, 241, 326, 327, 328, 368, 406, 408, 412, 472], "problem": [4, 6, 315], "process": [5, 101, 105, 120, 121, 122, 123, 125, 126, 127, 302, 303, 328, 329, 385, 463, 465], "processor": 8, "prod": [0, 1], "produc": [0, 2, 8, 94, 365, 434], "product": [0, 2, 14, 83, 110, 170, 178, 200, 226, 230, 282, 293, 365, 470], "profil": 3, "program": [209, 465], "programmat": 364, "project": [3, 5, 365], "project_source_dir": 2, "promot": 2, "promote_typ": 2, "promoted_dtyp": 2, "prompt": 5, "propag": [466, 467], "properti": [31, 38, 47, 51, 61, 62, 68, 70, 358, 361, 449, 466], "proportion": 300, "protocol": 469, "provid": [0, 2, 5, 83, 116, 141, 165, 282, 290, 302, 304, 310, 315, 345, 350, 352, 362, 363, 364, 367, 368, 385, 386, 433, 437, 465, 471, 473], "pseudo": 461, "pth": 5, "public": [2, 315], "pun": 0, "pure": [1, 315, 439], "purpos": [1, 185], "purs": 5, "push": 2, "push_back": 2, "put": [1, 6, 464, 465], "py": [2, 5, 8, 465], "pypi": 8, "python": [1, 3, 5, 50, 68, 78, 136, 301, 302, 303, 304, 305, 437, 447, 448, 450, 463, 465, 466, 469], "python_requir": 2, "pytorch": [5, 7, 330, 333, 466], "pytorch_compat": 333, "q": [146, 186], "qualifi": 465, "qualnam": 11, "quantiz": [0, 116, 141, 164, 190, 232, 367, 368], "quantized_matmul": 0, "quantizedembed": 315, "quantizedlinear": 315, "quarter": 5, "queri": [5, 146, 365], "query_input_dim": 365, "query_proj": 5, "question": [5, 468], "queue": 3, "quick": [2, 7], "quit": [466, 469], "quotient": [0, 128, 129, 161], "r": [2, 5, 186, 290, 327, 332], "r_t": 332, "race": 472, "radian": [0, 115], "rag": 5, "rain": 5, "rais": [0, 5, 185, 213, 229, 266, 352], "ram": 5, "random": [1, 2, 3, 4, 5, 6, 7, 143, 317, 318, 319, 337, 342, 343, 352, 359, 464, 466, 472, 473], "randomli": [4, 5, 326, 327, 328], "rang": [0, 2, 3, 4, 5, 6, 8, 18, 159, 163, 189, 389, 391, 397, 398, 439, 453, 454, 455, 456, 457, 461, 464, 466, 468, 472], "rank": [0, 125, 126, 127, 415, 465], "rate": [4, 439, 440, 441, 442, 443, 444, 445, 446, 451, 452], "rather": [2, 466, 472], "ratio": [0, 24], "rceil": 90, "re": [6, 8, 434], "readabl": 3, "readi": 2, "real": [153, 154, 155, 156, 157, 158, 182, 183], "realli": 339, "reason": [1, 5, 467], "reboot": 8, "receiv": [125, 126, 298, 455, 469], "reciproc": [0, 252], "reclaim": 212, "recommend": [8, 213, 446], "recompil": [94, 464], "record": [3, 209, 468], "recreat": [305, 439], "rectifi": [340, 371, 372, 390, 391, 403, 422, 423], "recurr": [332, 338, 370], "recurs": [315, 349, 350, 355, 360, 362, 437], "recv": 126, "redirect": 2, "reduc": [0, 1, 8, 15, 17, 26, 27, 122, 199, 201, 203, 216, 230, 271, 275, 291, 304, 319, 385, 414], "reduct": [15, 17, 122, 199, 201, 216, 230, 304, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 465], "redund": 466, "refer": [185, 337, 344, 358, 388, 389, 390, 391, 398, 420, 467], "reflect": [358, 464, 467, 469], "regard": 330, "regardless": [83, 146], "regist": [2, 6], "register_librari": 2, "regress": [7, 414], "regular": [38, 327, 420, 444, 464, 467], "regularli": 2, "reimplement": 2, "rel": [16, 171, 441, 464], "relative_step": 441, "relax": 213, "relev": 2, "reli": [1, 2], "relu": [315, 366, 385, 421, 434], "relu6": 315, "remain": [0, 5, 290, 303, 326, 327, 328, 465], "remaind": [0, 129], "remov": [0, 118, 200, 235, 269, 408], "rep": [0, 283], "repeat": [0, 283], "repeatedli": 4, "repetit": 248, "replac": [0, 5, 220, 363, 364, 385, 418], "replai": 3, "repli": 5, "repo": [4, 6, 8, 464], "report": [207, 213], "repres": [2, 5, 120, 123, 164, 415, 419, 469], "represent": [5, 231, 292, 301, 305], "request": 2, "requir": [1, 2, 5, 315, 465, 468, 469], "requires_grad": 466, "rerun": [464, 468], "rescal": 300, "research": 7, "reset": 211, "reset_peak_memori": 209, "reshap": [0, 5, 185, 386, 467], "resolv": 2, "resourc": 2, "respect": [2, 4, 6, 142, 144, 163, 164, 165, 231, 290, 302, 315, 319, 330, 333, 337, 339, 437, 466, 470], "respons": 2, "rest": [5, 145, 302, 303, 373], "restart": 8, "result": [0, 5, 14, 18, 38, 78, 83, 94, 142, 144, 164, 185, 200, 232, 239, 248, 270, 302, 303, 304, 377, 406, 464, 466, 469], "resum": 5, "return": [0, 1, 2, 4, 5, 6, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 37, 50, 68, 78, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 115, 116, 117, 118, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 212, 213, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 315, 332, 338, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 359, 360, 362, 363, 364, 370, 387, 388, 389, 390, 391, 392, 393, 394, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 434, 437, 447, 463, 464, 465, 466, 467, 468, 469, 471, 472], "return_metadata": 190, "revers": [0, 2, 41, 42, 43, 44, 83, 108, 109, 110, 111, 286, 377], "rf": 8, "rfft": 153, "rfft2": 154, "rfftn": 155, "rfloor": [317, 318, 342, 343], "rho": 440, "rhs_indic": [0, 163, 164], "rhs_mask": 90, "right": [0, 1, 2, 8, 231, 250, 317, 318, 330, 342, 343, 386, 397, 398, 409, 411, 419], "right_shift": 0, "rm": [5, 8, 144, 441], "rmsnorm": [5, 315], "rmsprop": 439, "rnn": [315, 332], "roadcast": 241, "robust": 414, "roform": [5, 373], "root": [0, 5, 144, 252, 267, 369], "rope": [5, 315], "rosetta": 8, "rotari": [5, 145, 373], "rotat": [145, 373], "round": [0, 231], "routin": 2, "row": [0, 1, 2, 83, 140, 143, 169, 231, 287], "row_contigu": 2, "rpath": 2, "rsqrt": 0, "rtol": [0, 16, 171], "rule": [2, 439], "run": [1, 2, 3, 5, 6, 7, 8, 9, 143, 226, 306, 319, 345, 440, 441, 443, 444, 445, 464, 465, 468, 472, 473], "runtim": [5, 123, 310, 464, 465], "runtime_error": 2, "safetensor": [8, 190, 255, 352, 356, 439, 468, 471], "sai": [2, 5, 434, 468], "said": 5, "sake": 466, "same": [0, 2, 5, 8, 16, 38, 82, 91, 94, 99, 100, 101, 103, 104, 105, 121, 142, 144, 153, 156, 157, 158, 164, 165, 171, 178, 227, 235, 251, 292, 293, 295, 303, 315, 318, 319, 326, 333, 337, 343, 367, 387, 388, 389, 390, 391, 392, 393, 394, 408, 419, 437, 447, 461, 464, 465, 467, 472], "sampl": [2, 4, 5, 189, 234, 235, 236, 238, 239, 241, 244, 245, 388, 389, 390, 391, 393, 394, 409, 415, 419, 461, 464], "sat": 5, "save": [3, 5, 7, 190, 214, 231, 254, 255, 256, 257, 356, 468], "save_gguf": 471, "save_safetensor": [356, 439, 471], "save_weight": 315, "savez": [5, 356, 471], "savez_compress": 471, "saw": [5, 466], "scalar": [0, 2, 13, 14, 16, 30, 50, 78, 82, 87, 88, 89, 90, 91, 93, 128, 129, 133, 161, 162, 165, 166, 167, 168, 171, 179, 180, 181, 189, 195, 196, 197, 198, 200, 202, 217, 219, 220, 223, 227, 229, 234, 241, 244, 245, 247, 250, 254, 274, 290, 292, 295, 299, 419, 466, 468, 470], "scale": [0, 2, 5, 14, 116, 141, 142, 144, 145, 146, 164, 168, 231, 232, 238, 240, 300, 327, 328, 339, 365, 373, 374, 377, 386, 424, 441], "scale_arr": 2, "scale_factor": 386, "scale_paramet": 441, "scatter": 0, "scatter_add": 0, "scatter_max": 0, "scatter_min": 0, "scatter_prod": 0, "schedul": [2, 213, 439, 453, 454, 455, 456, 457, 459, 472], "schema": 3, "scipi": 168, "scope": 315, "score": [5, 146, 415], "sdk": 8, "se": 1, "second": [5, 8, 118, 177, 179, 196, 198, 200, 250, 276, 285, 290, 318, 343, 407, 415, 441, 443, 444, 445, 466, 472], "second_layer_a": 468, "second_layer_b": 468, "secret": 5, "section": [1, 5, 8, 266, 419, 464, 465, 466], "see": [1, 2, 5, 6, 8, 10, 11, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 44, 46, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 185, 212, 254, 255, 298, 308, 315, 319, 327, 330, 334, 335, 336, 348, 366, 367, 368, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 384, 386, 388, 389, 390, 391, 396, 397, 398, 424, 464, 465, 466, 467, 470, 472], "seed": 237, "seen": 469, "select": [0, 3, 8, 284, 295, 345, 349, 357], "self": [5, 6, 9, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 112, 306, 315, 420, 437], "selu": 315, "semant": [13, 87, 88, 89, 91, 128, 129, 133, 166, 167, 179, 180, 181, 195, 200, 202, 217, 219, 223, 229, 247, 250, 274, 472], "semi": [182, 183, 239], "send": 465, "sennrich": 5, "sensit": 414, "sentencepiec": 5, "separ": [5, 65, 79, 333, 415], "sequenc": [5, 15, 17, 33, 34, 56, 57, 58, 59, 63, 71, 74, 75, 76, 80, 83, 91, 101, 125, 138, 143, 148, 149, 151, 152, 154, 155, 157, 158, 162, 199, 201, 203, 216, 224, 230, 234, 235, 236, 238, 239, 240, 241, 244, 245, 249, 264, 266, 269, 271, 275, 282, 283, 286, 291, 296, 319, 320, 323, 332, 338, 370, 385, 461, 472], "sequenti": [315, 434], "seri": 8, "serial": 439, "set": [2, 5, 6, 8, 94, 112, 119, 121, 122, 123, 125, 126, 127, 132, 142, 145, 206, 212, 213, 258, 259, 273, 330, 339, 341, 348, 350, 357, 358, 359, 362, 363, 368, 373, 383, 407, 419, 431, 437, 439, 441, 448, 461, 466, 468], "set_data": 2, "set_default_devic": 2, "set_dtyp": 315, "set_input_arrai": 2, "set_memory_limit": 212, "set_output_arrai": 2, "setbyt": 2, "setcomputepipelinest": 2, "setup": [2, 4, 6, 8, 464], "sever": [5, 8, 98, 99, 100, 101, 102, 103, 104, 256, 257, 464, 471], "sgd": [4, 6, 439, 446, 448, 453, 454, 457, 464], "shade": [1, 2], "shall": 5, "shape": [0, 2, 3, 5, 6, 65, 82, 83, 90, 91, 94, 98, 99, 100, 101, 102, 103, 104, 118, 121, 125, 126, 143, 146, 147, 150, 153, 156, 157, 158, 162, 163, 168, 178, 184, 188, 200, 224, 225, 234, 235, 236, 238, 239, 240, 241, 244, 245, 249, 279, 292, 293, 295, 296, 297, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 332, 337, 338, 341, 342, 343, 352, 370, 387, 388, 389, 390, 391, 392, 393, 394, 408, 419, 439, 464, 466, 467, 470, 472], "shapeless": [0, 94], "share": [7, 116, 141, 164, 231, 232, 292, 465], "shazeer": 5, "shift": [0, 179, 250, 319], "shop": 5, "should": [2, 4, 5, 6, 8, 83, 118, 121, 142, 143, 144, 146, 178, 205, 214, 231, 279, 285, 290, 293, 298, 301, 315, 320, 321, 322, 323, 324, 325, 327, 328, 359, 365, 375, 408, 410, 415, 437, 463, 464, 465, 466, 468, 469, 473], "show": [8, 308, 464], "shown": 2, "shuffl": 6, "side": [227, 317, 318, 342, 343, 464], "sigma": [330, 331, 332, 338, 388, 389, 390, 391, 398, 399, 404, 425, 426], "sigmoid": [0, 5, 315, 376, 398, 404, 406, 426], "sign": [0, 16, 171, 308, 446], "signal": [105, 386], "signatur": [1, 143], "signedinteg": [11, 177], "signific": 231, "silent": [156, 157, 158], "silicon": [2, 5, 7, 8, 472], "silu": 315, "simd": 1, "simd_sum": 1, "simdgroup": 1, "simdgroup_s": 1, "similar": [5, 164, 177, 302, 363, 364, 365, 407, 469, 471], "similarli": [2, 8, 200, 466, 468], "simpl": [2, 5, 6, 315, 329, 433, 439, 464, 465, 466, 468], "simple_axpbi": 2, "simple_tim": 2, "simplest": [2, 315, 465], "simpli": [2, 5, 8, 340, 371, 395, 403, 422, 432, 437, 464, 465, 466], "simplic": 0, "simultan": 1, "sin": [0, 112, 377, 466, 470], "sinc": [1, 2, 5, 6, 164, 209, 437, 446, 455, 469, 472], "sine": [0, 21, 22, 262, 263, 466], "sing": 185, "singer": 442, "singl": [2, 6, 136, 178, 190, 204, 227, 293, 318, 343, 464, 467, 471], "singleton": [0, 15, 17, 26, 27, 123, 199, 200, 201, 203, 216, 230, 271, 275, 291], "singular": [185, 187], "sinh": 0, "sinusoid": 377, "sinusoidalpositionalencod": 315, "size": [0, 1, 2, 5, 6, 51, 68, 90, 99, 100, 103, 104, 116, 138, 141, 142, 143, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 162, 164, 168, 169, 177, 185, 208, 213, 231, 232, 235, 249, 266, 269, 292, 298, 315, 317, 318, 320, 321, 322, 323, 324, 325, 329, 337, 342, 343, 367, 368, 386, 441, 465, 468, 469], "size_t": [0, 2], "sizeof": 2, "skip": [3, 83], "slice": [0, 467], "slice_s": 0, "slice_upd": 0, "slight": [5, 468], "slightli": [373, 472], "slope": 340, "slot": 465, "slow": 464, "slowli": 5, "small": [5, 139, 142, 144, 319, 333, 339, 369, 409, 414, 419, 464, 465, 472], "smaller": [0, 8, 228, 446, 464], "smallest": 185, "smile": 5, "smooth": [408, 418, 451], "smooth_l1_loss": 315, "sned": 127, "snippet": 465, "so": [1, 2, 5, 8, 165, 168, 290, 326, 386, 439, 464, 465, 468, 472], "softmax": [0, 5, 146, 315, 405, 408], "softmin": 315, "softplu": [315, 344, 420], "softshrink": 315, "softsign": 315, "solv": 315, "some": [0, 2, 4, 5, 6, 350, 362, 439, 448, 464, 466, 468], "someon": 5, "someth": [4, 5, 467], "sonoma": 8, "soon": 5, "sort": [0, 28, 29, 228, 284], "sourc": [0, 1, 2, 3, 60, 125, 126, 143, 218, 286, 465], "space": [0, 2, 189, 406, 417], "spars": [0, 204], "spatial": [99, 100, 101, 103, 104, 317, 333, 342, 386], "speak": [5, 185], "special": 2, "specif": [1, 2, 8, 465, 466], "specifi": [0, 2, 18, 37, 99, 100, 101, 103, 104, 118, 154, 155, 162, 165, 185, 189, 218, 224, 235, 248, 276, 278, 279, 282, 285, 286, 290, 294, 296, 319, 383, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 431, 465, 466, 472], "speed": [1, 2], "spent": 5, "split": [0, 331, 333, 399], "splittabl": 461, "sqrt": [0, 5, 134, 146, 168, 319, 330, 333, 337, 339, 341, 369, 377, 388, 389, 390, 391, 397, 440, 442, 443, 444, 451, 464], "squar": [0, 4, 5, 144, 169, 184, 188, 252, 267, 290, 302, 315, 369, 416, 418, 440, 441, 443, 444, 445, 466, 469], "squeez": [0, 386, 464], "src": [0, 125, 126], "ssh": 465, "stabil": [142, 144, 319, 333, 337, 339, 369, 406, 407, 409, 440, 441, 442, 443, 444, 445, 451], "stabl": [195, 199, 264, 414], "stable_abi": 2, "stack": [0, 464], "standard": [0, 1, 6, 50, 78, 200, 236, 240, 271, 385, 388, 390, 393, 465, 470], "starmap": [5, 302], "start": [0, 1, 2, 4, 5, 7, 8, 11, 18, 145, 189, 214, 266, 304, 464, 467, 472], "start_axi": [0, 49, 159], "start_captur": 3, "state": [5, 6, 315, 332, 338, 370, 439, 448, 461, 464], "static": 8, "static_cast": 2, "std": [0, 2, 393], "step": [0, 3, 5, 6, 18, 315, 332, 338, 370, 441, 448, 453, 455, 456, 457, 464, 465], "step_decai": 439, "step_siz": 457, "still": [5, 8, 185, 464, 468], "stochast": [442, 443, 445, 452, 468], "stood": 5, "stop": [0, 2, 5, 18, 189, 215, 272, 466, 467], "stop_captur": 3, "stop_gradi": [0, 466], "storag": 83, "store": 5, "str": [2, 105, 130, 131, 143, 165, 185, 190, 204, 206, 214, 253, 254, 255, 256, 257, 290, 301, 305, 345, 346, 349, 350, 352, 354, 356, 362, 386, 390, 391, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419], "straight": 5, "strang": 5, "stream": [2, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 121, 122, 125, 126, 127, 128, 129, 130, 133, 134, 135, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 295, 296, 297, 465, 472], "streamcontext": 273, "streamordevic": [0, 2], "street": 5, "strength": [446, 452], "strict": [123, 166, 180, 350, 352, 362], "strictli": 185, "stride": [0, 2, 83, 98, 99, 100, 101, 102, 103, 104, 317, 318, 320, 321, 322, 323, 324, 325, 342, 343, 373, 467], "string": [0, 2, 131, 143, 206, 227, 469, 471], "structur": [2, 447, 466], "stub": 8, "style": [2, 13, 16, 87, 88, 89, 128, 129, 133, 166, 167, 171, 179, 180, 181, 195, 200, 202, 217, 219, 223, 229, 247, 250, 274], "su": 5, "sub": [0, 6, 118, 243, 285, 298], "subarrai": [118, 266], "subclass": 437, "subdtyp": 177, "subgradi": 442, "sublinear": 441, "submodul": [5, 6, 315, 346, 350, 351, 362, 364], "subscript": [130, 131], "subsect": 5, "subsequ": 439, "subset": [315, 349], "substanti": 8, "subtract": [0, 38], "subtyp": [177, 308], "sudo": 8, "sum": [0, 2, 4, 13, 111, 122, 170, 185, 199, 264, 282, 285, 315, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 465, 467, 469], "sum_": [185, 317, 318, 414], "sum_i": 405, "sum_j": [427, 428], "summat": [130, 131], "super": [5, 6, 315, 437], "superset": [302, 447], "support": [1, 2, 5, 7, 8, 16, 90, 100, 103, 104, 146, 159, 168, 171, 182, 183, 184, 186, 187, 188, 190, 200, 231, 239, 465, 466, 467, 469, 471], "suppos": [466, 472], "sure": [2, 3, 5, 8, 315, 464], "surpass": [390, 391], "surpris": 5, "sw": 1, "swap": [0, 105, 213, 276, 364], "swapax": [0, 112], "swiglu": 5, "swish": [376, 426], "switch": 8, "symbol": 446, "symmetr": [99, 100, 103, 104, 182, 183], "synchron": [2, 464], "syntax": [38, 467], "synthet": 4, "system": [5, 8, 206, 207, 208], "t": [0, 1, 2, 5, 8, 134, 143, 146, 164, 182, 183, 232, 290, 315, 317, 332, 338, 342, 370, 440, 441, 442, 443, 444, 445, 446, 451, 452, 464, 466, 472], "tabl": [1, 185, 308, 329], "take": [0, 2, 5, 6, 87, 88, 89, 94, 163, 165, 178, 202, 217, 225, 232, 279, 290, 293, 294, 297, 303, 304, 365, 406, 461, 465, 466, 467, 471, 472, 473], "take_along_axi": [0, 467], "taken": [118, 278, 285], "talk": 465, "tan": 0, "tangent": [0, 2, 23, 24, 25, 112, 178, 280, 281, 384, 432], "tangent_i": 2, "tangent_x": 2, "tanh": [0, 315, 330, 332, 338, 344, 370, 397, 420], "target": [2, 290, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 464], "target_include_directori": 2, "target_link_librari": 2, "target_link_opt": 2, "target_sourc": 2, "task": [213, 414], "tau": 452, "tcp": 465, "tell": [5, 464, 469], "temp": 5, "templat": [0, 1, 2, 143], "ten": [466, 468], "tend": 446, "tensor": [190, 282, 317, 318, 342, 343, 419, 469], "tensordot": 0, "term": [2, 409, 440, 441, 442, 443, 444, 445, 451], "termin": 8, "test": [6, 8, 465], "test_imag": 6, "test_label": 6, "text": [5, 317, 318, 330, 332, 338, 342, 343, 344, 370, 383, 388, 389, 390, 391, 397, 400, 401, 402, 409, 410, 411, 414, 415, 418, 420, 421, 424, 425, 430, 431, 441, 446], "textrm": [231, 330, 331, 396, 399], "tf": 469, "tgp_size": 2, "th": [108, 109, 110, 111, 117, 140, 455], "than": [1, 2, 5, 78, 105, 118, 129, 145, 163, 166, 167, 180, 181, 182, 183, 184, 187, 188, 200, 212, 300, 302, 373, 383, 386, 415, 418, 431, 441, 446, 464, 466, 472], "thank": 468, "thei": [1, 2, 4, 5, 8, 16, 105, 164, 171, 375, 410, 437, 446, 463, 464, 465, 468, 470, 471, 472], "them": [2, 5, 121, 315, 350, 362, 465, 472], "themselv": [2, 464], "thi": [0, 1, 2, 5, 6, 8, 15, 16, 17, 18, 26, 27, 28, 29, 83, 112, 132, 143, 163, 164, 168, 171, 178, 182, 183, 184, 185, 186, 187, 188, 195, 199, 200, 201, 203, 205, 207, 216, 228, 230, 235, 259, 264, 265, 266, 271, 275, 278, 284, 291, 300, 303, 304, 315, 326, 327, 328, 331, 332, 338, 346, 347, 349, 350, 353, 354, 355, 360, 362, 363, 364, 365, 368, 370, 383, 388, 389, 390, 391, 397, 398, 399, 406, 414, 431, 437, 448, 463, 464, 465, 466, 468, 469, 471], "thing": [2, 5, 465], "thompson": 327, "those": [2, 5, 315], "though": [2, 5, 464, 468, 469], "thousand": 468, "thread": [1, 2], "thread_index_in_simdgroup": 1, "thread_position_in_grid": [1, 2, 143], "threadgroup": [1, 2, 143], "threads_per_simdgroup": 1, "three": [5, 86, 386], "threefri": 461, "threshold": [383, 411, 418, 431], "through": [1, 2, 272, 385, 446, 464, 466, 469], "throw": [2, 94, 123], "thu": [5, 315], "thumb": 439, "tic": 464, "tieleman": 451, "tile": [0, 146], "time": [2, 5, 8, 213, 283, 315, 317, 318, 332, 338, 342, 343, 370, 464, 466, 468, 472], "timeit": [464, 466], "titl": 2, "tmp": [1, 143], "to_quant": 298, "to_stream": 2, "toc": 464, "togeth": [0, 1, 2, 6, 231, 302, 303, 465], "tok_embed": 5, "token": [5, 329, 367], "told": 5, "toler": [0, 16, 171], "too": [177, 464, 468], "took": 5, "tool": 8, "top": [2, 284, 341, 386], "topk": 0, "torch": [5, 469], "torch_weight": 5, "total": 466, "total_norm": 300, "tpi": 464, "trace": [0, 3, 464], "trace_fil": 3, "tracer": 363, "track": [2, 315, 319], "track_running_stat": 319, "trade": 468, "tradit": [5, 145, 327, 328, 373], "train": [5, 6, 315, 319, 326, 327, 328, 348, 350, 362, 388, 389], "train_imag": [6, 439], "train_label": [6, 439], "trainabl": [6, 299, 315, 437], "trainable_paramet": [315, 349, 448], "transform": [1, 5, 7, 112, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 168, 299, 315, 319, 333, 339, 341, 349, 350, 362, 368, 373, 467], "transformerencod": 256, "transit": 455, "translat": [142, 339], "transpos": [0, 5, 31, 102, 103, 104, 164, 232, 323, 324, 325], "treat": [0, 2, 154, 155, 157, 158, 278, 386, 464], "tree": [7, 94, 136, 165, 290, 294, 301, 302, 303, 304, 305, 447, 448, 450, 459, 466], "tree_flatten": [256, 302, 305, 315, 439], "tree_map": [303, 315, 465], "tree_unflatten": [5, 439], "trembl": 5, "tri": 0, "triangl": 287, "triangular": [182, 183, 188], "tril": 0, "trilinear": 386, "triplet": 419, "triplet_loss": 315, "triu": 0, "true": [0, 1, 2, 4, 5, 16, 41, 42, 43, 44, 82, 94, 108, 109, 110, 111, 143, 145, 164, 171, 177, 182, 183, 185, 190, 204, 213, 232, 264, 295, 298, 301, 302, 303, 304, 308, 315, 319, 320, 321, 322, 323, 324, 325, 332, 333, 337, 338, 339, 341, 349, 350, 352, 359, 362, 368, 370, 373, 377, 385, 386, 406, 414, 441], "truncat": [147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 244], "truth": [4, 408, 418], "try": [2, 8], "tupl": [0, 30, 65, 68, 79, 95, 99, 100, 101, 103, 104, 125, 129, 131, 136, 138, 178, 185, 186, 187, 227, 231, 249, 269, 290, 293, 301, 302, 303, 304, 305, 317, 318, 321, 322, 324, 325, 342, 343, 352, 354, 375, 386, 441, 443, 444, 445, 446, 463, 466], "tutori": 2, "twice": 472, "two": [0, 2, 13, 14, 16, 24, 82, 85, 87, 88, 89, 90, 118, 128, 133, 148, 151, 157, 163, 164, 166, 167, 171, 180, 181, 182, 183, 184, 186, 187, 188, 195, 200, 202, 217, 219, 223, 226, 276, 304, 318, 331, 338, 343, 399, 407, 464, 465, 466, 467, 472], "txt": 2, "type": [0, 1, 2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 37, 68, 78, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 115, 116, 117, 118, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 212, 213, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 304, 315, 357, 385, 387, 388, 389, 390, 391, 392, 393, 394, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 464, 467], "type_nam": 2, "type_to_nam": 2, "typenam": [0, 1, 2], "typic": [0, 146, 329, 439, 464, 468], "u": [1, 2, 182, 187, 341, 364, 459, 468], "u_": 440, "u_t": 440, "uint": [1, 2, 143], "uint16": [11, 308], "uint3": 1, "uint32": [11, 26, 27, 28, 29, 235, 308], "uint64": [11, 308], "uint8": [11, 308], "ultra": 5, "unabl": 8, "unam": 8, "unari": 464, "unchang": [145, 272, 373], "uncheck": 8, "uncompress": 256, "undefin": [0, 28, 112, 182, 183, 228, 239, 467], "under": [2, 185], "underli": [2, 292], "understand": [5, 388, 389], "unexpect": [2, 18], "unfreez": [315, 350], "unfrozen": 362, "unifi": 7, "uniform": [3, 315, 341, 352, 389, 391, 434, 461, 464, 466, 472], "uniformli": 245, "unintend": 0, "union": [84, 85, 86, 175, 176, 177, 254], "uniqu": [2, 461], "unique_ptr": 2, "unit": [330, 331, 332, 340, 371, 372, 374, 376, 388, 389, 390, 391, 395, 396, 397, 398, 399, 403, 422, 423, 424, 426], "unittest": 8, "univers": 185, "unless": [5, 16, 171, 185, 437], "unlik": [5, 16, 171, 327, 328, 358], "unnecessari": [2, 5], "unnorm": [235, 406, 408], "unscal": 441, "unsign": [164, 231, 232, 308], "unsignedinteg": 11, "unspecifi": [15, 17, 18, 26, 27, 28, 29, 95, 108, 109, 110, 111, 162, 199, 201, 203, 216, 224, 228, 230, 248, 264, 265, 271, 275, 278, 284, 285, 291, 296, 473], "unsqueez": 5, "unsupport": 190, "until": [2, 468, 470], "unus": 2, "up": [1, 2, 5, 112, 464], "upcast": 2, "updat": [0, 1, 2, 4, 5, 6, 38, 94, 298, 302, 304, 319, 345, 346, 352, 357, 358, 359, 364, 439, 441, 444, 446, 447, 448, 452, 453, 454, 455, 456, 457, 464, 465, 468], "update_modul": 315, "upon": [5, 302, 303], "upper": [182, 183, 188, 231, 241, 244, 245, 394], "upsampl": 315, "us": [0, 3, 4, 5, 6, 7, 8, 18, 38, 83, 112, 116, 119, 121, 122, 125, 126, 127, 129, 141, 143, 145, 159, 164, 179, 182, 183, 184, 185, 186, 187, 188, 200, 207, 208, 209, 212, 231, 232, 248, 249, 250, 277, 301, 304, 308, 310, 315, 318, 327, 329, 330, 332, 338, 341, 343, 345, 349, 356, 363, 365, 367, 368, 370, 373, 377, 385, 386, 390, 391, 397, 398, 407, 434, 437, 439, 440, 441, 443, 444, 445, 446, 447, 448, 461, 463, 464, 465, 466, 467, 470, 472], "usag": [112, 385, 464], "user": [2, 5, 315], "usual": [329, 367, 463, 468], "util": [1, 2, 5, 7, 8, 256, 315, 439, 465], "v": [5, 105, 146, 315, 350, 469], "v_": [440, 442, 443, 444, 445, 451, 452], "v_t": [440, 442, 443, 444, 445, 451, 452], "val": [0, 30, 162], "valid": [6, 105, 159, 294, 301, 350, 362, 463], "valid_parameter_filt": 345, "valu": [0, 1, 4, 5, 11, 12, 16, 18, 26, 27, 50, 78, 82, 93, 140, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 171, 185, 187, 189, 206, 220, 227, 234, 235, 236, 238, 239, 240, 241, 244, 245, 254, 278, 279, 290, 294, 299, 301, 302, 303, 304, 308, 318, 326, 327, 328, 334, 337, 341, 343, 349, 365, 366, 381, 383, 385, 387, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 431, 437, 441, 444, 453, 454, 456, 457, 466], "value_and_grad": [6, 112, 315, 363, 437, 439, 450, 464, 466, 469, 470], "value_and_grad_fn": 468, "value_cach": 5, "value_dim": 365, "value_input_dim": 365, "value_output_dim": 365, "value_proj": 5, "valueerror": [185, 352, 466], "values_hat": 5, "van": 185, "var": [0, 319, 333, 337, 339, 409], "variabl": [8, 94, 119, 132, 165, 178, 290, 293, 294, 465], "varianc": [0, 271, 291, 319, 333, 409], "variant": [5, 418, 445], "variou": 185, "vector": [0, 2, 4, 7, 170, 178, 185, 278, 293, 294, 329, 408, 470], "verbos": [1, 143], "veri": [5, 365, 465, 468, 472], "verifi": [4, 8], "version": [2, 8, 116, 141, 195, 199, 231, 264, 294, 461, 466, 467], "versu": 464, "via": [8, 112, 447, 450, 465, 468, 469], "video": 328, "view": [0, 3, 83, 469], "virtual": 2, "vjp": [2, 112, 470], "vmap": [2, 112, 466, 468, 470], "vmap_add": 466, "vocab_s": 5, "vocabulari": [329, 367], "void": [1, 2], "vt": 187, "w": [0, 1, 4, 99, 100, 103, 104, 116, 141, 164, 231, 232, 290, 303, 318, 319, 321, 322, 324, 325, 327, 328, 341, 343, 439, 452, 466], "w1": [5, 300], "w2": [5, 300], "w3": 5, "w_": [318, 332, 338, 343, 370, 440, 441, 442, 443, 444, 445, 446, 451, 452], "w_1": 231, "w_g": 231, "w_i": [116, 141, 231], "w_in": 1, "w_q": 231, "w_star": 4, "w_stride": 1, "w_t": [440, 442, 443, 444, 445, 446, 451, 452], "wa": [5, 83, 125, 126, 465, 468], "wai": [2, 5, 8, 315, 386, 464, 465, 466, 467], "wait": [2, 5, 213], "walk": 5, "walkthrough": 2, "walsh": 168, "want": [1, 5, 465, 466, 472], "warm": [2, 464], "warmup": [455, 456], "warmup_init": 441, "watch": [5, 464], "wd": 446, "we": [0, 1, 2, 4, 5, 6, 116, 125, 126, 141, 164, 231, 232, 315, 329, 367, 375, 444, 446, 461, 463, 464, 465, 466, 468, 472], "weight": [0, 4, 98, 99, 100, 101, 102, 103, 104, 142, 144, 302, 315, 352, 356, 367, 368, 406, 408, 437, 441, 444, 446, 448, 452, 466, 468], "weight_decai": [441, 444, 446, 452], "weight_fil": 5, "weights_fp16": 468, "well": [5, 315, 350, 362, 365, 468], "wen": 5, "went": 5, "were": [5, 472], "wet": 5, "what": [2, 5, 302], "whatsoev": 5, "whc": 327, "when": [0, 1, 2, 5, 7, 8, 94, 101, 112, 127, 182, 183, 184, 185, 187, 188, 190, 320, 321, 322, 323, 324, 325, 386, 390, 391, 406, 412, 418, 437, 439, 455, 461, 464, 465, 472], "where": [0, 6, 140, 171, 183, 231, 290, 294, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 333, 337, 338, 339, 341, 342, 343, 349, 366, 369, 370, 383, 390, 391, 395, 396, 398, 409, 415, 421, 424, 426, 431, 448, 465, 466, 467], "wherea": 466, "whether": [143, 164, 188, 232, 332, 338, 349, 365, 370, 406, 409, 415], "which": [0, 1, 2, 5, 6, 7, 8, 18, 37, 83, 94, 101, 118, 121, 122, 125, 126, 127, 136, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 165, 172, 173, 174, 175, 176, 178, 182, 183, 184, 185, 186, 187, 188, 190, 204, 214, 231, 235, 236, 248, 249, 253, 254, 255, 256, 257, 269, 270, 278, 285, 290, 293, 294, 298, 318, 327, 328, 330, 343, 345, 349, 373, 406, 408, 411, 415, 418, 434, 447, 448, 461, 464, 465, 466, 467, 468, 472, 473], "while": [2, 3, 5, 8, 249, 373, 468, 469], "whistl": 2, "who": 5, "whose": [140, 298, 299], "why": 5, "wide": 468, "width": [318, 319, 321, 322, 324, 325, 327, 328, 343, 367, 368], "window": [8, 317, 318, 342, 343], "wipe": 8, "wise": [0, 2, 12, 13, 19, 20, 21, 22, 23, 24, 25, 87, 88, 89, 92, 106, 107, 128, 129, 133, 134, 135, 137, 139, 160, 161, 166, 167, 171, 179, 180, 181, 191, 192, 193, 194, 195, 196, 197, 198, 202, 217, 219, 221, 223, 229, 246, 247, 250, 252, 260, 261, 262, 263, 267, 268, 274, 280, 281, 327, 328, 336, 344, 366, 401, 402, 404, 405, 420, 421, 423, 426, 427, 428, 429, 464], "wish": 8, "with_logit": 406, "within": [0, 3, 28, 171], "without": [1, 5, 7, 272, 365, 433, 463, 464, 465, 468, 469, 472], "wk": 5, "wl": 2, "wo": 5, "won": 464, "word": 0, "work": [2, 3, 5, 213, 464, 465, 466, 467, 468], "workhors": 315, "world": [305, 465], "worri": [1, 468], "would": [2, 5, 386, 465, 467, 468, 469, 472], "wq": 5, "wrap": [112, 315], "write": [0, 1, 2, 5, 315, 469], "written": 2, "wrt": 299, "wv": 5, "x": [0, 1, 2, 4, 5, 6, 38, 90, 112, 121, 122, 126, 127, 134, 139, 142, 143, 144, 164, 168, 169, 185, 232, 236, 251, 256, 260, 288, 289, 295, 302, 304, 315, 317, 318, 319, 330, 331, 333, 337, 339, 340, 341, 342, 343, 344, 345, 366, 369, 371, 377, 383, 386, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 437, 439, 446, 464, 465, 466, 467, 468, 469, 470, 472], "x1": 407, "x2": 407, "x86_64": 8, "x_1": [407, 415], "x_2": [407, 415], "x_cast": 2, "x_grad": 1, "x_i": [405, 427, 428], "x_j": [427, 428], "x_offset": 2, "x_ptr": 2, "x_shape": 1, "x_stride": 2, "x_t": [332, 338, 370], "x_view": 469, "xcode": 8, "xcodeproj": 3, "xcrun": 8, "xf": 338, "xg": 338, "xi": 338, "xn": 332, "xo": 338, "xor": 89, "xr": 332, "xy": [0, 204], "xz": 332, "x\u00b2": 469, "y": [0, 2, 4, 5, 6, 38, 112, 168, 295, 315, 319, 327, 333, 337, 339, 341, 369, 410, 415, 418, 439, 442, 464, 465, 466, 468, 469], "y_": [410, 414], "y_cast": 2, "y_hat": 315, "y_offset": 2, "y_ptr": 2, "y_stride": 2, "ye": 5, "year": 5, "yet": [5, 185, 315, 437, 448, 466, 467, 468, 470], "yield": [5, 6, 461], "you": [2, 3, 5, 6, 7, 8, 315, 377, 385, 434, 461, 464, 465, 466, 467, 469, 471, 472], "your": [2, 5, 8, 437, 466, 468], "z": [2, 332, 464, 468], "z_t": 332, "zeiler": 440, "zero": [0, 140, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 204, 211, 287, 288, 289, 297, 315, 317, 318, 326, 327, 328, 352, 387, 388, 389, 390, 391, 392, 393, 394, 434, 439, 441, 467], "zero_grad": 466, "zeros_lik": 0, "zhang": 5, "zip": [5, 6], "zip_saf": 2}, "titles": ["Operations", "Custom Metal Kernels", "Custom Extensions in MLX", "Metal Debugger", "Linear Regression", "LLM inference", "Multi-Layer Perceptron", "MLX", "Build and Install", "mlx.core.Device", "mlx.core.Dtype", "mlx.core.DtypeCategory", "mlx.core.abs", "mlx.core.add", "mlx.core.addmm", "mlx.core.all", "mlx.core.allclose", "mlx.core.any", "mlx.core.arange", "mlx.core.arccos", "mlx.core.arccosh", "mlx.core.arcsin", "mlx.core.arcsinh", "mlx.core.arctan", "mlx.core.arctan2", "mlx.core.arctanh", "mlx.core.argmax", "mlx.core.argmin", "mlx.core.argpartition", "mlx.core.argsort", "mlx.core.array", "mlx.core.array.T", "mlx.core.array.abs", "mlx.core.array.all", "mlx.core.array.any", "mlx.core.array.argmax", "mlx.core.array.argmin", "mlx.core.array.astype", "mlx.core.array.at", "mlx.core.array.conj", "mlx.core.array.cos", "mlx.core.array.cummax", "mlx.core.array.cummin", "mlx.core.array.cumprod", "mlx.core.array.cumsum", "mlx.core.array.diag", "mlx.core.array.diagonal", "mlx.core.array.dtype", "mlx.core.array.exp", "mlx.core.array.flatten", "mlx.core.array.item", "mlx.core.array.itemsize", "mlx.core.array.log", "mlx.core.array.log10", "mlx.core.array.log1p", "mlx.core.array.log2", "mlx.core.array.logsumexp", "mlx.core.array.max", "mlx.core.array.mean", "mlx.core.array.min", "mlx.core.array.moveaxis", "mlx.core.array.nbytes", "mlx.core.array.ndim", "mlx.core.array.prod", "mlx.core.array.reciprocal", "mlx.core.array.reshape", "mlx.core.array.round", "mlx.core.array.rsqrt", "mlx.core.array.shape", "mlx.core.array.sin", "mlx.core.array.size", "mlx.core.array.split", "mlx.core.array.sqrt", "mlx.core.array.square", "mlx.core.array.squeeze", "mlx.core.array.std", "mlx.core.array.sum", "mlx.core.array.swapaxes", "mlx.core.array.tolist", "mlx.core.array.transpose", "mlx.core.array.var", "mlx.core.array.view", "mlx.core.array_equal", "mlx.core.as_strided", "mlx.core.atleast_1d", "mlx.core.atleast_2d", "mlx.core.atleast_3d", "mlx.core.bitwise_and", "mlx.core.bitwise_or", "mlx.core.bitwise_xor", "mlx.core.block_masked_mm", "mlx.core.broadcast_to", "mlx.core.ceil", "mlx.core.clip", "mlx.core.compile", "mlx.core.concatenate", "mlx.core.conj", "mlx.core.conjugate", "mlx.core.conv1d", "mlx.core.conv2d", "mlx.core.conv3d", "mlx.core.conv_general", "mlx.core.conv_transpose1d", "mlx.core.conv_transpose2d", "mlx.core.conv_transpose3d", "mlx.core.convolve", "mlx.core.cos", "mlx.core.cosh", "mlx.core.cummax", "mlx.core.cummin", "mlx.core.cumprod", "mlx.core.cumsum", "mlx.core.custom_function", "mlx.core.default_device", "mlx.core.default_stream", "mlx.core.degrees", "mlx.core.dequantize", "mlx.core.diag", "mlx.core.diagonal", "mlx.core.disable_compile", "mlx.core.distributed.Group", "mlx.core.distributed.all_gather", "mlx.core.distributed.all_sum", "mlx.core.distributed.init", "mlx.core.distributed.is_available", "mlx.core.distributed.recv", "mlx.core.distributed.recv_like", "mlx.core.distributed.send", "mlx.core.divide", "mlx.core.divmod", "mlx.core.einsum", "mlx.core.einsum_path", "mlx.core.enable_compile", "mlx.core.equal", "mlx.core.erf", "mlx.core.erfinv", "mlx.core.eval", "mlx.core.exp", "mlx.core.expand_dims", "mlx.core.expm1", "mlx.core.eye", "mlx.core.fast.affine_quantize", "mlx.core.fast.layer_norm", "mlx.core.fast.metal_kernel", "mlx.core.fast.rms_norm", "mlx.core.fast.rope", "mlx.core.fast.scaled_dot_product_attention", "mlx.core.fft.fft", "mlx.core.fft.fft2", "mlx.core.fft.fftn", "mlx.core.fft.ifft", "mlx.core.fft.ifft2", "mlx.core.fft.ifftn", "mlx.core.fft.irfft", "mlx.core.fft.irfft2", "mlx.core.fft.irfftn", "mlx.core.fft.rfft", "mlx.core.fft.rfft2", "mlx.core.fft.rfftn", "mlx.core.flatten", "mlx.core.floor", "mlx.core.floor_divide", "mlx.core.full", "mlx.core.gather_mm", "mlx.core.gather_qmm", "mlx.core.grad", "mlx.core.greater", "mlx.core.greater_equal", "mlx.core.hadamard_transform", "mlx.core.identity", "mlx.core.inner", "mlx.core.isclose", "mlx.core.isfinite", "mlx.core.isinf", "mlx.core.isnan", "mlx.core.isneginf", "mlx.core.isposinf", "mlx.core.issubdtype", "mlx.core.jvp", "mlx.core.left_shift", "mlx.core.less", "mlx.core.less_equal", "mlx.core.linalg.cholesky", "mlx.core.linalg.cholesky_inv", "mlx.core.linalg.inv", "mlx.core.linalg.norm", "mlx.core.linalg.qr", "mlx.core.linalg.svd", "mlx.core.linalg.tri_inv", "mlx.core.linspace", "mlx.core.load", "mlx.core.log", "mlx.core.log10", "mlx.core.log1p", "mlx.core.log2", "mlx.core.logaddexp", "mlx.core.logical_and", "mlx.core.logical_not", "mlx.core.logical_or", "mlx.core.logsumexp", "mlx.core.matmul", "mlx.core.max", "mlx.core.maximum", "mlx.core.mean", "mlx.core.meshgrid", "mlx.core.metal.clear_cache", "mlx.core.metal.device_info", "mlx.core.metal.get_active_memory", "mlx.core.metal.get_cache_memory", "mlx.core.metal.get_peak_memory", "mlx.core.metal.is_available", "mlx.core.metal.reset_peak_memory", "mlx.core.metal.set_cache_limit", "mlx.core.metal.set_memory_limit", "mlx.core.metal.start_capture", "mlx.core.metal.stop_capture", "mlx.core.min", "mlx.core.minimum", "mlx.core.moveaxis", "mlx.core.multiply", "mlx.core.nan_to_num", "mlx.core.negative", "mlx.core.new_stream", "mlx.core.not_equal", "mlx.core.ones", "mlx.core.ones_like", "mlx.core.outer", "mlx.core.pad", "mlx.core.partition", "mlx.core.power", "mlx.core.prod", "mlx.core.quantize", "mlx.core.quantized_matmul", "mlx.core.radians", "mlx.core.random.bernoulli", "mlx.core.random.categorical", "mlx.core.random.gumbel", "mlx.core.random.key", "mlx.core.random.laplace", "mlx.core.random.multivariate_normal", "mlx.core.random.normal", "mlx.core.random.randint", "mlx.core.random.seed", "mlx.core.random.split", "mlx.core.random.truncated_normal", "mlx.core.random.uniform", "mlx.core.reciprocal", "mlx.core.remainder", "mlx.core.repeat", "mlx.core.reshape", "mlx.core.right_shift", "mlx.core.round", "mlx.core.rsqrt", "mlx.core.save", "mlx.core.save_gguf", "mlx.core.save_safetensors", "mlx.core.savez", "mlx.core.savez_compressed", "mlx.core.set_default_device", "mlx.core.set_default_stream", "mlx.core.sigmoid", "mlx.core.sign", "mlx.core.sin", "mlx.core.sinh", "mlx.core.softmax", "mlx.core.sort", "mlx.core.split", "mlx.core.sqrt", "mlx.core.square", "mlx.core.squeeze", "mlx.core.stack", "mlx.core.std", "mlx.core.stop_gradient", "mlx.core.stream", "mlx.core.subtract", "mlx.core.sum", "mlx.core.swapaxes", "mlx.core.synchronize", "mlx.core.take", "mlx.core.take_along_axis", "mlx.core.tan", "mlx.core.tanh", "mlx.core.tensordot", "mlx.core.tile", "mlx.core.topk", "mlx.core.trace", "mlx.core.transpose", "mlx.core.tri", "mlx.core.tril", "mlx.core.triu", "mlx.core.value_and_grad", "mlx.core.var", "mlx.core.view", "mlx.core.vjp", "mlx.core.vmap", "mlx.core.where", "mlx.core.zeros", "mlx.core.zeros_like", "mlx.nn.quantize", "mlx.nn.value_and_grad", "mlx.optimizers.clip_grad_norm", "mlx.utils.tree_flatten", "mlx.utils.tree_map", "mlx.utils.tree_map_with_path", "mlx.utils.tree_reduce", "mlx.utils.tree_unflatten", "mlx.core.Stream", "Array", "Data Types", "Devices and Streams", "Distributed Communication", "Fast", "FFT", "Linear Algebra", "Metal", "Neural Networks", "mlx.nn.ALiBi", "mlx.nn.AvgPool1d", "mlx.nn.AvgPool2d", "mlx.nn.BatchNorm", "mlx.nn.Conv1d", "mlx.nn.Conv2d", "mlx.nn.Conv3d", "mlx.nn.ConvTranspose1d", "mlx.nn.ConvTranspose2d", "mlx.nn.ConvTranspose3d", "mlx.nn.Dropout", "mlx.nn.Dropout2d", "mlx.nn.Dropout3d", "mlx.nn.Embedding", "mlx.nn.GELU", "mlx.nn.GLU", "mlx.nn.GRU", "mlx.nn.GroupNorm", "mlx.nn.HardShrink", "mlx.nn.HardTanh", "mlx.nn.Hardswish", "mlx.nn.InstanceNorm", "mlx.nn.LSTM", "mlx.nn.LayerNorm", "mlx.nn.LeakyReLU", "mlx.nn.Linear", "mlx.nn.MaxPool1d", "mlx.nn.MaxPool2d", "mlx.nn.Mish", "mlx.nn.Module.apply", "mlx.nn.Module.apply_to_modules", "mlx.nn.Module.children", "mlx.nn.Module.eval", "mlx.nn.Module.filter_and_map", "mlx.nn.Module.freeze", "mlx.nn.Module.leaf_modules", "mlx.nn.Module.load_weights", "mlx.nn.Module.modules", "mlx.nn.Module.named_modules", "mlx.nn.Module.parameters", "mlx.nn.Module.save_weights", "mlx.nn.Module.set_dtype", "mlx.nn.Module.state", "mlx.nn.Module.train", "mlx.nn.Module.trainable_parameters", "mlx.nn.Module.training", "mlx.nn.Module.unfreeze", "mlx.nn.Module.update", "mlx.nn.Module.update_modules", "mlx.nn.MultiHeadAttention", "mlx.nn.PReLU", "mlx.nn.QuantizedEmbedding", "mlx.nn.QuantizedLinear", "mlx.nn.RMSNorm", "mlx.nn.RNN", "mlx.nn.ReLU", "mlx.nn.ReLU6", "mlx.nn.RoPE", "mlx.nn.SELU", "mlx.nn.Sequential", "mlx.nn.SiLU", "mlx.nn.SinusoidalPositionalEncoding", "mlx.nn.Softmax", "mlx.nn.Softmin", "mlx.nn.Softplus", "mlx.nn.Softshrink", "mlx.nn.Softsign", "mlx.nn.Step", "mlx.nn.Tanh", "mlx.nn.Transformer", "mlx.nn.Upsample", "mlx.nn.init.constant", "mlx.nn.init.glorot_normal", "mlx.nn.init.glorot_uniform", "mlx.nn.init.he_normal", "mlx.nn.init.he_uniform", "mlx.nn.init.identity", "mlx.nn.init.normal", "mlx.nn.init.uniform", "mlx.nn.elu", "mlx.nn.gelu", "mlx.nn.gelu_approx", "mlx.nn.gelu_fast_approx", "mlx.nn.glu", "mlx.nn.hard_shrink", "mlx.nn.hard_tanh", "mlx.nn.hardswish", "mlx.nn.leaky_relu", "mlx.nn.log_sigmoid", "mlx.nn.log_softmax", "mlx.nn.losses.binary_cross_entropy", "mlx.nn.losses.cosine_similarity_loss", "mlx.nn.losses.cross_entropy", "mlx.nn.losses.gaussian_nll_loss", "mlx.nn.losses.hinge_loss", "mlx.nn.losses.huber_loss", "mlx.nn.losses.kl_div_loss", "mlx.nn.losses.l1_loss", "mlx.nn.losses.log_cosh_loss", "mlx.nn.losses.margin_ranking_loss", "mlx.nn.losses.mse_loss", "mlx.nn.losses.nll_loss", "mlx.nn.losses.smooth_l1_loss", "mlx.nn.losses.triplet_loss", "mlx.nn.mish", "mlx.nn.prelu", "mlx.nn.relu", "mlx.nn.relu6", "mlx.nn.selu", "mlx.nn.sigmoid", "mlx.nn.silu", "mlx.nn.softmax", "mlx.nn.softmin", "mlx.nn.softplus", "mlx.nn.softshrink", "mlx.nn.step", "mlx.nn.tanh", "Functions", "Initializers", "Layers", "Loss Functions", "Module", "Operations", "Optimizers", "mlx.optimizers.AdaDelta", "mlx.optimizers.Adafactor", "mlx.optimizers.Adagrad", "mlx.optimizers.Adam", "mlx.optimizers.AdamW", "mlx.optimizers.Adamax", "mlx.optimizers.Lion", "mlx.optimizers.Optimizer.apply_gradients", "mlx.optimizers.Optimizer.init", "mlx.optimizers.Optimizer.state", "mlx.optimizers.Optimizer.update", "mlx.optimizers.RMSprop", "mlx.optimizers.SGD", "mlx.optimizers.cosine_decay", "mlx.optimizers.exponential_decay", "mlx.optimizers.join_schedules", "mlx.optimizers.linear_schedule", "mlx.optimizers.step_decay", "Common Optimizers", "Optimizer", "Schedulers", "Random", "Transforms", "Tree Utils", "Compilation", "Distributed Communication", "Function Transforms", "Indexing Arrays", "Lazy Evaluation", "Conversion to NumPy and Other Frameworks", "Quick Start Guide", "Saving and Loading Arrays", "Unified Memory", "Using Streams"], "titleterms": {"A": 472, "In": 467, "The": 315, "ab": [12, 32], "adadelta": 440, "adafactor": 441, "adagrad": 442, "adam": 443, "adamax": 445, "adamw": 444, "add": 13, "addmm": 14, "affine_quant": 141, "algebra": 313, "alibi": 316, "all": [5, 15, 33, 465], "all_gath": 121, "all_sum": 122, "allclos": 16, "ani": [17, 34], "api": [7, 8], "appli": 345, "apply_gradi": 447, "apply_to_modul": 346, "arang": 18, "arcco": 19, "arccosh": 20, "arcsin": 21, "arcsinh": 22, "arctan": 23, "arctan2": 24, "arctanh": 25, "argmax": [26, 35], "argmin": [27, 36], "argpartit": 28, "argsort": 29, "arrai": [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 307, 467, 471], "array_equ": 82, "as_strid": 83, "astyp": 37, "atleast_1d": 84, "atleast_2d": 85, "atleast_3d": 86, "attent": 5, "automat": 466, "avgpool1d": 317, "avgpool2d": 318, "back": 2, "basic": [464, 470], "batchnorm": 319, "benchmark": 5, "bernoulli": 234, "binari": 8, "binary_cross_entropi": 406, "bind": 2, "bitwise_and": 87, "bitwise_or": 88, "bitwise_xor": 89, "block_masked_mm": 90, "broadcast_to": 91, "build": [2, 8], "c": [7, 8], "categor": 235, "ceil": 92, "children": 347, "choleski": 182, "cholesky_inv": 183, "class": 315, "clear_cach": 205, "clip": 93, "clip_grad_norm": 300, "cmake": 2, "co": [40, 106], "code": [2, 5], "common": 458, "commun": [310, 465], "compil": [94, 464], "complex": 1, "comput": 468, "concaten": 95, "conj": [39, 96], "conjug": 97, "constant": 387, "conv1d": [98, 320], "conv2d": [99, 321], "conv3d": [100, 322], "conv_gener": 101, "conv_transpose1d": 102, "conv_transpose2d": 103, "conv_transpose3d": 104, "convers": 469, "convert": 5, "convolv": 105, "convtranspose1d": 323, "convtranspose2d": 324, "convtranspose3d": 325, "core": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 306], "cosh": 107, "cosine_decai": 453, "cosine_similarity_loss": 407, "cpu": 2, "cross_entropi": 408, "cummax": [41, 108], "cummin": [42, 109], "cumprod": [43, 110], "cumsum": [44, 111], "custom": [1, 2], "custom_funct": 112, "data": 308, "debug": 464, "debugg": 3, "default_devic": 113, "default_stream": 114, "degre": 115, "dequant": 116, "devic": [9, 309], "device_info": 206, "diag": [45, 117], "diagon": [46, 118], "differ": 467, "differenti": 466, "disable_compil": 119, "distribut": [120, 121, 122, 123, 124, 125, 126, 127, 310, 465], "divid": 128, "divmod": 129, "download": [2, 5], "dropout": 326, "dropout2d": 327, "dropout3d": 328, "dtype": [10, 47], "dtypecategori": 11, "einsum": 130, "einsum_path": 131, "elu": 395, "embed": 329, "enable_compil": 132, "encod": 5, "end": 2, "equal": 133, "erf": 134, "erfinv": 135, "eval": [136, 348], "evalu": 468, "exampl": [1, 2, 7, 464, 465, 472], "exp": [48, 137], "expand_dim": 138, "expm1": 139, "exponential_decai": 454, "extens": 2, "ey": 140, "fast": [141, 142, 143, 144, 145, 146, 311], "fft": [147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 312], "fft2": 148, "fftn": 149, "filter_and_map": 349, "flatten": [49, 159], "floor": 160, "floor_divid": 161, "format": 471, "found": 8, "framework": 469, "freez": 350, "from": [8, 467], "full": [5, 162], "function": [433, 436, 464, 466, 470], "further": 7, "gather_mm": 163, "gather_qmm": 164, "gaussian_nll_loss": 409, "gelu": [330, 396], "gelu_approx": 397, "gelu_fast_approx": 398, "gener": 5, "get": 465, "get_active_memori": 207, "get_cache_memori": 208, "get_peak_memori": 209, "glorot_norm": 388, "glorot_uniform": 389, "glu": [331, 399], "gpu": 2, "grad": [165, 315], "graph": [464, 468, 470], "greater": 166, "greater_equ": 167, "grid": 1, "group": 120, "groupnorm": 333, "gru": 332, "guid": 470, "gumbel": 236, "hadamard_transform": 168, "hard_shrink": 400, "hard_tanh": 401, "hardshrink": 334, "hardswish": [336, 402], "hardtanh": 335, "he_norm": 390, "he_uniform": 391, "hinge_loss": 410, "host": 465, "huber_loss": 411, "ident": [169, 392], "ifft": 150, "ifft2": 151, "ifftn": 152, "implement": [2, 5], "index": 467, "infer": 5, "init": [123, 387, 388, 389, 390, 391, 392, 393, 394, 448], "initi": 434, "inner": 170, "inspect": 315, "instal": [7, 8, 465], "instancenorm": 337, "introduc": 2, "inv": 184, "irfft": 153, "irfft2": 154, "irfftn": 155, "is_avail": [124, 210], "isclos": 171, "isfinit": 172, "isinf": 173, "isnan": 174, "isneginf": 175, "isposinf": 176, "issubdtyp": 177, "item": 50, "items": 51, "jax": 469, "join_schedul": 455, "jvp": 178, "kei": 237, "kernel": 1, "kl_div_loss": 412, "l1_loss": 413, "laplac": 238, "layer": [5, 6, 435], "layer_norm": 142, "layernorm": 339, "lazi": 468, "leaf_modul": 351, "leaky_relu": 403, "leakyrelu": 340, "left_shift": 179, "less": 180, "less_equ": 181, "linalg": [182, 183, 184, 185, 186, 187, 188], "linear": [4, 313, 341], "linear_schedul": 456, "linspac": 189, "lion": 446, "llm": 5, "load": [5, 190, 439, 471], "load_weight": 352, "log": [52, 191], "log10": [53, 192], "log1p": [54, 193], "log2": [55, 194], "log_cosh_loss": 414, "log_sigmoid": 404, "log_softmax": 405, "logaddexp": 195, "logical_and": 196, "logical_not": 197, "logical_or": 198, "logsumexp": [56, 199], "loss": [406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 436], "lstm": 338, "margin_ranking_loss": 415, "matmul": 200, "max": [57, 201], "maximum": 202, "maxpool1d": 342, "maxpool2d": 343, "mean": [58, 203], "memori": 472, "meshgrid": 204, "metal": [1, 3, 8, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 314], "metal_kernel": 143, "min": [59, 216], "minim": 8, "minimum": 217, "mish": [344, 420], "mlx": [2, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457], "model": 5, "modul": [315, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 437], "moveaxi": [60, 218], "mpi": 465, "mse_loss": 416, "multi": 6, "multiheadattent": 365, "multipli": 219, "multivariate_norm": 239, "named_modul": 354, "nan_to_num": 220, "nbyte": 61, "ndim": 62, "neg": 221, "network": 315, "neural": 315, "new_stream": 222, "nll_loss": 417, "nn": [298, 299, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432], "norm": 185, "normal": [240, 393], "not_equ": 223, "numpi": [467, 469], "ones": 224, "ones_lik": 225, "onli": 468, "oper": [0, 2, 438], "optim": [300, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459], "option": 8, "other": 469, "outer": 226, "pad": 227, "paramet": [315, 355], "partit": 228, "perceptron": 6, "place": 467, "power": 229, "prelu": [366, 421], "primit": 2, "prod": [63, 230], "pure": 464, "put": 5, "python": [2, 7, 8], "pytorch": 469, "qr": 186, "quantiz": [231, 298], "quantized_matmul": 232, "quantizedembed": 367, "quantizedlinear": 368, "quick": [315, 470], "radian": 233, "randint": 241, "random": [234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 461], "read": 7, "reciproc": [64, 246], "recv": 125, "recv_lik": 126, "reduc": 465, "refer": 7, "regress": 4, "relu": [371, 422], "relu6": [372, 423], "remaind": 247, "remot": 465, "repeat": 248, "requir": 8, "reset_peak_memori": 211, "reshap": [65, 249], "result": 2, "rfft": 156, "rfft2": 157, "rfftn": 158, "right_shift": 250, "rms_norm": 144, "rmsnorm": 369, "rmsprop": 451, "rnn": 370, "rope": [145, 373], "round": [66, 251], "rsqrt": [67, 252], "sampl": 1, "save": [253, 439, 471], "save_gguf": 254, "save_safetensor": 255, "save_weight": 356, "savez": 256, "savez_compress": 257, "scaled_dot_product_attent": 146, "schedul": 460, "script": [2, 5], "seed": 242, "selu": [374, 424], "send": 127, "sequenti": 375, "serial": 471, "set": 465, "set_cache_limit": 212, "set_default_devic": 258, "set_default_stream": 259, "set_dtyp": 357, "set_memory_limit": 213, "setuptool": 2, "sgd": 452, "shape": [1, 68], "shell": 8, "sigmoid": [260, 425], "sign": 261, "silu": [376, 426], "simpl": [1, 472], "sin": [69, 262], "sinh": 263, "sinusoidalpositionalencod": 377, "size": [8, 70], "smooth_l1_loss": 418, "softmax": [264, 378, 427], "softmin": [379, 428], "softplu": [380, 429], "softshrink": [381, 430], "softsign": 382, "sort": 265, "sourc": 8, "specifi": 473, "speedup": 464, "split": [71, 243, 266], "sqrt": [72, 267], "squar": [73, 268], "squeez": [74, 269], "stack": 270, "start": [315, 465, 470], "start_captur": 214, "state": [358, 449], "std": [75, 271], "step": [383, 431], "step_decai": 457, "stop_captur": 215, "stop_gradi": 272, "stream": [273, 306, 309, 473], "stride": 1, "subtract": 274, "sum": [76, 275], "support": 308, "svd": 187, "swapax": [77, 276], "synchron": 277, "t": 31, "take": 278, "take_along_axi": 279, "tan": 280, "tanh": [281, 384, 432], "tensordot": 282, "tensorflow": 469, "tile": 283, "togeth": 5, "tolist": 78, "topk": 284, "trace": 285, "train": [359, 361, 464, 465], "trainable_paramet": 360, "transform": [2, 385, 462, 464, 466, 468, 470], "transpos": [79, 286], "tree": 463, "tree_flatten": 301, "tree_map": 302, "tree_map_with_path": 303, "tree_reduc": 304, "tree_unflatten": 305, "tri": 287, "tri_inv": 188, "tril": 288, "triplet_loss": 419, "triu": 289, "troubleshoot": 8, "truncated_norm": 244, "tune": 465, "type": 308, "unfreez": 362, "unifi": 472, "uniform": [245, 394], "up": 465, "updat": [315, 363, 450, 467], "update_modul": 364, "upsampl": 386, "us": [1, 2, 468, 473], "usag": [2, 7], "util": [301, 302, 303, 304, 305, 463], "valu": 315, "value_and_grad": [290, 299], "var": [80, 291], "vector": 466, "view": [81, 292], "vjp": [1, 293], "vmap": 294, "weight": 5, "what": 468, "when": 468, "where": 295, "why": 468, "workflow": 3, "x86": 8, "xcode": 3, "you": 468, "zero": 296, "zeros_lik": 297}})